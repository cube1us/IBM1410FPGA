-- Test BenchVHDL for IBM SMS ALD group AChInputTransForAdder
-- Title: AChInputTransForAdder
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/28/2020 4:41:21 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AChInputTransForAdder_tb is
end AChInputTransForAdder_tb;

architecture behavioral of AChInputTransForAdder_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AChInputTransForAdder
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PB_TRUE_ADD_A: in STD_LOGIC;
		PB_COMP_ADD_A: in STD_LOGIC;
		MS_A_CH_INSERT_PLUS_ZERO: in STD_LOGIC;
		MS_A_CH_INSERT_PLUS_NINE: in STD_LOGIC;
		PB_A_CH_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		PB_A_CH_NOT_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		MB_ADD_AB0: out STD_LOGIC;
		MB_ADD_AB1: out STD_LOGIC;
		MB_ADD_AQ0: out STD_LOGIC;
		MB_ADD_AQ2: out STD_LOGIC;
		MB_ADD_AQ4: out STD_LOGIC;
		MB_ADD_AQ6: out STD_LOGIC;
		MB_ADD_AQ8: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PB_TRUE_ADD_A: STD_LOGIC := '0';
	signal PB_COMP_ADD_A: STD_LOGIC := '0';
	signal MS_A_CH_INSERT_PLUS_ZERO: STD_LOGIC := '1';
	signal MS_A_CH_INSERT_PLUS_NINE: STD_LOGIC := '1';
	signal PB_A_CH_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";
	signal PB_A_CH_NOT_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";

	-- Outputs

	signal MB_ADD_AB0: STD_LOGIC;
	signal MB_ADD_AB1: STD_LOGIC;
	signal MB_ADD_AQ0: STD_LOGIC;
	signal MB_ADD_AQ2: STD_LOGIC;
	signal MB_ADD_AQ4: STD_LOGIC;
	signal MB_ADD_AQ6: STD_LOGIC;
	signal MB_ADD_AQ8: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AChInputTransForAdder port map(
		FPGA_CLK => FPGA_CLK,
		PB_TRUE_ADD_A => PB_TRUE_ADD_A,
		PB_COMP_ADD_A => PB_COMP_ADD_A,
		MS_A_CH_INSERT_PLUS_ZERO => MS_A_CH_INSERT_PLUS_ZERO,
		MS_A_CH_INSERT_PLUS_NINE => MS_A_CH_INSERT_PLUS_NINE,
		PB_A_CH_BUS => PB_A_CH_BUS,
		PB_A_CH_NOT_BUS => PB_A_CH_NOT_BUS,
		MB_ADD_AB0 => MB_ADD_AB0,
		MB_ADD_AB1 => MB_ADD_AB1,
		MB_ADD_AQ0 => MB_ADD_AQ0,
		MB_ADD_AQ2 => MB_ADD_AQ2,
		MB_ADD_AQ4 => MB_ADD_AQ4,
		MB_ADD_AQ6 => MB_ADD_AQ6,
		MB_ADD_AQ8 => MB_ADD_AQ8);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "16.11.01.1        ";

   for tt in 0 to 2**6 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      
      PB_TRUE_ADD_A <= a;
      PB_A_CH_NOT_BUS(HDL_1_BIT) <= b;
      PB_COMP_ADD_A <= c;
      PB_A_CH_BUS(HDL_1_BIT) <= d;
      MS_A_CH_INSERT_PLUS_ZERO <= not e;
      MS_A_CH_INSERT_PLUS_NINE <= not f;

      wait for 30 ns;      
      
      check1(MB_ADD_AB0,NOT((a and b) or e or (d and c)),testName,"ADD A B0");
      check1(MB_ADD_AB1,NOT((a and d) or f or (c and b)),testName,"ADD A B1");

   end loop;

   testName := "16.11.02.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      
      PB_A_CH_NOT_BUS(HDL_8_BIT) <= a;
      PB_A_CH_NOT_BUS(HDL_2_BIT) <= b;
      PB_A_CH_NOT_BUS(HDL_4_BIT) <= c;
      PB_COMP_ADD_A <= d;
      PB_A_CH_BUS(HDL_8_BIT) <= e;
      PB_TRUE_ADD_A <= f;
      PB_A_CH_NOT_BUS(HDL_1_BIT) <= g;
      PB_A_CH_BUS(HDL_2_BIT) <= h;
      MS_A_CH_INSERT_PLUS_ZERO <= not j;  -- Inverted on page 16.11.01.1      

      wait for 30 ns;      
      
      check1(MB_ADD_AQ0,NOT((f and g and h and c and e) or j or
         (f and b and c and a) or (d and c and e and b)),testName,"ADD A Q0");

   end loop;


   testName := "16.11.03.1        ";

   for tt in 0 to 2**7 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      
      PB_A_CH_NOT_BUS(HDL_8_BIT) <= a;
      PB_TRUE_ADD_A <= b;
      PB_A_CH_NOT_BUS(HDL_4_BIT) <= c;
      PB_A_CH_BUS(HDL_1_BIT) <= d;
      PB_A_CH_BUS(HDL_2_BIT) <= e;
      PB_COMP_ADD_A <= f;
      PB_A_CH_BUS(HDL_4_BIT) <= g;
       
      wait for 30 ns;      
      
      check1(MB_ADD_AQ2,NOT((b and e and c and a) or (b and e and c and d) or 
         (f and e and g)),testName,"ADD A Q2");

   end loop;


   testName := "16.11.04.1        ";

   for tt in 0 to 2**4 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      
      PB_TRUE_ADD_A <= a;
      PB_A_CH_BUS(HDL_4_BIT) <= b;
      PB_A_CH_NOT_BUS(HDL_2_BIT) <= c;
      PB_COMP_ADD_A <= d;
             
      wait for 30 ns;      
      
      check1(MB_ADD_AQ4,NOT((a and b and c) or (d and c and b)),testName,"ADD A Q4");

   end loop;


   testName := "16.11.05.1        ";

   for tt in 0 to 2**7 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      
      PB_A_CH_BUS(HDL_1_BIT) <= a;
      PB_COMP_ADD_A <= b;
      PB_A_CH_NOT_BUS(HDL_4_BIT) <= c;
      PB_A_CH_NOT_BUS(HDL_8_BIT) <= d;
      PB_A_CH_BUS(HDL_2_BIT) <= e;
      PB_TRUE_ADD_A <= f;
      PB_A_CH_BUS(HDL_4_BIT) <= g;

      wait for 30 ns;      
      
      check1(MB_ADD_AQ6,NOT((f and e and g) or (b and e and c and a) or
         (b and e and c and d)),testName,"ADD A Q6");

   end loop;


   testName := "16.11.06.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      
      PB_TRUE_ADD_A <= a;
      PB_A_CH_NOT_BUS(HDL_2_BIT) <= b;
      PB_A_CH_BUS(HDL_8_BIT) <= c;
      PB_A_CH_NOT_BUS(HDL_8_BIT) <= d;
      PB_COMP_ADD_A <= e;
      PB_A_CH_NOT_BUS(HDL_4_BIT) <= g;
      PB_A_CH_BUS(HDL_2_BIT) <= f;
      PB_A_CH_NOT_BUS(HDL_1_BIT) <= h;
      MS_A_CH_INSERT_PLUS_NINE <= not j; -- Inverted on page 16.11.01.1
      
      wait for 30 ns;      
      
      check1(MB_ADD_AQ8,NOT((a and g and b and c) or (e and f and g and c and h) or
         (e and g and d and b) or j),testName,"ADD A Q8");

   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
