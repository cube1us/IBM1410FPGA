-- VHDL for IBM SMS ALD page 18.14.11.1
-- Title: MISC ERRORS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/13/2020 8:57:03 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_18_14_11_1_MISC_ERRORS is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_1401_MODE:	 in STD_LOGIC;
		PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME:	 in STD_LOGIC;
		PS_I_CYCLE:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		MS_START_RESET:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_A_OR_B_BITS:	 in STD_LOGIC;
		MS_OP_MOD_CHAR_TIME_STAR_ARS:	 in STD_LOGIC;
		PS_M_OR_L_OP_CODES:	 in STD_LOGIC;
		PS_B_OR_E_OR_F_CYCLE:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_1:	 in STD_LOGIC;
		PS_WRAP_AROUND_CONDITIONS:	 in STD_LOGIC;
		PS_B_CYCLE:	 in STD_LOGIC;
		PS_CLEAR_OP_CODE:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		MS_STORAGE_SCAN_ROUTINE:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		PS_E_CH_2_CHAR_ONLY_OP_CODES:	 in STD_LOGIC;
		PS_INTERLOCK_F_CH_STAR_1414_STAR:	 in STD_LOGIC;
		PS_PERCENT_OR_COML_AT:	 in STD_LOGIC;
		PS_E_CH_INTERLOCK:	 in STD_LOGIC;
		PS_I_RING_3_TIME:	 in STD_LOGIC;
		PS_ERROR_SAMPLE:	 in STD_LOGIC;
		PS_F_CH_INTERLOCK:	 in STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK:	 in STD_LOGIC;
		MS_DISPLAY_OR_ALTER:	 in STD_LOGIC;
		PS_INSTRUCTION_CHECK_GATE:	 in STD_LOGIC;
		MS_ADDRESS_CHECK:	 out STD_LOGIC;
		MS_I_O_INTERLOCK_CHECK:	 out STD_LOGIC;
		MS_INSTRUCTION_CHECK:	 out STD_LOGIC;
		LAMP_15A1B15:	 out STD_LOGIC;
		LAMP_15A1W01:	 out STD_LOGIC;
		LAMP_15A1W04:	 out STD_LOGIC);
end ALD_18_14_11_1_MISC_ERRORS;

architecture behavioral of ALD_18_14_11_1_MISC_ERRORS is 

	signal OUT_3A_E: STD_LOGIC;
	signal OUT_2A_C: STD_LOGIC;
	signal OUT_5B_C: STD_LOGIC;
	signal OUT_4B_G: STD_LOGIC;
	signal OUT_3B_C: STD_LOGIC;
	signal OUT_2B_E: STD_LOGIC;
	signal OUT_2B_E_Latch: STD_LOGIC;
	signal OUT_1B_D: STD_LOGIC;
	signal OUT_1B_D_Latch: STD_LOGIC;
	signal OUT_5C_R: STD_LOGIC;
	signal OUT_4C_G: STD_LOGIC;
	signal OUT_3C_C: STD_LOGIC;
	signal OUT_2C_A: STD_LOGIC;
	signal OUT_5D_C: STD_LOGIC;
	signal OUT_4D_C: STD_LOGIC;
	signal OUT_3D_D: STD_LOGIC;
	signal OUT_5E_C: STD_LOGIC;
	signal OUT_2E_D: STD_LOGIC;
	signal OUT_5F_D: STD_LOGIC;
	signal OUT_5G_G: STD_LOGIC;
	signal OUT_3H_C: STD_LOGIC;
	signal OUT_2I_C: STD_LOGIC;
	signal OUT_DOT_2A: STD_LOGIC;
	signal OUT_DOT_4B: STD_LOGIC;
	signal OUT_DOT_4D: STD_LOGIC;

begin

	OUT_3A_E <= NOT(PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME AND PS_I_CYCLE AND PS_B_CH_NOT_WM_BIT );
	OUT_2A_C <= NOT(MS_1401_MODE );
	OUT_5B_C <= NOT(PS_M_OR_L_OP_CODES AND PS_B_OR_E_OR_F_CYCLE );
	OUT_4B_G <= NOT(OUT_5B_C AND PS_WRAP_AROUND_CONDITIONS AND OUT_5C_R );
	OUT_3B_C <= NOT(PS_ASSEMBLY_CH_A_OR_B_BITS AND MS_OP_MOD_CHAR_TIME_STAR_ARS AND PS_LOGIC_GATE_F_1 );
	OUT_2B_E_Latch <= NOT(MS_START_RESET AND OUT_1B_D );
	OUT_1B_D_Latch <= NOT(OUT_2B_E AND OUT_DOT_2A AND OUT_DOT_4B );
	OUT_5C_R <= NOT(PS_B_CYCLE AND PS_CLEAR_OP_CODE );
	OUT_4C_G <= NOT(PS_2ND_CLOCK_PULSE_2 AND PS_LOGIC_GATE_F_1 AND MS_STORAGE_SCAN_ROUTINE );
	OUT_3C_C <= NOT(OUT_1B_D AND PS_ERROR_SAMPLE );
	OUT_2C_A <= NOT OUT_3C_C;
	LAMP_15A1B15 <= OUT_2C_A;
	OUT_5D_C <= NOT(PS_I_RING_OP_TIME AND PS_E_CH_2_CHAR_ONLY_OP_CODES AND PS_E_CH_INTERLOCK );
	OUT_4D_C <= NOT(OUT_5D_C AND OUT_5F_D AND OUT_5E_C );
	OUT_3D_D <= NOT(MS_1401_MODE AND OUT_DOT_4D AND PS_ERROR_SAMPLE );
	OUT_5E_C <= NOT(PS_I_RING_3_TIME AND PS_E_CH_INTERLOCK AND PS_PERCENT_OR_COML_AT );
	OUT_2E_D <= NOT OUT_3D_D;
	LAMP_15A1W01 <= OUT_2E_D;
	OUT_5F_D <= NOT(PS_F_CH_INTERLOCK AND PS_LOZENGE_OR_ASTERISK AND PS_I_RING_3_TIME );
	OUT_5G_G <= NOT(MS_DISPLAY_OR_ALTER );
	OUT_3H_C <= NOT(PS_INSTRUCTION_CHECK_GATE AND PS_ERROR_SAMPLE );
	OUT_2I_C <= NOT OUT_3H_C;
	LAMP_15A1W04 <= OUT_2I_C;
	OUT_DOT_2A <= OUT_3A_E OR OUT_2A_C OR OUT_3B_C;
	OUT_DOT_4B <= OUT_4B_G OR OUT_4C_G OR OUT_5G_G;
	OUT_DOT_4D <= OUT_4D_C OR PS_INTERLOCK_F_CH_STAR_1414_STAR;

	MS_ADDRESS_CHECK <= OUT_3C_C;
	MS_I_O_INTERLOCK_CHECK <= OUT_3D_D;
	MS_INSTRUCTION_CHECK <= OUT_3H_C;

	Latch_2B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2B_E_Latch,
		Q => OUT_2B_E,
		QBar => OPEN );

	Latch_1B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_1B_D_Latch,
		Q => OUT_1B_D,
		QBar => OPEN );


end;
