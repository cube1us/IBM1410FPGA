-- Test Bench VHDL for IBM SMS ALD page 44.10.02.1
-- Title: 1* CONSOLE STOP PRINT LATCH
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/27/2020 10:10:16 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_44_10_02_1_1_CONSOLE_STOP_PRINT_LATCH_tb is
end ALD_44_10_02_1_1_CONSOLE_STOP_PRINT_LATCH_tb;

architecture behavioral of ALD_44_10_02_1_1_CONSOLE_STOP_PRINT_LATCH_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_44_10_02_1_1_CONSOLE_STOP_PRINT_LATCH
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_CONSOLE_STOP_CONDITION_LATCH:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		MS_CONSOLE_STOPPED:	 in STD_LOGIC;
		PS_CONSOLE_HOME_POSITION:	 in STD_LOGIC;
		PS_CONS_CLOCK_4_POS:	 in STD_LOGIC;
		PS_CONS_STOP_CR_COMPLETE:	 in STD_LOGIC;
		PS_CONS_STOP_PRINT_COMP_COND:	 in STD_LOGIC;
		MS_CONS_STOP_PRINT_OUT_COND:	 in STD_LOGIC;
		MV_START_PRINT_SWITCH:	 in STD_LOGIC;
		PS_CONS_MX_35_POS:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS:	 in STD_LOGIC;
		PS_MASTER_ERROR:	 in STD_LOGIC;
		MV_CONS_CYCLE_CTRL_LOGIC_STEP:	 in STD_LOGIC;
		MV_CONS_CYCLE_CTRL_STOR_SCAN:	 in STD_LOGIC;
		MV_CONS_MODE_SW_I_E_CYCLE_MODE:	 in STD_LOGIC;
		MS_MASTER_ERROR:	 in STD_LOGIC;
		PS_CONS_STOP_PRINT_LATCH:	 out STD_LOGIC;
		MS_CONS_STOP_PRINT_MX_GATE:	 out STD_LOGIC;
		MS_CONS_STOP_PRINT_LATCH:	 out STD_LOGIC;
		PS_CONS_STOP_PRINT_COMPLETE:	 out STD_LOGIC;
		MS_CONS_STOP_RESET:	 out STD_LOGIC;
		MS_CONS_START_STOP_PRINT_OUT:	 out STD_LOGIC;
		PS_CONS_ERROR_STOP:	 out STD_LOGIC;
		PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR:	 out STD_LOGIC;
		PS_CONS_CYCLE_STOP:	 out STD_LOGIC;
		PS_CONS_NORMAL_STOP:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_CONSOLE_STOP_CONDITION_LATCH: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal MS_CONSOLE_STOPPED: STD_LOGIC := '1';
	signal PS_CONSOLE_HOME_POSITION: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_4_POS: STD_LOGIC := '0';
	signal PS_CONS_STOP_CR_COMPLETE: STD_LOGIC := '0';
	signal PS_CONS_STOP_PRINT_COMP_COND: STD_LOGIC := '0';
	signal MS_CONS_STOP_PRINT_OUT_COND: STD_LOGIC := '1';
	signal MV_START_PRINT_SWITCH: STD_LOGIC := '1';
	signal PS_CONS_MX_35_POS: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_3_POS: STD_LOGIC := '0';
	signal PS_MASTER_ERROR: STD_LOGIC := '0';
	signal MV_CONS_CYCLE_CTRL_LOGIC_STEP: STD_LOGIC := '1';
	signal MV_CONS_CYCLE_CTRL_STOR_SCAN: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_I_E_CYCLE_MODE: STD_LOGIC := '1';
	signal MS_MASTER_ERROR: STD_LOGIC := '1';

	-- Outputs

	signal PS_CONS_STOP_PRINT_LATCH: STD_LOGIC;
	signal MS_CONS_STOP_PRINT_MX_GATE: STD_LOGIC;
	signal MS_CONS_STOP_PRINT_LATCH: STD_LOGIC;
	signal PS_CONS_STOP_PRINT_COMPLETE: STD_LOGIC;
	signal MS_CONS_STOP_RESET: STD_LOGIC;
	signal MS_CONS_START_STOP_PRINT_OUT: STD_LOGIC;
	signal PS_CONS_ERROR_STOP: STD_LOGIC;
	signal PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_CONS_CYCLE_STOP: STD_LOGIC;
	signal PS_CONS_NORMAL_STOP: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_44_10_02_1_1_CONSOLE_STOP_PRINT_LATCH port map(
		FPGA_CLK => FPGA_CLK,
		PS_CONSOLE_STOP_CONDITION_LATCH => PS_CONSOLE_STOP_CONDITION_LATCH,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		MS_CONSOLE_STOPPED => MS_CONSOLE_STOPPED,
		PS_CONSOLE_HOME_POSITION => PS_CONSOLE_HOME_POSITION,
		PS_CONS_CLOCK_4_POS => PS_CONS_CLOCK_4_POS,
		PS_CONS_STOP_CR_COMPLETE => PS_CONS_STOP_CR_COMPLETE,
		PS_CONS_STOP_PRINT_COMP_COND => PS_CONS_STOP_PRINT_COMP_COND,
		MS_CONS_STOP_PRINT_OUT_COND => MS_CONS_STOP_PRINT_OUT_COND,
		MV_START_PRINT_SWITCH => MV_START_PRINT_SWITCH,
		PS_CONS_MX_35_POS => PS_CONS_MX_35_POS,
		PS_CONS_CLOCK_3_POS => PS_CONS_CLOCK_3_POS,
		PS_MASTER_ERROR => PS_MASTER_ERROR,
		MV_CONS_CYCLE_CTRL_LOGIC_STEP => MV_CONS_CYCLE_CTRL_LOGIC_STEP,
		MV_CONS_CYCLE_CTRL_STOR_SCAN => MV_CONS_CYCLE_CTRL_STOR_SCAN,
		MV_CONS_MODE_SW_I_E_CYCLE_MODE => MV_CONS_MODE_SW_I_E_CYCLE_MODE,
		MS_MASTER_ERROR => MS_MASTER_ERROR,
		PS_CONS_STOP_PRINT_LATCH => PS_CONS_STOP_PRINT_LATCH,
		MS_CONS_STOP_PRINT_MX_GATE => MS_CONS_STOP_PRINT_MX_GATE,
		MS_CONS_STOP_PRINT_LATCH => MS_CONS_STOP_PRINT_LATCH,
		PS_CONS_STOP_PRINT_COMPLETE => PS_CONS_STOP_PRINT_COMPLETE,
		MS_CONS_STOP_RESET => MS_CONS_STOP_RESET,
		MS_CONS_START_STOP_PRINT_OUT => MS_CONS_START_STOP_PRINT_OUT,
		PS_CONS_ERROR_STOP => PS_CONS_ERROR_STOP,
		PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR => PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR,
		PS_CONS_CYCLE_STOP => PS_CONS_CYCLE_STOP,
		PS_CONS_NORMAL_STOP => PS_CONS_NORMAL_STOP);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "44.10.02.1        ";

   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      c := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      l := tv(9);
      m := tv(10);
      n := tv(11);
      o := tv(12);
      p := tv(13);
      q := tv(14);
      
      g1 := (h or j) and f and e and d;

      -- Reset the latch one of two ways
      
      MS_PROGRAM_RESET_4 <= c;
      MS_CONSOLE_STOPPED <= not c;
      wait for 30 ns;
      MS_PROGRAM_RESET_4 <= '1';
      MS_CONSOLE_STOPPED <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_STOP_PRINT_LATCH,'0',testName,"Loop Reset +S Cons Stop Print Latch");
      check1(MS_CONS_STOP_PRINT_LATCH,'1',testName,"Loop Reset -S Cons Stop Print Latch");
      
		PS_CONSOLE_STOP_CONDITION_LATCH <= a;
      PS_CONSOLE_HOME_POSITION <= d;
      PS_CONS_CLOCK_4_POS <= e;
      PS_CONS_STOP_CR_COMPLETE <= f;
      PS_CONS_STOP_PRINT_COMP_COND <= g;
      MS_CONS_STOP_PRINT_OUT_COND <= not h;
      MV_START_PRINT_SWITCH <= not j;
      PS_CONS_MX_35_POS <= k;
      PS_CONS_CLOCK_3_POS <= l;
      PS_MASTER_ERROR <= m;
      MV_CONS_CYCLE_CTRL_LOGIC_STEP <= not n;
      MV_CONS_CYCLE_CTRL_STOR_SCAN <= not o;
      MV_CONS_MODE_SW_I_E_CYCLE_MODE <= not p;
      MS_MASTER_ERROR <= not q;            
      wait for 30 ns;
      
		check1(PS_CONS_STOP_PRINT_LATCH,g1,testName,"Set +S Cons Stop Print Latch");
      check1(MS_CONS_STOP_PRINT_LATCH,not g1,testName,"Set -S Cons Stop Print Latch");
      check1(MS_CONS_STOP_PRINT_MX_GATE,not(g1 and a),testName,"Set Cons Stop Print MX Gate");
      check1(PS_CONS_STOP_PRINT_COMPLETE,not g1 and g,testName,"Set Cons Stop Print Complete");
      check1(MS_CONS_STOP_RESET,not(not g1 and (h or j)),testName,"Set Cons Stop Reset");
      check1(MS_CONS_START_STOP_PRINT_OUT,not(g1 and k and l),testName,"Set Cons Start Stop Print Out");
      check1(PS_CONS_ERROR_STOP,g1 and m,testName,"Set Error Stop");
      check1(PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR,n or o or p,testName,"Logic Step + IE + Storage Cycle");
      check1(PS_CONS_CYCLE_STOP,g1 and not q and (n or o or p),testName,"Set Cons Cycle Stop");
      check1(PS_CONS_NORMAL_STOP,g1 and not q,testName,"Set Cons Normal Stop");
      wait for 30 ns;
      
      -- Reset the variables so we don't hold latch set for next loop iteration reset
      
  		PS_CONSOLE_STOP_CONDITION_LATCH <= '0';
      PS_CONSOLE_HOME_POSITION <= '0';
      PS_CONS_CLOCK_4_POS <= '0';
      PS_CONS_STOP_CR_COMPLETE <= '0';
      PS_CONS_STOP_PRINT_COMP_COND <= '0';
      MS_CONS_STOP_PRINT_OUT_COND <= '1';
      MV_START_PRINT_SWITCH <= '1';
      PS_CONS_MX_35_POS <= '0';
      PS_CONS_CLOCK_3_POS <= '0';
      PS_MASTER_ERROR <= '0';
      MV_CONS_CYCLE_CTRL_LOGIC_STEP <= '1';
      MV_CONS_CYCLE_CTRL_STOR_SCAN <= '1';
      MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '1';
      MS_MASTER_ERROR <= '1';            

      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 10 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
