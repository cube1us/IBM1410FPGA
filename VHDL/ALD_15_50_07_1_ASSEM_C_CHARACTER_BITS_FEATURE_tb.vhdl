-- Test Bench VHDL for IBM SMS ALD page 15.50.07.1
-- Title: ASSEM C CHARACTER BITS FEATURE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/16/2020 10:47:41 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_50_07_1_ASSEM_C_CHARACTER_BITS_FEATURE_tb is
end ALD_15_50_07_1_ASSEM_C_CHARACTER_BITS_FEATURE_tb;

architecture behavioral of ALD_15_50_07_1_ASSEM_C_CHARACTER_BITS_FEATURE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_50_07_1_ASSEM_C_CHARACTER_BITS_FEATURE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_ASSEMBLY_CH_NU_C_BIT:	 in STD_LOGIC;
		MB_ASSEMBLY_CH_NOT_NU_C_BIT:	 in STD_LOGIC;
		MB_ASSEMBLY_CH_NU_C_BIT:	 in STD_LOGIC;
		MB_ASSEMBLY_CH_ZONE_C_BIT:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_ZONE_C_BIT:	 in STD_LOGIC;
		MS_ASSEMBLY_CH_WM_BIT:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_WM_BIT:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_NOT_NU_C_BIT:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_NOT_ZONE_C_BIT:	 in STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_C_CHAR_BIT:	 out STD_LOGIC;
		MS_ASSEMBLY_CH_C_CHAR_BIT:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_C_BIT:	 out STD_LOGIC;
		PS_ASSEMBLY_CH_C_CHAR_BIT:	 out STD_LOGIC;
		LAMP_11C8D10:	 out STD_LOGIC;
		LAMP_11C8D11:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_NU_C_BIT: STD_LOGIC := '0';
	signal MB_ASSEMBLY_CH_NOT_NU_C_BIT: STD_LOGIC := '1';
	signal MB_ASSEMBLY_CH_NU_C_BIT: STD_LOGIC := '1';
	signal MB_ASSEMBLY_CH_ZONE_C_BIT: STD_LOGIC := '1';
	signal PS_ASSEMBLY_CH_ZONE_C_BIT: STD_LOGIC := '0';
	signal MS_ASSEMBLY_CH_WM_BIT: STD_LOGIC := '1';
	signal PS_ASSEMBLY_CH_WM_BIT: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_NOT_NU_C_BIT: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_NOT_ZONE_C_BIT: STD_LOGIC := '0';

	-- Outputs

	signal MS_ASSEMBLY_CH_NOT_C_CHAR_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_C_CHAR_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_C_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_C_CHAR_BIT: STD_LOGIC;
	signal LAMP_11C8D10: STD_LOGIC;
	signal LAMP_11C8D11: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_50_07_1_ASSEM_C_CHARACTER_BITS_FEATURE port map(
		FPGA_CLK => FPGA_CLK,
		PS_ASSEMBLY_CH_NU_C_BIT => PS_ASSEMBLY_CH_NU_C_BIT,
		MB_ASSEMBLY_CH_NOT_NU_C_BIT => MB_ASSEMBLY_CH_NOT_NU_C_BIT,
		MB_ASSEMBLY_CH_NU_C_BIT => MB_ASSEMBLY_CH_NU_C_BIT,
		MB_ASSEMBLY_CH_ZONE_C_BIT => MB_ASSEMBLY_CH_ZONE_C_BIT,
		PS_ASSEMBLY_CH_ZONE_C_BIT => PS_ASSEMBLY_CH_ZONE_C_BIT,
		MS_ASSEMBLY_CH_WM_BIT => MS_ASSEMBLY_CH_WM_BIT,
		PS_ASSEMBLY_CH_WM_BIT => PS_ASSEMBLY_CH_WM_BIT,
		PS_ASSEMBLY_CH_NOT_NU_C_BIT => PS_ASSEMBLY_CH_NOT_NU_C_BIT,
		PS_ASSEMBLY_CH_NOT_ZONE_C_BIT => PS_ASSEMBLY_CH_NOT_ZONE_C_BIT,
		MS_ASSEMBLY_CH_NOT_C_CHAR_BIT => MS_ASSEMBLY_CH_NOT_C_CHAR_BIT,
		MS_ASSEMBLY_CH_C_CHAR_BIT => MS_ASSEMBLY_CH_C_CHAR_BIT,
		MY_ASSEMBLY_CH_C_BIT => MY_ASSEMBLY_CH_C_BIT,
		PS_ASSEMBLY_CH_C_CHAR_BIT => PS_ASSEMBLY_CH_C_CHAR_BIT,
		LAMP_11C8D10 => LAMP_11C8D10,
		LAMP_11C8D11 => LAMP_11C8D11);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.50.07.1        ";

   for tt in 0 to 2**6 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      
      g1 := e and c and b;
      g2 := c and a and f;
      g3 := f and e and d;
      g4 := b and a and d;
      g5 := a and f and d;
      g6 := d and b and e;
      g7 := e and f and c;
      g8 := a and b and c;

		PS_ASSEMBLY_CH_NU_C_BIT <= a;
		-- MB_ASSEMBLY_CH_NOT_NU_C_BIT;-- Not used on ALD
		-- MB_ASSEMBLY_CH_NU_C_BIT;    -- Not used on ALD
		-- MB_ASSEMBLY_CH_ZONE_C_BIT;  -- Not used on ALD
		PS_ASSEMBLY_CH_ZONE_C_BIT <= b;
		MS_ASSEMBLY_CH_WM_BIT <= c;  -- One when NOT WM
		PS_ASSEMBLY_CH_WM_BIT <= d;
		PS_ASSEMBLY_CH_NOT_NU_C_BIT <= e;
		PS_ASSEMBLY_CH_NOT_ZONE_C_BIT <= f;
          
      wait for 30 ns;
     
      check1(MS_ASSEMBLY_CH_NOT_C_CHAR_BIT,NOT(g1 or g2 or g3 or g4),testName,"-S Assm ch Not C Char Bit");
      check1(LAMP_11C8D10,NOT MS_ASSEMBLY_CH_NOT_C_CHAR_BIT,testName,"Assembly Ch NOT C Char Lamp");
      check1(MS_ASSEMBLY_CH_C_CHAR_BIT,NOT(g5 or g6 or g7 or g8),testName,"-S Assm Ch C Char Bit");
      check1(LAMP_11C8D11,NOT MS_ASSEMBLY_CH_C_CHAR_BIT,testName,"Assembly Ch C Char Lamp");
      check1(MY_ASSEMBLY_CH_C_BIT,MS_ASSEMBLY_CH_C_CHAR_BIT,testName,"-Y Assm Ch C Char Bit");
      check1(PS_ASSEMBLY_CH_C_CHAR_BIT,NOT MS_ASSEMBLY_CH_C_CHAR_BIT,testName,"+S Assm Ch C Char Bit"); 
     
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
