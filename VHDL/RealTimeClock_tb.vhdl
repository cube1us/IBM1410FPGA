-- Test BenchVHDL for IBM SMS ALD group RealTimeClock
-- Title: RealTimeClock
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 11/7/2020 2:27:54 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity RealTimeClock_tb is
end RealTimeClock_tb;

architecture behavioral of RealTimeClock_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component RealTimeClock
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_REAL_TIME_CLOCK_GATE_A: in STD_LOGIC;
		MS_REAL_TIME_CLOCK_GATE_B: in STD_LOGIC;
		MS_REAL_TIME_CLOCK_GATE_C: in STD_LOGIC;
		MS_REAL_TIME_CLOCK_GATE_D: in STD_LOGIC;
		PS_GATE_REAL_TIME_CLOCK: in STD_LOGIC;
		SWITCH_ROT_M_RTC_023_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_M_RTC_578_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_MRTC_01234_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_MRTC_56789_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_01234_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_56789_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_012_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		MS_REAL_TIME_CLOCK_DIGIT_BUS: out STD_LOGIC_VECTOR (9 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_REAL_TIME_CLOCK_GATE_A: STD_LOGIC := '1';
	signal MS_REAL_TIME_CLOCK_GATE_B: STD_LOGIC := '1';
	signal MS_REAL_TIME_CLOCK_GATE_C: STD_LOGIC := '1';
	signal MS_REAL_TIME_CLOCK_GATE_D: STD_LOGIC := '1';
	signal PS_GATE_REAL_TIME_CLOCK: STD_LOGIC := '0';
	signal SWITCH_ROT_M_RTC_023_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_M_RTC_578_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_MRTC_01234_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_MRTC_56789_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_01234_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_56789_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_012_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";

	-- Outputs

	signal MS_REAL_TIME_CLOCK_DIGIT_BUS: STD_LOGIC_VECTOR (9 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

procedure checkRTCReg(
       testName: string;
       test: string;
       testVal: STD_LOGIC_VECTOR(9 downto 0);
       reg: STD_LOGIC_VECTOR(9 downto 0)) is
       begin
       for i in 0 to 9 loop
          check1(reg(i),testVal(i),testName,test);
       end loop;
       end procedure;   
   
-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: RealTimeClock port map(
		FPGA_CLK => FPGA_CLK,
		MS_REAL_TIME_CLOCK_GATE_A => MS_REAL_TIME_CLOCK_GATE_A,
		MS_REAL_TIME_CLOCK_GATE_B => MS_REAL_TIME_CLOCK_GATE_B,
		MS_REAL_TIME_CLOCK_GATE_C => MS_REAL_TIME_CLOCK_GATE_C,
		MS_REAL_TIME_CLOCK_GATE_D => MS_REAL_TIME_CLOCK_GATE_D,
		PS_GATE_REAL_TIME_CLOCK => PS_GATE_REAL_TIME_CLOCK,
		SWITCH_ROT_M_RTC_023_CC => SWITCH_ROT_M_RTC_023_CC,
		SWITCH_ROT_M_RTC_578_CC => SWITCH_ROT_M_RTC_578_CC,
		SWITCH_ROT_MRTC_01234_CC => SWITCH_ROT_MRTC_01234_CC,
		SWITCH_ROT_MRTC_56789_CC => SWITCH_ROT_MRTC_56789_CC,
		SWITCH_ROT_HRTC_01234_CC => SWITCH_ROT_HRTC_01234_CC,
		SWITCH_ROT_HRTC_56789_CC => SWITCH_ROT_HRTC_56789_CC,
		SWITCH_ROT_HRTC_012_CC => SWITCH_ROT_HRTC_012_CC,
		MS_REAL_TIME_CLOCK_DIGIT_BUS => MS_REAL_TIME_CLOCK_DIGIT_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   
    
-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable switchVal: STD_LOGIC_VECTOR(12 downto 0);
   variable testVal: STD_LOGIC_VECTOR(9 downto 0);

   begin

   -- Your test bench code
   
   testName := "14.15.2%.1        ";
   
   wait for 30 ns;
   checkRTCReg(testName,"SA",MS_REAL_TIME_CLOCK_DIGIT_BUS,"1111111111");   
   
   MS_REAL_TIME_CLOCK_GATE_A <= '0';
   wait for 30 ns;
   checkRTCReg(testName,"SB",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");
   
   PS_GATE_REAL_TIME_CLOCK <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"SC",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");
   
   -- Try an actual value
   
   SWITCH_ROT_M_RTC_023_CC <= "0000000001000";    
   wait for 30 ns;
   checkRTCReg(testName,"1A",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000100");

   -- Turn off the gates one at a time to make sure they work
   
   PS_GATE_REAL_TIME_CLOCK <= '0';
   wait for 30 ns;
   checkRTCReg(testName,"1B",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");
   
   PS_GATE_REAL_TIME_CLOCK <= '0';
   MS_REAL_TIME_CLOCK_GATE_A <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"1C",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   PS_GATE_REAL_TIME_CLOCK <= '1';
   MS_REAL_TIME_CLOCK_GATE_A <= '0';
   wait for 30 ns;

   -- Then try each individual switch position on each portion of each switch
   -- Starting with the hundredths of an hour position (least significant digit)

   MS_REAL_TIME_CLOCK_GATE_A <= '0';
   
   SWITCH_ROT_M_RTC_023_CC <= "0000000000010";    
   wait for 30 ns;
   checkRTCReg(testName,"1D",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000001");
   
   SWITCH_ROT_M_RTC_023_CC <= "0000000010000";    
   wait for 30 ns;
   checkRTCReg(testName,"1E",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000001000");

   -- Switches 023 and 578 are really the same switch, so the following test
   -- is not realistic...
   
   SWITCH_ROT_M_RTC_578_CC <= "0000001000000";
   wait for 30 ns;
   checkRTCReg(testName,"2A",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000101000");
   
   SWITCH_ROT_M_RTC_023_CC <= "0000000000000";    
   SWITCH_ROT_M_RTC_578_CC <= "0000100000000";  
   wait for 30 ns;
   checkRTCReg(testName,"2B",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0010000000");

   SWITCH_ROT_M_RTC_578_CC <= "0001000000000";  
   wait for 30 ns;
   checkRTCReg(testName,"2C",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0100000000");      

   -- Turn off Gate A and it should not read any digits
   
   MS_REAL_TIME_CLOCK_GATE_A <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"2D",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");
   
   -- Second switch (tenths of an hour), positions 01234
   
   MS_REAL_TIME_CLOCK_GATE_B <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"3A",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   MS_REAL_TIME_CLOCK_GATE_B <= '0';
   
   switchVal := "0000000000010";
   testVal := "0000000001";
   
   for i in 0 to 4 loop
      SWITCH_ROT_MRTC_01234_CC <= switchVal;
      wait for 30 ns;
      checkRTCReg(testName,"3B " & INTEGER'IMAGE(i),MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT testVal);
      switchVal := switchVal(11 downto 0) & "0";    
      testVal := testVal(8 downto 0) & "0";
   end loop; 
   
   -- Again, these are really the same switch, so zero on the first one, and continue on
   -- with the second one of the pair, positions 56789, continuing on with the loop values.
   -- (Had I moved one of the pair over, I could have used the "extension" capability, 
   -- and made them a single switch - might do that later)
   
   SWITCH_ROT_MRTC_01234_CC <= "0000000000000";   

   for i in 5 to 9 loop
      SWITCH_ROT_MRTC_56789_CC <= switchVal;
      wait for 30 ns;
      checkRTCReg(testName,"3C " & INTEGER'IMAGE(i),MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT testVal);
      switchVal := switchVal(11 downto 0) & "0";    
      testVal := testVal(8 downto 0) & "0";
   end loop; 

   SWITCH_ROT_MRTC_01234_CC <= "0000000001000";
   MS_REAL_TIME_CLOCK_GATE_B <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"3D",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");
      
   -- Third switch (hours), positions 01234
   
   MS_REAL_TIME_CLOCK_GATE_C <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"4A",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   MS_REAL_TIME_CLOCK_GATE_C <= '0';
   
   switchVal := "0000000000010";
   testVal := "0000000001";
   
   for i in 0 to 4 loop
      SWITCH_ROT_HRTC_01234_CC <= switchVal;
      wait for 30 ns;
      checkRTCReg(testName,"4B " & INTEGER'IMAGE(i),MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT testVal);
      switchVal := switchVal(11 downto 0) & "0";    
      testVal := testVal(8 downto 0) & "0";
   end loop; 
   
   -- Again, these are really the same switch, so zero on the first one, and continue on
   -- with the second one of the pair, positions 56789, continuing on with the loop values.
   
   SWITCH_ROT_HRTC_01234_CC <= "0000000000000";   

   for i in 5 to 9 loop
      SWITCH_ROT_HRTC_56789_CC <= switchVal;
      wait for 30 ns;
      checkRTCReg(testName,"4C " & INTEGER'IMAGE(i),MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT testVal);
      switchVal := switchVal(11 downto 0) & "0";    
      testVal := testVal(8 downto 0) & "0";
   end loop; 

   SWITCH_ROT_HRTC_01234_CC <= "0000000001000";
   MS_REAL_TIME_CLOCK_GATE_C <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"4D",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   -- Fourth switch (tens of hours), positions 012
   
   MS_REAL_TIME_CLOCK_GATE_D <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"5A",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   MS_REAL_TIME_CLOCK_GATE_D <= '0';
   
   switchVal := "0000000000010";
   testVal := "0000000001";
   
   for i in 0 to 2 loop
      SWITCH_ROT_HRTC_012_CC <= switchVal;
      wait for 30 ns;
      checkRTCReg(testName,"5B " & INTEGER'IMAGE(i),MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT testVal);
      switchVal := switchVal(11 downto 0) & "0";    
      testVal := testVal(8 downto 0) & "0";
   end loop; 

   MS_REAL_TIME_CLOCK_GATE_D <= '1';
   wait for 30 ns;
   checkRTCReg(testName,"5C",MS_REAL_TIME_CLOCK_DIGIT_BUS,NOT "0000000000");

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
