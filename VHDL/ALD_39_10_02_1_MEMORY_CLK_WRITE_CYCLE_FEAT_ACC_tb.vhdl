-- Test Bench VHDL for IBM SMS ALD page 39.10.02.1
-- Title: MEMORY CLK WRITE CYCLE FEAT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/21/2020 4:09:40 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC_tb is
end ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC_tb;

architecture behavioral of ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_COMPUTER_RESET_2:	 in STD_LOGIC;
		MY_START_MEM_CLOCK:	 in STD_LOGIC;
		MY_WRITE_CALL_M:	 in STD_LOGIC;
		MY_MEM_AR_TTHP4B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TTHP4B:	 in STD_LOGIC;
		MY_Z_PULSE:	 out STD_LOGIC;
		MY_Y_WR_1:	 out STD_LOGIC;
		MY_Y_WR_2:	 out STD_LOGIC;
		MY_X_WR_1:	 out STD_LOGIC;
		PY_START_WRITE:	 out STD_LOGIC;
		MY_X_WR_2:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_COMPUTER_RESET_2: STD_LOGIC := '1';
	signal MY_START_MEM_CLOCK: STD_LOGIC := '1';
	signal MY_WRITE_CALL_M: STD_LOGIC := '1';
	signal MY_MEM_AR_TTHP4B: STD_LOGIC := '1';
	signal MY_MEM_AR_NOT_TTHP4B: STD_LOGIC := '1';

	-- Outputs

	signal MY_Z_PULSE: STD_LOGIC;
	signal MY_Y_WR_1: STD_LOGIC;
	signal MY_Y_WR_2: STD_LOGIC;
	signal MY_X_WR_1: STD_LOGIC;
	signal PY_START_WRITE: STD_LOGIC;
	signal MY_X_WR_2: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_COMPUTER_RESET_2 => MS_COMPUTER_RESET_2,
		MY_START_MEM_CLOCK => MY_START_MEM_CLOCK,
		MY_WRITE_CALL_M => MY_WRITE_CALL_M,
		MY_MEM_AR_TTHP4B => MY_MEM_AR_TTHP4B,
		MY_MEM_AR_NOT_TTHP4B => MY_MEM_AR_NOT_TTHP4B,
		MY_Z_PULSE => MY_Z_PULSE,
		MY_Y_WR_1 => MY_Y_WR_1,
		MY_Y_WR_2 => MY_Y_WR_2,
		MY_X_WR_1 => MY_X_WR_1,
		PY_START_WRITE => PY_START_WRITE,
		MY_X_WR_2 => MY_X_WR_2);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "39.10.02.1        ";

   for tt in 0 to 2**3 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      
      -- Reset
      
      MS_COMPUTER_RESET_2 <= '0';
      wait for 30 ns;
      MS_COMPUTER_RESET_2 <= '1';
      wait for 30 ns;

      check1(PY_START_WRITE,'0',testName,"Loop Reset Start Write");
      check1(MY_Z_PULSE,'1',testName,"Loop Reset Z Pulse");
      check1(MY_Y_WR_1,'1',testName,"Loop Reset Y Write 1");
      check1(MY_Y_WR_2,'1',testName,"Loop Reset Y Write 2");
      check1(MY_X_WR_1,'1',testName,"Loop Reset X Write 1");
      check1(MY_X_WR_2,'1',testName,"Loop Reset X Write 2");
      
      MY_START_MEM_CLOCK <= not a;
      MY_WRITE_CALL_M <= not b;
      MY_MEM_AR_TTHP4B <= not c;
      MY_MEM_AR_NOT_TTHP4B <= c;
      wait for 90 ns; -- Trigger delay
      MY_WRITE_CALL_M <= '1'; -- Reset for Next Iteration
      
      -- The write cycle starts off with a whimper - this signal
      -- is only for the 60K  - 100K Z Frame...
      
      check1(PY_START_WRITE,a and b and c,testName,"Start Write");
      
      if(not(a = '1' and b = '1' and c = '0')) then
         next; -- If we didn't start the process for 0-40K, no point in continuing this iteration
      end if;
      
      wait for 150 ns; -- First Delay
      wait for 90 ns;  -- Trigger Delay

      check1(MY_Z_PULSE,'0',testName,"Cycle Step 1 Z Pulse");
      check1(MY_Y_WR_1,'0',testName,"Cycle Step 1 Y Write 1");
      check1(MY_Y_WR_2,'0',testName,"Cycle Step 1 Y Write 2");
      check1(MY_X_WR_1,'1',testName,"Cycle Step 1 X Write 1");
      check1(MY_X_WR_2,'1',testName,"Cycle Step 1 X Write 2");
           
      wait for 280 ns; -- Second Delay
      wait for 90 ns;  -- Trigger Delay 
      
      check1(MY_Z_PULSE,'0',testName,"Cycle Step 2 Z Pulse");
      check1(MY_Y_WR_1,'0',testName,"Cycle Step 2 Y Write 1");
      check1(MY_Y_WR_2,'0',testName,"Cycle Step 2 Y Write 2");
      check1(MY_X_WR_1,'0',testName,"Cycle Step 2 X Write 1");
      check1(MY_X_WR_2,'0',testName,"Cycle Step 2 X Write 2");
      
      wait for 1200 ns; -- Final delay
      wait for 90 ns;
      
      check1(MY_Z_PULSE,'1',testName,"End Z Pulse");
      check1(MY_Y_WR_1,'1',testName,"End Y Write 1");
      check1(MY_Y_WR_2,'1',testName,"End Y Write 2");
      check1(MY_X_WR_1,'1',testName,"End X Write 1");
      check1(MY_X_WR_2,'1',testName,"End X Write 2");            
      
      wait for 30 ns;
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
