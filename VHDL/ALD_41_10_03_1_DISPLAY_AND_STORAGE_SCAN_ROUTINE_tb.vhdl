-- Test Bench VHDL for IBM SMS ALD page 41.10.03.1
-- Title: DISPLAY AND STORAGE SCAN ROUTINE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/24/2020 11:11:09 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_41_10_03_1_DISPLAY_AND_STORAGE_SCAN_ROUTINE_tb is
end ALD_41_10_03_1_DISPLAY_AND_STORAGE_SCAN_ROUTINE_tb;

architecture behavioral of ALD_41_10_03_1_DISPLAY_AND_STORAGE_SCAN_ROUTINE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_41_10_03_1_DISPLAY_AND_STORAGE_SCAN_ROUTINE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_CONS_MX_Y6_POS:	 in STD_LOGIC;
		MS_CONS_MX_31_POS:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		PS_CONS_PRINTER_NOT_BUSY:	 in STD_LOGIC;
		PS_STOP_KEY_LATCH:	 in STD_LOGIC;
		MV_CONS_MODE_SW_DISPLAY_MODE:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		PS_CONSOLE_ROUTINE_START:	 in STD_LOGIC;
		PS_CLOCK_STOPPED:	 in STD_LOGIC;
		MV_STORAGE_SCAN_MODE_1:	 in STD_LOGIC;
		MS_DISPLAY_OR_ALTER:	 in STD_LOGIC;
		PS_DISPLAY_ROUTINE_1:	 out STD_LOGIC;
		MS_RESET_DISPLAY_ROUTINE:	 out STD_LOGIC;
		PS_DISPLAY_ROUTINE_2:	 out STD_LOGIC;
		MS_DISPLAY_ROUTINE:	 out STD_LOGIC;
		PS_STORAGE_SCAN_ROUTINE:	 out STD_LOGIC;
		MS_STORAGE_SCAN_ROUTINE:	 out STD_LOGIC;
		MY_WRAP_AROUND_MODE:	 out STD_LOGIC;
		MS_STORAGE_SCAN_MODE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_CONS_MX_Y6_POS: STD_LOGIC := '1';
	signal MS_CONS_MX_31_POS: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';
	signal PS_CONS_PRINTER_NOT_BUSY: STD_LOGIC := '0';
	signal PS_STOP_KEY_LATCH: STD_LOGIC := '0';
	signal MV_CONS_MODE_SW_DISPLAY_MODE: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal PS_CONSOLE_ROUTINE_START: STD_LOGIC := '0';
	signal PS_CLOCK_STOPPED: STD_LOGIC := '0';
	signal MV_STORAGE_SCAN_MODE_1: STD_LOGIC := '1';
	signal MS_DISPLAY_OR_ALTER: STD_LOGIC := '1';

	-- Outputs

	signal PS_DISPLAY_ROUTINE_1: STD_LOGIC;
	signal MS_RESET_DISPLAY_ROUTINE: STD_LOGIC;
	signal PS_DISPLAY_ROUTINE_2: STD_LOGIC;
	signal MS_DISPLAY_ROUTINE: STD_LOGIC;
	signal PS_STORAGE_SCAN_ROUTINE: STD_LOGIC;
	signal MS_STORAGE_SCAN_ROUTINE: STD_LOGIC;
	signal MY_WRAP_AROUND_MODE: STD_LOGIC;
	signal MS_STORAGE_SCAN_MODE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_41_10_03_1_DISPLAY_AND_STORAGE_SCAN_ROUTINE port map(
		FPGA_CLK => FPGA_CLK,
		MS_CONS_MX_Y6_POS => MS_CONS_MX_Y6_POS,
		MS_CONS_MX_31_POS => MS_CONS_MX_31_POS,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		PS_CONS_PRINTER_NOT_BUSY => PS_CONS_PRINTER_NOT_BUSY,
		PS_STOP_KEY_LATCH => PS_STOP_KEY_LATCH,
		MV_CONS_MODE_SW_DISPLAY_MODE => MV_CONS_MODE_SW_DISPLAY_MODE,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		PS_CONSOLE_ROUTINE_START => PS_CONSOLE_ROUTINE_START,
		PS_CLOCK_STOPPED => PS_CLOCK_STOPPED,
		MV_STORAGE_SCAN_MODE_1 => MV_STORAGE_SCAN_MODE_1,
		MS_DISPLAY_OR_ALTER => MS_DISPLAY_OR_ALTER,
		PS_DISPLAY_ROUTINE_1 => PS_DISPLAY_ROUTINE_1,
		MS_RESET_DISPLAY_ROUTINE => MS_RESET_DISPLAY_ROUTINE,
		PS_DISPLAY_ROUTINE_2 => PS_DISPLAY_ROUTINE_2,
		MS_DISPLAY_ROUTINE => MS_DISPLAY_ROUTINE,
		PS_STORAGE_SCAN_ROUTINE => PS_STORAGE_SCAN_ROUTINE,
		MS_STORAGE_SCAN_ROUTINE => MS_STORAGE_SCAN_ROUTINE,
		MY_WRAP_AROUND_MODE => MY_WRAP_AROUND_MODE,
		MS_STORAGE_SCAN_MODE => MS_STORAGE_SCAN_MODE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "41.10.03.1        "; 

   for tt in 0 to 2**10 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      l := tv(9);

      -- Reset the latches
      
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
      
      check1(PS_DISPLAY_ROUTINE_1,'0',testName,"+S Display Routine 1 Loop Reset");
      check1(PS_DISPLAY_ROUTINE_2,'0',testName,"+S Display Routine 2 Loop Reset");
      check1(MS_DISPLAY_ROUTINE,'1',testName,"-S Display Routine Loop Reset");
      check1(PS_STORAGE_SCAN_ROUTINE,'0',testName,"+S Storage Scan Routine Loop Reset");
      check1(MS_STORAGE_SCAN_ROUTINE,'1',testName,"-S Storage Scan Routine Loop Reset");

      -- Maybe set a latch or two...

      MV_CONS_MODE_SW_DISPLAY_MODE <= not f;
      PS_CONSOLE_ROUTINE_START <= h;
      MV_STORAGE_SCAN_MODE_1 <= not k;
      MS_DISPLAY_OR_ALTER <= not l;
      wait for 30 ns; -- Maybe set latches
      
      check1(MS_STORAGE_SCAN_MODE,not k,testName,"Storage Scan Mode");
      check1(PS_DISPLAY_ROUTINE_1,h and f,testName,"+S Display Routine 1");
      check1(PS_DISPLAY_ROUTINE_2,PS_DISPLAY_ROUTINE_1,testName,"+S Display Routine 2");
      check1(MS_DISPLAY_ROUTINE,NOT PS_DISPLAY_ROUTINE_1,testName,"-S Display Routine");
      check1(PS_STORAGE_SCAN_ROUTINE,h and k,testName,"+S Storage Scan Routine");
      check1(MS_STORAGE_SCAN_ROUTINE,not PS_STORAGE_SCAN_ROUTINE,testName,"-S Storage Scan Routine");
      check1(MY_WRAP_AROUND_MODE,not((h and k) or l),testName,"Wrap Around Mode");

      -- Now, pull off the set signals and give the resets their turn      

      MV_CONS_MODE_SW_DISPLAY_MODE <= '1';
      PS_CONSOLE_ROUTINE_START <= '0';
      MV_STORAGE_SCAN_MODE_1 <= '1';
      MS_DISPLAY_OR_ALTER <= '1';
      wait for 30 ns;
      
      MS_CONS_MX_Y6_POS <= not a;
      MS_CONS_MX_31_POS <= not b;
      PS_CONS_CLOCK_1_POS <= c;
      PS_CONS_PRINTER_NOT_BUSY <= d;
      PS_STOP_KEY_LATCH <= e;
      PS_CLOCK_STOPPED <= j;      
      wait for 30 ns;
      
      check1(PS_DISPLAY_ROUTINE_1,h and f and not(not a and not b and c and d and e),testName,
         "Reset +S Display Routine 1");
      check1(PS_DISPLAY_ROUTINE_2,PS_DISPLAY_ROUTINE_1,testName,"Reset +S Display Routine 2");
      check1(MS_DISPLAY_ROUTINE,NOT PS_DISPLAY_ROUTINE_1,testName,"Reset -S Display Routine");
      check1(PS_STORAGE_SCAN_ROUTINE,h and k and not(j and e),testName,
         "Reset +S Storage Scan Routine");
      check1(MS_STORAGE_SCAN_ROUTINE,not PS_STORAGE_SCAN_ROUTINE,testName,
         "Reset-S Storage Scan Routine");
                  
      -- Reset the signals.                  

      MS_CONS_MX_Y6_POS <= '1';
      MS_CONS_MX_31_POS <= '1';
      PS_CONS_CLOCK_1_POS <= '0';
      PS_CONS_PRINTER_NOT_BUSY <= '0';
      PS_STOP_KEY_LATCH <= '0';
      PS_CLOCK_STOPPED <= '0';      
                  
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
