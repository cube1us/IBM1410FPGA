-- VHDL for IBM SMS ALD page 31.10.01.1
-- Title: X LSMS DRVR ECDR 1-5 FEAT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/16/2020 9:37:38 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_31_10_01_1_X_LSMS_DRVR_ECDR_1_5_FEAT_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_MEM_AR_UP8B:	 in STD_LOGIC;
		MY_MEM_AR_UP4B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_UP8B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_UP4B:	 in STD_LOGIC;
		MY_X_WR_1:	 in STD_LOGIC;
		MY_MEM_AR_UP2B:	 in STD_LOGIC;
		MY_MEM_AR_UP1B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_UP2B:	 in STD_LOGIC;
		MY_X_RD_1:	 in STD_LOGIC;
		MY_MEM_AR_NOT_UP1B:	 in STD_LOGIC;
		MY_MEM_AR_UP0B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_UP0B:	 in STD_LOGIC;
		PY_X_LSMS_DRVR_1:	 out STD_LOGIC;
		PY_X_LSMS_DRVR_2:	 out STD_LOGIC;
		PY_X_LSMS_DRVR_3:	 out STD_LOGIC;
		PY_X_LSMS_DRVR_4:	 out STD_LOGIC;
		PY_X_LSMS_DRVR_5:	 out STD_LOGIC);
end ALD_31_10_01_1_X_LSMS_DRVR_ECDR_1_5_FEAT_ACC;

architecture behavioral of ALD_31_10_01_1_X_LSMS_DRVR_ECDR_1_5_FEAT_ACC is 

	signal OUT_4A_G: STD_LOGIC;
	signal OUT_4B_C: STD_LOGIC;
	signal OUT_2B_G: STD_LOGIC;
	signal OUT_2C_C: STD_LOGIC;
	signal OUT_4D_F: STD_LOGIC;
	signal OUT_4E_R: STD_LOGIC;
	signal OUT_2E_G: STD_LOGIC;
	signal OUT_2F_C: STD_LOGIC;
	signal OUT_4G_F: STD_LOGIC;
	signal OUT_4H_R: STD_LOGIC;
	signal OUT_DOT_1B: STD_LOGIC;
	signal OUT_DOT_4D: STD_LOGIC;
	signal OUT_DOT_1E: STD_LOGIC;
	signal OUT_DOT_1G: STD_LOGIC;
	signal OUT_DOT_4A: STD_LOGIC;

begin

	OUT_4A_G <= NOT(MY_MEM_AR_UP8B OR MY_X_WR_1 );
	OUT_4B_C <= NOT(MY_MEM_AR_NOT_UP8B OR MY_X_RD_1 );
	OUT_2B_G <= NOT(MY_MEM_AR_UP4B OR MY_X_WR_1 );
	OUT_2C_C <= NOT(MY_MEM_AR_NOT_UP4B OR MY_X_RD_1 );
	OUT_4D_F <= NOT(MY_MEM_AR_UP2B OR MY_X_WR_1 );
	OUT_4E_R <= NOT(MY_X_RD_1 OR MY_MEM_AR_NOT_UP2B );
	OUT_2E_G <= NOT(MY_MEM_AR_UP1B OR MY_X_WR_1 );
	OUT_2F_C <= NOT(MY_MEM_AR_NOT_UP1B OR MY_X_RD_1 );
	OUT_4G_F <= NOT(MY_MEM_AR_UP0B OR MY_X_WR_1 );
	OUT_4H_R <= NOT(MY_X_RD_1 OR MY_MEM_AR_NOT_UP0B );
	OUT_DOT_1B <= OUT_2C_C OR OUT_2B_G;
	OUT_DOT_4D <= OUT_4D_F OR OUT_4E_R;
	OUT_DOT_1E <= OUT_2E_G OR OUT_2F_C;
	OUT_DOT_1G <= OUT_4G_F OR OUT_4H_R;
	OUT_DOT_4A <= OUT_4A_G OR OUT_4B_C;

	PY_X_LSMS_DRVR_2 <= OUT_DOT_1B;
	PY_X_LSMS_DRVR_3 <= OUT_DOT_4D;
	PY_X_LSMS_DRVR_4 <= OUT_DOT_1E;
	PY_X_LSMS_DRVR_5 <= OUT_DOT_1G;
	PY_X_LSMS_DRVR_1 <= OUT_DOT_4A;


end;
