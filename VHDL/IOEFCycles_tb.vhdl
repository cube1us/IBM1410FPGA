-- Test BenchVHDL for IBM SMS ALD group IOEFCycles
-- Title: IOEFCycles
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 6/29/2020 2:11:23 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity IOEFCycles_tb is
end IOEFCycles_tb;

architecture behavioral of IOEFCycles_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component IOEFCycles
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_M_OR_L_OP_CODES: in STD_LOGIC;
		PS_E_CH_FORMS_CTRL_OP_CODE: in STD_LOGIC;
		PS_1401_MODE: in STD_LOGIC;
		PS_I_O_PERCENT_OR_LOZENGE: in STD_LOGIC;
		PS_FORMS_OR_1403_PRT_BUFF_BUSY: in STD_LOGIC;
		MS_FORMS_STACKER_GO: in STD_LOGIC;
		MS_F_CH_TAPE_CALL: in STD_LOGIC;
		MS_1401_CARD_PRINT_IN_PROC: in STD_LOGIC;
		MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR: in STD_LOGIC;
		PS_E_CH_IN_PROCESS: in STD_LOGIC;
		PS_BRANCH_ON_STATUS_CH_1: in STD_LOGIC;
		MS_E_CH_IN_PROCESS: in STD_LOGIC;
		MS_F_CH_IN_PROCESS: in STD_LOGIC;
		PS_SPECIAL_STOP_LATCH: in STD_LOGIC;
		MS_E_CH_OVLP_IN_PROCESS: in STD_LOGIC;
		MS_F_CH_OVLP_IN_PROCESS: in STD_LOGIC;
		MS_E_CH_UNOVLP_IN_PROCESS: in STD_LOGIC;
		MS_E_CH_TAPE_CALL: in STD_LOGIC;
		PS_E_CH_BUSY_BUS: in STD_LOGIC;
		MS_UNIT_CONTROL_INST_RO_DELAY: in STD_LOGIC;
		PS_FILE_OP: in STD_LOGIC;
		MS_E_CH_DIGIT_ADVANCE: in STD_LOGIC;
		PS_E_CH_SELECT_TAPE_DATA: in STD_LOGIC;
		PS_PERCENT_TYPE_OP_CODES: in STD_LOGIC;
		MS_1401_UNIT_CTRL_DELAY: in STD_LOGIC;
		MS_E2_REG_FULL: in STD_LOGIC;
		MS_1401_M_OR_L_TAPE_DELAY: in STD_LOGIC;
		PS_COMP_DISABLE_CYCLE_STAR_1412_19: in STD_LOGIC;
		PS_COMP_DISABLE_CYCLE_JRJ: in STD_LOGIC;
		MS_E_CH_INT_END_OF_XFER_DELAYED: in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE: in STD_LOGIC;
		PS_E_CH_OVLP_IN_PROCESS: in STD_LOGIC;
		PS_E1_REG_FULL: in STD_LOGIC;
		PS_E_CH_INPUT_MODE: in STD_LOGIC;
		MS_COMP_DISABLE_CYCLE_STAR_FILE_F_CH: in STD_LOGIC;
		PS_E_CH_2ND_ADDR_TRF: in STD_LOGIC;
		PS_Q_OR_V_SYMBOL_OP_MODIFIER: in STD_LOGIC;
		MS_COMP_DSBLE_E_CH: in STD_LOGIC;
		PS_ANY_LAST_GATE: in STD_LOGIC;
		MS_E_CH_INT_END_OF_TRANSFER: in STD_LOGIC;
		MS_E1_REG_FULL: in STD_LOGIC;
		PS_E2_REG_FULL: in STD_LOGIC;
		MS_E1_REG_WORD_SEPARATOR: in STD_LOGIC;
		PS_E_CH_EXT_END_OF_TRANSFER: in STD_LOGIC;
		PS_F_CH_OUTPUT_MODE: in STD_LOGIC;
		MS_F2_REG_FULL: in STD_LOGIC;
		PS_F_CH_IN_PROCESS: in STD_LOGIC;
		MS_F_CH_INT_END_OF_TRANSFER: in STD_LOGIC;
		MS_F1_REG_WORD_SEPARATOR: in STD_LOGIC;
		PS_F_CH_INPUT_MODE: in STD_LOGIC;
		PS_F1_REG_FULL: in STD_LOGIC;
		PS_F_CH_EXT_END_OF_TRANSFER: in STD_LOGIC;
		MS_F1_REG_FULL: in STD_LOGIC;
		PS_F2_REG_FULL: in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2: in STD_LOGIC;
		PS_LOGIC_GATE_Z: in STD_LOGIC;
		PS_LOGIC_GATE_B_OR_S: in STD_LOGIC;
		MS_LOGIC_GATE_D_OR_U: in STD_LOGIC;
		MS_PROGRAM_RESET_2: in STD_LOGIC;
		MS_F_CH_FILE_OP: in STD_LOGIC;
		PS_FILE_OP_DLY_EXTENSION: in STD_LOGIC;
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		PS_COMP_DISABLE_CYCLE: out STD_LOGIC;
		MS_E_CYCLE_DOT_ANY_LAST_GATE: out STD_LOGIC;
		PS_E_CYCLE_REQUIRED: out STD_LOGIC;
		MS_E_CYCLE_REQUIRED: out STD_LOGIC;
		MS_F_CYCLE_DOT_ANY_LAST_GATE: out STD_LOGIC;
		PS_F_CYCLE_REQUIRED: out STD_LOGIC;
		MS_F_CYCLE_REQUIRED: out STD_LOGIC;
		MS_E_CYCLE_CTRL: out STD_LOGIC;
		MS_E_CYCLE: out STD_LOGIC;
		PS_E_CYCLE_CTRL: out STD_LOGIC;
		PS_E_CYCLE: out STD_LOGIC;
		PS_OVERLAPPED_CYCLE_CTRL: out STD_LOGIC;
		PS_E_CYCLE_CTRL_STAR_1311: out STD_LOGIC;
		MS_F_CYCLE_CTRL: out STD_LOGIC;
		MS_F_CYCLE: out STD_LOGIC;
		PS_F_CYCLE_CTRL: out STD_LOGIC;
		PS_F_CYCLE: out STD_LOGIC;
		LAMP_15A1E10: out STD_LOGIC;
		LAMP_11C8E15: out STD_LOGIC;
		LAMP_15A1F10: out STD_LOGIC;
		LAMP_11C8F15: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_M_OR_L_OP_CODES: STD_LOGIC := '0';
	signal PS_E_CH_FORMS_CTRL_OP_CODE: STD_LOGIC := '0';
	signal PS_1401_MODE: STD_LOGIC := '0';
	signal PS_I_O_PERCENT_OR_LOZENGE: STD_LOGIC := '0';
	signal PS_FORMS_OR_1403_PRT_BUFF_BUSY: STD_LOGIC := '0';
	signal MS_FORMS_STACKER_GO: STD_LOGIC := '1';
	signal MS_F_CH_TAPE_CALL: STD_LOGIC := '1';
	signal MS_1401_CARD_PRINT_IN_PROC: STD_LOGIC := '1';
	signal MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_E_CH_IN_PROCESS: STD_LOGIC := '0';
	signal PS_BRANCH_ON_STATUS_CH_1: STD_LOGIC := '0';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal MS_F_CH_IN_PROCESS: STD_LOGIC := '1';
	signal PS_SPECIAL_STOP_LATCH: STD_LOGIC := '0';
	signal MS_E_CH_OVLP_IN_PROCESS: STD_LOGIC := '1';
	signal MS_F_CH_OVLP_IN_PROCESS: STD_LOGIC := '1';
	signal MS_E_CH_UNOVLP_IN_PROCESS: STD_LOGIC := '1';
	signal MS_E_CH_TAPE_CALL: STD_LOGIC := '1';
	signal PS_E_CH_BUSY_BUS: STD_LOGIC := '0';
	signal MS_UNIT_CONTROL_INST_RO_DELAY: STD_LOGIC := '1';
	signal PS_FILE_OP: STD_LOGIC := '0';
	signal MS_E_CH_DIGIT_ADVANCE: STD_LOGIC := '1';
	signal PS_E_CH_SELECT_TAPE_DATA: STD_LOGIC := '0';
	signal PS_PERCENT_TYPE_OP_CODES: STD_LOGIC := '0';
	signal MS_1401_UNIT_CTRL_DELAY: STD_LOGIC := '1';
	signal MS_E2_REG_FULL: STD_LOGIC := '1';
	signal MS_1401_M_OR_L_TAPE_DELAY: STD_LOGIC := '1';
	signal PS_COMP_DISABLE_CYCLE_STAR_1412_19: STD_LOGIC := '0';
	signal PS_COMP_DISABLE_CYCLE_JRJ: STD_LOGIC := '0';
	signal MS_E_CH_INT_END_OF_XFER_DELAYED: STD_LOGIC := '1';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_E_CH_OVLP_IN_PROCESS: STD_LOGIC := '0';
	signal PS_E1_REG_FULL: STD_LOGIC := '0';
	signal PS_E_CH_INPUT_MODE: STD_LOGIC := '0';
	signal MS_COMP_DISABLE_CYCLE_STAR_FILE_F_CH: STD_LOGIC := '1';
	signal PS_E_CH_2ND_ADDR_TRF: STD_LOGIC := '0';
	signal PS_Q_OR_V_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal MS_COMP_DSBLE_E_CH: STD_LOGIC := '1';
	signal PS_ANY_LAST_GATE: STD_LOGIC := '0';
	signal MS_E_CH_INT_END_OF_TRANSFER: STD_LOGIC := '1';
	signal MS_E1_REG_FULL: STD_LOGIC := '1';
	signal PS_E2_REG_FULL: STD_LOGIC := '0';
	signal MS_E1_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_E_CH_EXT_END_OF_TRANSFER: STD_LOGIC := '0';
	signal PS_F_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal MS_F2_REG_FULL: STD_LOGIC := '1';
	signal PS_F_CH_IN_PROCESS: STD_LOGIC := '0';
	signal MS_F_CH_INT_END_OF_TRANSFER: STD_LOGIC := '1';
	signal MS_F1_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_F_CH_INPUT_MODE: STD_LOGIC := '0';
	signal PS_F1_REG_FULL: STD_LOGIC := '0';
	signal PS_F_CH_EXT_END_OF_TRANSFER: STD_LOGIC := '0';
	signal MS_F1_REG_FULL: STD_LOGIC := '1';
	signal PS_F2_REG_FULL: STD_LOGIC := '0';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_Z: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_B_OR_S: STD_LOGIC := '0';
	signal MS_LOGIC_GATE_D_OR_U: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_2: STD_LOGIC := '1';
	signal MS_F_CH_FILE_OP: STD_LOGIC := '1';
	signal PS_FILE_OP_DLY_EXTENSION: STD_LOGIC := '0';
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";

	-- Outputs

	signal PS_COMP_DISABLE_CYCLE: STD_LOGIC;
	signal MS_E_CYCLE_DOT_ANY_LAST_GATE: STD_LOGIC;
	signal PS_E_CYCLE_REQUIRED: STD_LOGIC;
	signal MS_E_CYCLE_REQUIRED: STD_LOGIC;
	signal MS_F_CYCLE_DOT_ANY_LAST_GATE: STD_LOGIC;
	signal PS_F_CYCLE_REQUIRED: STD_LOGIC;
	signal MS_F_CYCLE_REQUIRED: STD_LOGIC;
	signal MS_E_CYCLE_CTRL: STD_LOGIC;
	signal MS_E_CYCLE: STD_LOGIC;
	signal PS_E_CYCLE_CTRL: STD_LOGIC;
	signal PS_E_CYCLE: STD_LOGIC;
	signal PS_OVERLAPPED_CYCLE_CTRL: STD_LOGIC;
	signal PS_E_CYCLE_CTRL_STAR_1311: STD_LOGIC;
	signal MS_F_CYCLE_CTRL: STD_LOGIC;
	signal MS_F_CYCLE: STD_LOGIC;
	signal PS_F_CYCLE_CTRL: STD_LOGIC;
	signal PS_F_CYCLE: STD_LOGIC;
	signal LAMP_15A1E10: STD_LOGIC;
	signal LAMP_11C8E15: STD_LOGIC;
	signal LAMP_15A1F10: STD_LOGIC;
	signal LAMP_11C8F15: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: IOEFCycles port map(
		FPGA_CLK => FPGA_CLK,
		PS_M_OR_L_OP_CODES => PS_M_OR_L_OP_CODES,
		PS_E_CH_FORMS_CTRL_OP_CODE => PS_E_CH_FORMS_CTRL_OP_CODE,
		PS_1401_MODE => PS_1401_MODE,
		PS_I_O_PERCENT_OR_LOZENGE => PS_I_O_PERCENT_OR_LOZENGE,
		PS_FORMS_OR_1403_PRT_BUFF_BUSY => PS_FORMS_OR_1403_PRT_BUFF_BUSY,
		MS_FORMS_STACKER_GO => MS_FORMS_STACKER_GO,
		MS_F_CH_TAPE_CALL => MS_F_CH_TAPE_CALL,
		MS_1401_CARD_PRINT_IN_PROC => MS_1401_CARD_PRINT_IN_PROC,
		MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR => MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR,
		PS_E_CH_IN_PROCESS => PS_E_CH_IN_PROCESS,
		PS_BRANCH_ON_STATUS_CH_1 => PS_BRANCH_ON_STATUS_CH_1,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		MS_F_CH_IN_PROCESS => MS_F_CH_IN_PROCESS,
		PS_SPECIAL_STOP_LATCH => PS_SPECIAL_STOP_LATCH,
		MS_E_CH_OVLP_IN_PROCESS => MS_E_CH_OVLP_IN_PROCESS,
		MS_F_CH_OVLP_IN_PROCESS => MS_F_CH_OVLP_IN_PROCESS,
		MS_E_CH_UNOVLP_IN_PROCESS => MS_E_CH_UNOVLP_IN_PROCESS,
		MS_E_CH_TAPE_CALL => MS_E_CH_TAPE_CALL,
		PS_E_CH_BUSY_BUS => PS_E_CH_BUSY_BUS,
		MS_UNIT_CONTROL_INST_RO_DELAY => MS_UNIT_CONTROL_INST_RO_DELAY,
		PS_FILE_OP => PS_FILE_OP,
		MS_E_CH_DIGIT_ADVANCE => MS_E_CH_DIGIT_ADVANCE,
		PS_E_CH_SELECT_TAPE_DATA => PS_E_CH_SELECT_TAPE_DATA,
		PS_PERCENT_TYPE_OP_CODES => PS_PERCENT_TYPE_OP_CODES,
		MS_1401_UNIT_CTRL_DELAY => MS_1401_UNIT_CTRL_DELAY,
		MS_E2_REG_FULL => MS_E2_REG_FULL,
		MS_1401_M_OR_L_TAPE_DELAY => MS_1401_M_OR_L_TAPE_DELAY,
		PS_COMP_DISABLE_CYCLE_STAR_1412_19 => PS_COMP_DISABLE_CYCLE_STAR_1412_19,
		PS_COMP_DISABLE_CYCLE_JRJ => PS_COMP_DISABLE_CYCLE_JRJ,
		MS_E_CH_INT_END_OF_XFER_DELAYED => MS_E_CH_INT_END_OF_XFER_DELAYED,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_E_CH_OVLP_IN_PROCESS => PS_E_CH_OVLP_IN_PROCESS,
		PS_E1_REG_FULL => PS_E1_REG_FULL,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		MS_COMP_DISABLE_CYCLE_STAR_FILE_F_CH => MS_COMP_DISABLE_CYCLE_STAR_FILE_F_CH,
		PS_E_CH_2ND_ADDR_TRF => PS_E_CH_2ND_ADDR_TRF,
		PS_Q_OR_V_SYMBOL_OP_MODIFIER => PS_Q_OR_V_SYMBOL_OP_MODIFIER,
		MS_COMP_DSBLE_E_CH => MS_COMP_DSBLE_E_CH,
		PS_ANY_LAST_GATE => PS_ANY_LAST_GATE,
		MS_E_CH_INT_END_OF_TRANSFER => MS_E_CH_INT_END_OF_TRANSFER,
		MS_E1_REG_FULL => MS_E1_REG_FULL,
		PS_E2_REG_FULL => PS_E2_REG_FULL,
		MS_E1_REG_WORD_SEPARATOR => MS_E1_REG_WORD_SEPARATOR,
		PS_E_CH_EXT_END_OF_TRANSFER => PS_E_CH_EXT_END_OF_TRANSFER,
		PS_F_CH_OUTPUT_MODE => PS_F_CH_OUTPUT_MODE,
		MS_F2_REG_FULL => MS_F2_REG_FULL,
		PS_F_CH_IN_PROCESS => PS_F_CH_IN_PROCESS,
		MS_F_CH_INT_END_OF_TRANSFER => MS_F_CH_INT_END_OF_TRANSFER,
		MS_F1_REG_WORD_SEPARATOR => MS_F1_REG_WORD_SEPARATOR,
		PS_F_CH_INPUT_MODE => PS_F_CH_INPUT_MODE,
		PS_F1_REG_FULL => PS_F1_REG_FULL,
		PS_F_CH_EXT_END_OF_TRANSFER => PS_F_CH_EXT_END_OF_TRANSFER,
		MS_F1_REG_FULL => MS_F1_REG_FULL,
		PS_F2_REG_FULL => PS_F2_REG_FULL,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		PS_LOGIC_GATE_Z => PS_LOGIC_GATE_Z,
		PS_LOGIC_GATE_B_OR_S => PS_LOGIC_GATE_B_OR_S,
		MS_LOGIC_GATE_D_OR_U => MS_LOGIC_GATE_D_OR_U,
		MS_PROGRAM_RESET_2 => MS_PROGRAM_RESET_2,
		MS_F_CH_FILE_OP => MS_F_CH_FILE_OP,
		PS_FILE_OP_DLY_EXTENSION => PS_FILE_OP_DLY_EXTENSION,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		PS_COMP_DISABLE_CYCLE => PS_COMP_DISABLE_CYCLE,
		MS_E_CYCLE_DOT_ANY_LAST_GATE => MS_E_CYCLE_DOT_ANY_LAST_GATE,
		PS_E_CYCLE_REQUIRED => PS_E_CYCLE_REQUIRED,
		MS_E_CYCLE_REQUIRED => MS_E_CYCLE_REQUIRED,
		MS_F_CYCLE_DOT_ANY_LAST_GATE => MS_F_CYCLE_DOT_ANY_LAST_GATE,
		PS_F_CYCLE_REQUIRED => PS_F_CYCLE_REQUIRED,
		MS_F_CYCLE_REQUIRED => MS_F_CYCLE_REQUIRED,
		MS_E_CYCLE_CTRL => MS_E_CYCLE_CTRL,
		MS_E_CYCLE => MS_E_CYCLE,
		PS_E_CYCLE_CTRL => PS_E_CYCLE_CTRL,
		PS_E_CYCLE => PS_E_CYCLE,
		PS_OVERLAPPED_CYCLE_CTRL => PS_OVERLAPPED_CYCLE_CTRL,
		PS_E_CYCLE_CTRL_STAR_1311 => PS_E_CYCLE_CTRL_STAR_1311,
		MS_F_CYCLE_CTRL => MS_F_CYCLE_CTRL,
		MS_F_CYCLE => MS_F_CYCLE,
		PS_F_CYCLE_CTRL => PS_F_CYCLE_CTRL,
		PS_F_CYCLE => PS_F_CYCLE,
		LAMP_15A1E10 => LAMP_15A1E10,
		LAMP_11C8E15 => LAMP_11C8E15,
		LAMP_15A1F10 => LAMP_15A1F10,
		LAMP_11C8F15 => LAMP_11C8F15);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 10);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "Prog Reset";
   
   wait for 30 ns;
   MS_PROGRAM_RESET_2 <= '0';
   wait for 3 us;
   MS_PROGRAM_RESET_2 <= '1';
   wait for 30 ns;
   check1(PS_E_CYCLE,'0',testName,"START E");
   check1(PS_F_CYCLE,'0',testName,"START F");
   check1(MS_E_CYCLE_DOT_ANY_LAST_GATE,'1',testName,"START");
          
   -- Page 12.12.62.1
   
   testName := "12.12.62.1";

   -- Part 1

   check1(MS_E_CYCLE_DOT_ANY_LAST_GATE,'1',testName,"1S");   
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"1");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"1A");
   PS_E_CH_OUTPUT_MODE <= '1';
   MS_E1_REG_FULL <= '1'; -- NOT full
   MS_E_CH_INT_END_OF_TRANSFER <= '1';  -- NOT Int EOT
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"1B");   
   PS_E_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'1',testName,"1C");
   check1(MS_E_CYCLE_REQUIRED,'0',testName,"1D");
   PS_E_CH_OUTPUT_MODE <= '0';
      
   -- Part 2

   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"2");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"2A");
   check1(MS_E_CYCLE_DOT_ANY_LAST_GATE,'1',testName,"2S");
   PS_E_CH_INPUT_MODE <= '1';
   PS_E2_REG_FULL <= '1';
   MS_E_CH_INT_END_OF_TRANSFER <= '1';  -- NOT Int EOT
   PS_E_CH_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"2B");   
   PS_E_CH_IN_PROCESS <= '1';   
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'1',testName,"2C");   
   check1(MS_E_CYCLE_REQUIRED,'0',testName,"2D");
   PS_E_CH_INPUT_MODE <= '0';
   PS_E_CH_IN_PROCESS <= '0';
   PS_E2_REG_FULL <= '0';
   
   --  The rest of this page, above, actually come from the next
   --  page, below.
   
   testName := "12.12.63.1";
   
   -- A
   
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"1");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"1A");
   check1(MS_E_CYCLE_DOT_ANY_LAST_GATE,'1',testName,"1S");
   PS_E_CH_OUTPUT_MODE <= '1';
   PS_E_CH_IN_PROCESS <= '0';
   MS_E2_REG_FULL <= '1';  -- NOT Full
   MS_E_CH_INT_END_OF_TRANSFER <= '1';  -- NOT E CH Int EOT
   MS_E1_REG_WORD_SEPARATOR <= '1';  -- NOT E1 WS
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"1B");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"1C");
   PS_E_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'1',testName,"1D");   
   check1(MS_E_CYCLE_REQUIRED,'0',testName,"1E");

   -- B
   
   PS_E_CH_OUTPUT_MODE <= '0';
   PS_E_CH_INPUT_MODE <= '1';   
   PS_E1_REG_FULL <= '1';
   MS_E_CH_INT_END_OF_TRANSFER <= '1';  -- NOT E CH Int EOT
   MS_E1_REG_WORD_SEPARATOR <= '1';  -- NOT E1 WS
   PS_E_CH_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"2A");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"2B");
   PS_E_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'1',testName,"2C");   
   check1(MS_E_CYCLE_REQUIRED,'0',testName,"2D");
   
   -- C
   
   PS_E_CH_INPUT_MODE <= '1';
   PS_E1_REG_FULL <= '0'; -- E1 NOT Full
   MS_E1_REG_FULL <= '1'; -- E1 NOT Full
   MS_E2_REG_FULL <= '1'; -- E2 NOT Full
   MS_E_CH_INT_END_OF_TRANSFER <= '1';  -- NOT E CH Int EOT
   PS_E_CH_EXT_END_OF_TRANSFER <= '1';  -- IS E Ch External EOT   
   PS_E_CH_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'0',testName,"3A");   
   check1(MS_E_CYCLE_REQUIRED,'1',testName,"3B");
   PS_E_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_E_CYCLE_REQUIRED,'1',testName,"3C");   
   check1(MS_E_CYCLE_REQUIRED,'0',testName,"3D");
  
   -- NOW, test the 2nd Channel (F) -- which is NOT in the ILDs, and
   -- which (unfortunately) also has slightly different logic, and
   -- which combines 12.12.64 and 12.12.65 together, so we set the
   -- test name to 65.
   
   testName := "12.12.65.1";
   
   --  Turn on the top half of the sheet
   
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"1S");
   check1(MS_F_CYCLE_REQUIRED,'1',testName,"1A");
   MS_F_CH_INT_END_OF_TRANSFER <= '1'; -- g
   PS_F_CH_EXT_END_OF_TRANSFER <= '1';
   MS_F2_REG_FULL <= '1';
   MS_F1_REG_FULL <= '1';
   PS_F_CH_INPUT_MODE <= '1'; -- h   
   PS_F_CH_IN_PROCESS <= '0'; -- e
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"1B");
   check1(MS_F_CYCLE_REQUIRED,'1',testName,"1C");
   PS_F_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'1',testName,"1D");
   check1(MS_F_CYCLE_REQUIRED,'0',testName,"1E");

   -- Turn off the top half of the sheet
   
   PS_F_CH_EXT_END_OF_TRANSFER <= '0';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"2A");

   -- Activate the top gate of the bottom half (3F) of 12.12.65.1

   MS_F_CH_INT_END_OF_TRANSFER <= '1'; -- g
   PS_F_CH_IN_PROCESS <= '1'; -- e
   PS_F_CH_OUTPUT_MODE <= '0';
   MS_F1_REG_FULL <= '0'; -- b
   PS_ANY_LAST_GATE <= '0';  -- Force output from 12.12.64.1 to '1'
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"2C");
   
   PS_F_CH_OUTPUT_MODE <= '1'; -- a
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'1',testName,"2E");
   PS_F_CH_OUTPUT_MODE <= '0';  
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"2G");

   -- The rest of the top gate of the bottom half has to wait
   -- for 12.12.67.1
   
   --  So on to the second gate, 3G of 12.12.65.1
   
   MS_F_CH_INT_END_OF_TRANSFER <= '1'; -- g
   PS_F_CH_IN_PROCESS <= '1'; -- e
   PS_F_CH_INPUT_MODE <= '1';  -- h
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"3A");
   PS_F2_REG_FULL <= '0';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"3C");
   PS_F2_REG_FULL <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'1',testName,"3E");
   PS_F_CH_INPUT_MODE <= '0'; -- h   
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"3G");
   
   -- The rest of the second gate of the bottom half has to wait
   -- for 12.12.67.1 as well
  
   -- Test the third gate, 3H, of the bottom half of 12.12.65.1
   -- Which comes from 12.12.64.1
   
   PS_F_CH_IN_PROCESS <= '0';
   PS_F_CH_INPUT_MODE <= '0';
   MS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"4A");
   PS_F1_REG_FULL <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"4B");
   PS_F_CH_INPUT_MODE <= '1';
   MS_F_CH_INT_END_OF_TRANSFER <= '1';   
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"4C");
   PS_F_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'1',testName,"4D");
   PS_F_CH_IN_PROCESS <= '0';
   PS_F_CH_INPUT_MODE <= '0';
   PS_F1_REG_FULL <= '0';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"4A");

   -- Test the fourth, bottom gate, 3I of the bottom half of 12.12.65.1
   -- Which also comes from 12.12.64.1
   
   PS_F_CH_OUTPUT_MODE <= '0';
   MS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"5A");
   MS_F2_REG_FULL <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"5B");
   PS_F_CH_OUTPUT_MODE <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"5C");
   PS_F_CH_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'1',testName,"5D");
   MS_F_CH_INT_END_OF_TRANSFER <= '0';
   wait for 30 ns;
   check1(PS_F_CYCLE_REQUIRED,'0',testName,"5D");
     
  
  
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
