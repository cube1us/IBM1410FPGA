-- Test BenchVHDL for IBM SMS ALD group EChWordSeparatorCtrl
-- Title: EChWordSeparatorCtrl
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 11/16/2020 3:23:57 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity EChWordSeparatorCtrl_tb is
end EChWordSeparatorCtrl_tb;

architecture behavioral of EChWordSeparatorCtrl_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component EChWordSeparatorCtrl
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_E_CH_WORD_SEPARATOR: in STD_LOGIC;
		PS_E_CH_WORD_SEPARATOR_MODE: in STD_LOGIC;
		PS_SET_E1_REG: in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE: in STD_LOGIC;
		PS_RESET_E2_FULL_LATCH: in STD_LOGIC;
		PS_E_CH_INPUT_MODE: in STD_LOGIC;
		PS_SET_E2_REG_DELAYED: in STD_LOGIC;
		PS_LOGIC_GATE_C_OR_D: in STD_LOGIC;
		PS_LOGIC_GATE_C_1: in STD_LOGIC;
		PS_I_CYCLE: in STD_LOGIC;
		PS_LOGIC_GATE_E_2: in STD_LOGIC;
		MS_COMPUTER_RESET_1: in STD_LOGIC;
		PS_1401_COND_TEST_OP_CODE: in STD_LOGIC;
		PS_1401_CARD_OR_PRINT_OP_CODE: in STD_LOGIC;
		PS_E_CH_2_CHAR_ONLY_OP_CODES: in STD_LOGIC;
		PS_PERCENT_OR_COML_AT: in STD_LOGIC;
		PS_E_CH_WRONG_LENGTH_RECORD: in STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_B_DELAY: in STD_LOGIC;
		PS_1401_CARD_PRINT_IN_PROC: in STD_LOGIC;
		PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME: in STD_LOGIC;
		MS_E1_INPUT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		PS_B_CH_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MS_E1_REG_WORD_SEPARATOR: out STD_LOGIC;
		PS_E2_REG_WORD_SEPARATOR: out STD_LOGIC;
		PS_E1_REG_WORD_SEPARATOR: out STD_LOGIC;
		MS_E2_REG_WORD_SEPARATOR: out STD_LOGIC;
		MS_E_CH_RESET: out STD_LOGIC;
		MS_E_CH_RESET_CORR_REC_LENGTH: out STD_LOGIC;
		MS_F_OR_K_E_CH_RESET: out STD_LOGIC;
		MS_E_CH_RESET_1: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_E_CH_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_E_CH_WORD_SEPARATOR_MODE: STD_LOGIC := '0';
	signal PS_SET_E1_REG: STD_LOGIC := '0';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_RESET_E2_FULL_LATCH: STD_LOGIC := '0';
	signal PS_E_CH_INPUT_MODE: STD_LOGIC := '0';
	signal PS_SET_E2_REG_DELAYED: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_C_OR_D: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_C_1: STD_LOGIC := '0';
	signal PS_I_CYCLE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_2: STD_LOGIC := '0';
	signal MS_COMPUTER_RESET_1: STD_LOGIC := '1';
	signal PS_1401_COND_TEST_OP_CODE: STD_LOGIC := '0';
	signal PS_1401_CARD_OR_PRINT_OP_CODE: STD_LOGIC := '0';
	signal PS_E_CH_2_CHAR_ONLY_OP_CODES: STD_LOGIC := '0';
	signal PS_PERCENT_OR_COML_AT: STD_LOGIC := '0';
	signal PS_E_CH_WRONG_LENGTH_RECORD: STD_LOGIC := '0';
	signal PS_E_CH_STATUS_SAMPLE_B_DELAY: STD_LOGIC := '0';
	signal PS_1401_CARD_PRINT_IN_PROC: STD_LOGIC := '0';
	signal PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME: STD_LOGIC := '0';
	signal MS_E1_INPUT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";
	signal PS_B_CH_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal MS_E1_REG_WORD_SEPARATOR: STD_LOGIC;
	signal PS_E2_REG_WORD_SEPARATOR: STD_LOGIC;
	signal PS_E1_REG_WORD_SEPARATOR: STD_LOGIC;
	signal MS_E2_REG_WORD_SEPARATOR: STD_LOGIC;
	signal MS_E_CH_RESET: STD_LOGIC;
	signal MS_E_CH_RESET_CORR_REC_LENGTH: STD_LOGIC;
	signal MS_F_OR_K_E_CH_RESET: STD_LOGIC;
	signal MS_E_CH_RESET_1: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: EChWordSeparatorCtrl port map(
		FPGA_CLK => FPGA_CLK,
		MS_E_CH_WORD_SEPARATOR => MS_E_CH_WORD_SEPARATOR,
		PS_E_CH_WORD_SEPARATOR_MODE => PS_E_CH_WORD_SEPARATOR_MODE,
		PS_SET_E1_REG => PS_SET_E1_REG,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_RESET_E2_FULL_LATCH => PS_RESET_E2_FULL_LATCH,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		PS_SET_E2_REG_DELAYED => PS_SET_E2_REG_DELAYED,
		PS_LOGIC_GATE_C_OR_D => PS_LOGIC_GATE_C_OR_D,
		PS_LOGIC_GATE_C_1 => PS_LOGIC_GATE_C_1,
		PS_I_CYCLE => PS_I_CYCLE,
		PS_LOGIC_GATE_E_2 => PS_LOGIC_GATE_E_2,
		MS_COMPUTER_RESET_1 => MS_COMPUTER_RESET_1,
		PS_1401_COND_TEST_OP_CODE => PS_1401_COND_TEST_OP_CODE,
		PS_1401_CARD_OR_PRINT_OP_CODE => PS_1401_CARD_OR_PRINT_OP_CODE,
		PS_E_CH_2_CHAR_ONLY_OP_CODES => PS_E_CH_2_CHAR_ONLY_OP_CODES,
		PS_PERCENT_OR_COML_AT => PS_PERCENT_OR_COML_AT,
		PS_E_CH_WRONG_LENGTH_RECORD => PS_E_CH_WRONG_LENGTH_RECORD,
		PS_E_CH_STATUS_SAMPLE_B_DELAY => PS_E_CH_STATUS_SAMPLE_B_DELAY,
		PS_1401_CARD_PRINT_IN_PROC => PS_1401_CARD_PRINT_IN_PROC,
		PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME => PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME,
		MS_E1_INPUT_BUS => MS_E1_INPUT_BUS,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		PS_B_CH_NOT_BUS => PS_B_CH_NOT_BUS,
		MS_E1_REG_WORD_SEPARATOR => MS_E1_REG_WORD_SEPARATOR,
		PS_E2_REG_WORD_SEPARATOR => PS_E2_REG_WORD_SEPARATOR,
		PS_E1_REG_WORD_SEPARATOR => PS_E1_REG_WORD_SEPARATOR,
		MS_E2_REG_WORD_SEPARATOR => MS_E2_REG_WORD_SEPARATOR,
		MS_E_CH_RESET => MS_E_CH_RESET,
		MS_E_CH_RESET_CORR_REC_LENGTH => MS_E_CH_RESET_CORR_REC_LENGTH,
		MS_F_OR_K_E_CH_RESET => MS_F_OR_K_E_CH_RESET,
		MS_E_CH_RESET_1 => MS_E_CH_RESET_1);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(15 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p: std_logic;
   variable g1, g2, g3, g4, g5, g6: std_logic;

   begin

   -- Your test bench code

   testName := "15.41.12.1        ";
   
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      
      PS_I_RING_HDL_BUS <= "00000000" & a & "00" & g & "0";
      PS_PERCENT_OR_COML_AT <= b;
      MS_COMPUTER_RESET_1 <= not c;
      PS_LOGIC_GATE_C_OR_D <= d;
      PS_E_CH_STATUS_SAMPLE_B_DELAY <= e;
      PS_1401_CARD_PRINT_IN_PROC <= f;
      PS_E_CH_2_CHAR_ONLY_OP_CODES <= h;
      PS_LOGIC_GATE_C_1 <= i;
      PS_1401_COND_TEST_OP_CODE <= j;
      PS_I_CYCLE <= k;
      PS_B_CH_NOT_BUS(HDL_WM_BIT) <= l;
      PS_LOGIC_GATE_E_2 <= m;
      PS_1401_CARD_OR_PRINT_OP_CODE <= n;
      PS_I_RING_1_OR_2_OR_5_OR_6_OR_10_TIME <= o;
      
      g1 := a and d and b;
      g2 := j and k and l and m;
      g3 := g2 or (e and f) or (n and o);
      g4 := g and h and i;
      
      wait for 30 ns;

      check1(MS_E_CH_RESET,NOT(c or g1 or g3 or g4),testName,"-S E Ch Reset");
      check1(MS_E_CH_RESET_1,NOT(c or g1 or g3 or g4),testName,"-S E Ch Reset 1");
      check1(MS_E_CH_RESET_CORR_REC_LENGTH,NOT g1,testName,"-S E Ch Reset Corr Rec Len");
      check1(MS_F_OR_K_E_CH_RESET,NOT g4,testName,"-S F Or K E Ch Reset");
      
   end loop;
   
      testName := "13.64.04.1        ";
   
   -- Note that The W/S latches were reset during test 1
   
   check1(PS_E1_REG_WORD_SEPARATOR,'0',testName,"1A");
   check1(MS_E1_REG_WORD_SEPARATOR,'1',testName,"1B");
   PS_E_CH_WORD_SEPARATOR_MODE <= '1';
   PS_SET_E1_REG <= '1';
   
   MS_E_CH_WORD_SEPARATOR <= '1';  -- NOT, for now
   MS_E1_INPUT_BUS(HDL_WM_BIT) <= '1'; -- WM bit NOT set
   wait for 30 ns;
   check1(PS_E1_REG_WORD_SEPARATOR,'0',testName,"1C");
   check1(MS_E1_REG_WORD_SEPARATOR,'1',testName,"1D");
   MS_E_CH_WORD_SEPARATOR <= '0';
   wait for 30 ns; -- Should set F1 W/S
   check1(PS_E1_REG_WORD_SEPARATOR,'1',testName,"1E");
   check1(MS_E1_REG_WORD_SEPARATOR,'0',testName,"1F");
   PS_SET_E1_REG <= '0';
   MS_E_CH_WORD_SEPARATOR <= '1';
   wait for 30 ns; -- Should stay set
   check1(PS_E1_REG_WORD_SEPARATOR,'1',testName,"1G");
   check1(MS_E1_REG_WORD_SEPARATOR,'0',testName,"1H");
   PS_SET_E1_REG <= '1'; -- Now it should clear
   wait for 30 ns;
   check1(PS_E1_REG_WORD_SEPARATOR,'0',testName,"1I");
   check1(MS_E1_REG_WORD_SEPARATOR,'1',testName,"1J");
   MS_E1_INPUT_BUS(HDL_WM_BIT) <= '0'; -- WM bit Set
   wait for 30 ns; -- Should set F1 W/S again
   check1(PS_E1_REG_WORD_SEPARATOR,'1',testName,"1K");
   check1(MS_E1_REG_WORD_SEPARATOR,'0',testName,"1L");
   PS_SET_E1_REG <= '0';
   MS_E1_INPUT_BUS(HDL_WM_BIT) <= '1';
   wait for 30 ns;  -- Should stay set
   check1(PS_E1_REG_WORD_SEPARATOR,'1',testName,"1M");
   check1(MS_E1_REG_WORD_SEPARATOR,'0',testName,"1N");
   PS_SET_E1_REG <= '1';
   wait for 30 ns;  -- Now it should clear again
   check1(PS_E1_REG_WORD_SEPARATOR,'0',testName,"1O");
   check1(MS_E1_REG_WORD_SEPARATOR,'1',testName,"1P");
   
   -- Set F1 W/S reg again for next test
   MS_E1_INPUT_BUS(HDL_WM_BIT) <= '0';
   wait for 30 ns;  -- Now it should set again
   check1(PS_E1_REG_WORD_SEPARATOR,'1',testName,"1Q");
   check1(MS_E1_REG_WORD_SEPARATOR,'0',testName,"1R");
   PS_SET_E1_REG <= '0';
   
   PS_E_CH_WORD_SEPARATOR_MODE <= '1';
   check1(PS_E2_REG_WORD_SEPARATOR,'0',testName,"2A");   
   check1(MS_E2_REG_WORD_SEPARATOR,'1',testName,"2B");
   PS_SET_E2_REG_DELAYED <= '1';
   wait for 30 ns;  -- Should set 
   PS_SET_E2_REG_DELAYED <= '0';
   wait for 30 ns;  -- Should stay set
   check1(PS_E2_REG_WORD_SEPARATOR,'1',testName,"2C");   
   check1(MS_E2_REG_WORD_SEPARATOR,'0',testName,"2D");
   PS_RESET_E2_FULL_LATCH <= '1';
   wait for 30 ns;
   check1(PS_E2_REG_WORD_SEPARATOR,'1',testName,"2E");   
   check1(MS_E2_REG_WORD_SEPARATOR,'0',testName,"2F");
   wait for 30 ns; -- Should reset
   PS_E_CH_INPUT_MODE <= '1';
   wait for 30 ns; -- Should stay reset
   PS_E_CH_INPUT_MODE <= '0';
   PS_RESET_E2_FULL_LATCH <= '0';
   check1(PS_E2_REG_WORD_SEPARATOR,'0',testName,"2G");   
   check1(MS_E2_REG_WORD_SEPARATOR,'1',testName,"2H");
   PS_SET_E2_REG_DELAYED <= '1';
   wait for 30 ns;  -- Should set again 
   PS_SET_E2_REG_DELAYED <= '0';
   wait for 30 ns;  -- Should stay set
   check1(PS_E2_REG_WORD_SEPARATOR,'1',testName,"2I");   
   check1(MS_E2_REG_WORD_SEPARATOR,'0',testName,"2J");
   PS_SET_E1_REG <= '1';   
   wait for 30 ns;  -- Should still be set
   check1(PS_E2_REG_WORD_SEPARATOR,'1',testName,"2K");   
   check1(MS_E2_REG_WORD_SEPARATOR,'0',testName,"2L");
   PS_E_CH_OUTPUT_MODE <= '1';
   wait for 30 ns;  -- Should clear
   PS_E_CH_OUTPUT_MODE <= '1';
   wait for 30 ns;  -- Should stay clear   
   check1(PS_E2_REG_WORD_SEPARATOR,'0',testName,"2M");   
   check1(MS_E2_REG_WORD_SEPARATOR,'1',testName,"2N");


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
