-- Test BenchVHDL for IBM SMS ALD group IntegrationTest3 (Copied from Integration Test 3)
-- Title: IntegrationTest4
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 11/8/2020 5:21:26 PM
-- Copied from IntegrationTest3.vhdl 2/21/2025

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;

library UNISIM;
use UNISIM.vcomponents.all;

use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity IntegrationTest4_fpga is
   GENERIC (
      TAU_IRG_DELAY:         integer  :=  100000;   -- 1 ms in 10ns units
      TAU_WRITE_RBC_DELAY:   integer  := 4000000;   -- in 10ns units, 40ms
      CHANNEL_CYCLE_LENGTH:  integer  :=    1120;   -- 20us in 10ns units - inter-character delay
      CHANNEL_STROBE_LENGTH: integer  :=     100;   -- 1 us channel strobe
      USE_UDP_OUTPUT_TEST: integer    := 0;
      USE_UDP_INPUT_TEST:  integer    := 0
   );
   PORT (
      CLK: in  STD_LOGIC;
      SW:  in  STD_LOGIC_VECTOR(15 downto 0);

      LED: out STD_LOGIC_VECTOR(15 downto 0);

      RGB1_Red:   out STD_LOGIC;
      RGB1_Green: out STD_LOGIC;
      RGB1_Blue:  out STD_LOGIC;
      RGB2_Red:   out STD_LOGIC;
      RGB2_Green: out STD_LOGIC;
      RGB2_Blue:  out STD_LOGIC;
      
      btnC, btnL, btnR, btnU, btnD, btnCpuReset: in STD_LOGIC;
      
      RsTx: out STD_LOGIC;  -- From FPGA to USB/Serial
      RsRx: in STD_LOGIC;    -- To FPGA from USB/Serial  
      
      -- Ethernet Port (PHY)
      PhyMdc:      out STD_LOGIC;  -- Not used
      PhyMdio:   inout STD_LOGIC;  -- Not used
      PhyRstn:     out STD_LOGIC;  -- 
      PhyCrs:      in  STD_LOGIC;  --
      PhyRxErr:    in  STD_LOGIC;  --
      PhyRxd:      in  STD_LOGIC_VECTOR(1 downto 0); --
      PhyTxEn:     out STD_LOGIC; --
      PhyTxd:      out STD_LOGIC_VECTOR(1 downto 0); --
      PhyClk50Mhz: out STD_LOGIC;
      PhyIntn:     in  STD_LOGIC   -- Not used                            
);
   
end IntegrationTest4_fpga;


architecture behavioral of IntegrationTest4_fpga is

	-- Component Declaration for the Unit Under Test (UUT)

	component IntegrationTest4
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PP_SPECIAL_OR_12V_POWER_FOR_OSC: in STD_LOGIC;
		MV_36_VOLTS: in STD_LOGIC;
		-- GROUND: in STD_LOGIC;
		PS_INSTRUCTION_CHECK_GATE_STAR_1311: in STD_LOGIC;
		MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR: in STD_LOGIC;
		PS_COMP_DISABLE_CYCLE_STAR_1412_19: in STD_LOGIC;
		PS_START_AUTO_STARTMODE_STAR_AUTS_STAR: in STD_LOGIC;
		PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR: in STD_LOGIC;
		M36_VOLTS: in STD_LOGIC;
		PS_BRANCH_TO_A_COND_STAR_1412_19: in STD_LOGIC;
		PS_SET_NO_SCAN_CTRL_STAR_1412_19: in STD_LOGIC;
		PS_SET_B_CYCLE_CTRL_STAR_1412_19: in STD_LOGIC;
		PS_NO_BRANCH_COND_STAR_1412_19: in STD_LOGIC;
		PS_LAST_EXECUTE_CYCLE_STAR_1412_19: in STD_LOGIC;
		MC_BUFFER_INQ_REQUEST: in STD_LOGIC;
		MC_BUFFER_OUTQUIRY_PULSE: in STD_LOGIC;
		PS_SPEC_BRANCH_LATCH_STAR_1414_STAR: in STD_LOGIC;
		MC_PRINTER_CHANNEL_9: in STD_LOGIC;
		MC_PRINTER_CHANNEL_12: in STD_LOGIC;
		MC_FORMS_BUSY_STATUS_TO_CPU: in STD_LOGIC;
		MC_READ_COLUMN_BINARY: in STD_LOGIC;
		MC_1301_READY_E_CH: in STD_LOGIC;
		MC_1405_READY_E_CH: in STD_LOGIC;
		MC_BUFFER_READY: in STD_LOGIC;
		PS_E_CH_READY_BUS_STAR_SIF: in STD_LOGIC;
		PS_E_CH_READY_BUS_STAR_1412_19: in STD_LOGIC;
		MC_TAPE_READY: in STD_LOGIC;
		MC_TAPE_READY_F_CH_JRJ: in STD_LOGIC;
		MC_BUFFER_READY_JRJ: in STD_LOGIC;
		MC_SELECT_AND_REWIND_STAR_E_CH: in STD_LOGIC;
		MC_1301_BUSY_E_CH: in STD_LOGIC;
		PS_E_CH_BUSY_BUS_STAR_1412_19: in STD_LOGIC;
		MC_1405_BUSY_E_CH: in STD_LOGIC;
		MC_BUFFER_BUSY: in STD_LOGIC;
		MC_BUFFER_BUSY_JRJ: in STD_LOGIC;
		MC_TAPE_BUSY: in STD_LOGIC;
		MC_TAPE_BUSY_F_CH_JRJ: in STD_LOGIC;
		MC_1301_ERROR_E_CH: in STD_LOGIC;
		MC_1405_ERROR_E_CH: in STD_LOGIC;
		MC_BUFFER_ERROR: in STD_LOGIC;
		MC_BUFFER_ERROR_JRJ: in STD_LOGIC;
		PS_E_CH_CHECK_BUS_STAR_SIF: in STD_LOGIC;
		PS_E_CH_CHECK_BUS_STAR_1412_19: in STD_LOGIC;
		MC_TAPE_ERROR: in STD_LOGIC;
		MC_TAPE_ERROR_F_CH_JRJ: in STD_LOGIC;
		MC_1301_E_CH_CONDITION: in STD_LOGIC;
		MC_1405_CONDITION_E_CH: in STD_LOGIC;
		MC_BUFFER_CONDITION: in STD_LOGIC;
		MC_BUFFER_CONDITION_JRJ: in STD_LOGIC;
		MC_SEL_OR_TAPE_IND_ON_CH_1: in STD_LOGIC;
		MC_RBC_ERROR_1405_E_CH: in STD_LOGIC;
		PS_E_CH_COND_LATCH_STAR_SIF: in STD_LOGIC;
		MV_CONSOLE_PWR_SUPPLY_36_VOLTS: in STD_LOGIC;
		PS_OP_MOD_SYM_IO_STATUS_STAR_1414_STAR: in STD_LOGIC;
		PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF: in STD_LOGIC;
		PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF_JRJ: in STD_LOGIC;
		PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF: in STD_LOGIC;
		PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF_JRJ: in STD_LOGIC;
		MS_I_OR_O_OP_CODES_STAR_12_19: in STD_LOGIC;
		MS_E_CH_2_CHAR_OP_CODES_STAR_1414_STAR: in STD_LOGIC;
		PS_P_OR_Q_2_CHAR_OP_1412_19: in STD_LOGIC;
		MC_1301_END_ADDR_TRF_E_CH: in STD_LOGIC;
		MC_BUFFER_END_OF_TRANSFER: in STD_LOGIC;
		PS_E_CH_EXT_END_OF_TRF_STAR_1311: in STD_LOGIC;
		PS_E_CH_EXT_END_OF_TRF_STAR_SIF: in STD_LOGIC;
		PS_E_CH_EXT_END_OF_TRF_STAR_1412_19: in STD_LOGIC;
		MC_1405_END_OF_OP_STAR_E_CH: in STD_LOGIC;
		UNNAMED_26_DOT_00_DOT_01_DOT_0: in STD_LOGIC;
		MC_TAPE_IN_PROCESS: in STD_LOGIC;
		MC_TAPE_IN_PROCESS_F_CH_JRJ: in STD_LOGIC;
		MC_1301_END_OF_OP_STAR_E_CH: in STD_LOGIC;
		PS_GATE_OFF_E_CH_EXT_END_OF_TRF: in STD_LOGIC;
		MS_E_CH_SEL_ODD_PARITY_STAR_1412_19: in STD_LOGIC;
		PS_E_CH_SELECT_7_BIT_UNIT_STAR_SIF: in STD_LOGIC;
		PS_END_OF_RECORD_STAR_1311: in STD_LOGIC;
		PS_E_CH_SIF_SENSE_OR_CONTROL: in STD_LOGIC;
		PS_INT_END_OF_XFER_STAR_1311: in STD_LOGIC;
		PS_F_CH_RESET_STAR_1414: in STD_LOGIC;
		PS_F_CH_SELECT_ODD_PARITY_STAR_1414: in STD_LOGIC;
		PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_SIF: in STD_LOGIC;
		PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_2_9: in STD_LOGIC;
		PS_F_CH_SELECT_7_BIT_UNIT_STAR_SIF: in STD_LOGIC;
		PS_F_CH_SELECT_7_BIT_UNIT_STAR_1414: in STD_LOGIC;
		MC_FILE_INVALID_ADDRESS_1405: in STD_LOGIC;
		MS_E_CH_U_SEL_K_DOT_S_OP_MOD: in STD_LOGIC;
		MS_F_CH_U_SEL_K_DOT_S_OP_MOD: in STD_LOGIC;
		MS_RECOVER_LATCH_STAR_1311: in STD_LOGIC;
		PS_GT_OFF_E_CH_ST_SPL_DLY: in STD_LOGIC;
		PS_BLOCK_IO_LAST_EXECUTE: in STD_LOGIC;
		MS_F_CH_CON_LAT_SET_STAR_1414_STAR: in STD_LOGIC;
		MC_1301_ERROR_F_CH: in STD_LOGIC;
		MC_1405_ERROR_F_CH: in STD_LOGIC;
		PS_F_CH_CHECK_STAR_SIF: in STD_LOGIC;
		PS_F_CH_CHECK_BUS_STAR_1414_STAR: in STD_LOGIC;
		MC_RBC_ERROR_1405_F_CH: in STD_LOGIC;
		PS_F_CH_CHECK_STAR_1412_19: in STD_LOGIC;
		MS_F_CH_COND_LATCH_STAR_SIF: in STD_LOGIC;
		TW_RBC_ERROR_1405_F_CH: in STD_LOGIC;
		MC_1301_F_CH_CONDITION: in STD_LOGIC;
		MC_1405_CONDITION_F_CH: in STD_LOGIC;
		MC_SEL_OR_TI_ON_CH_2: in STD_LOGIC;
		PS_F_CH_COND_BUS_STAR_1414_STAR: in STD_LOGIC;
		MS_SET_F_CH_CON_LATCH_STAR_1414_STAR: in STD_LOGIC;
		PS_F_CH_SIF_SENSE_OR_CONTROL: in STD_LOGIC;
		MC_1301_READY_F_CH: in STD_LOGIC;
		MC_1405_READY_F_CH: in STD_LOGIC;
		PS_F_CH_READY_BUS_STAR_1414_STAR: in STD_LOGIC;
		PS_F_CH_READY_BUS_STAR_1412_19: in STD_LOGIC;
		PS_F_CH_READY_BUS_STAR_SIF: in STD_LOGIC;
		MC_SELECT_AND_REWIND_STAR_F_CH: in STD_LOGIC;
		PS_F_CH_BUSY_BUS_STAR_1414_STAR: in STD_LOGIC;
		PS_F_CH_BUSY_BUS_STAR_1412_19: in STD_LOGIC;
		MC_1301_BUSY_F_CH: in STD_LOGIC;
		MC_1405_BUSY_F_CH: in STD_LOGIC;
		PS_F_CH_CLR_LATCH_STAR_1414_STAR: in STD_LOGIC;
		PS_RESET_F_CH_CLR_LAT_STAR_1414_STAR: in STD_LOGIC;
		MC_SELECT_AT_LOAD_POINT_STAR_F_CH: in STD_LOGIC;
		MC_WRITE_CONDITION_STAR_F_CH: in STD_LOGIC;
		PS_ASSEMBLY_TO_F_CH_STAR_1414_STAR: in STD_LOGIC;
		PS_GATE_F_CH_ST_SAMPLE_A_STAR_1414_STAR: in STD_LOGIC;
		MC_1301_END_ADDR_TRF_F_CH: in STD_LOGIC;
		PS_SET_F_CH_EXT_END_TRF_STAR_SIF: in STD_LOGIC;
		PS_F_CH_EXT_END_OF_TRF_BUS_STAR_1414: in STD_LOGIC;
		PS_SET_F_CH_EXT_END_TRF_STAR_1412_19: in STD_LOGIC;
		MC_1301_END_OF_OP_STAR_F_CH: in STD_LOGIC;
		MC_1405_END_OF_OP_STAR_F_CH: in STD_LOGIC;
		MC_1403_PRINT_BUFFER_BUSY: in STD_LOGIC;
		MC_I_O_PRINTER_READY: in STD_LOGIC;
		MC_SELECT_AT_LOAD_POINT_STAR_E_CH: in STD_LOGIC;
		MC_WRITE_CONDITION_STAR_E_CH: in STD_LOGIC;
		PS_GATE_ON_E_CH_END_ADDR_TRF: in STD_LOGIC;
		PS_WR_INHIBIT_STAR_7631_STAR_E_CH: in STD_LOGIC;
		PS_SET_E_CH_NO_TRANS_LAT_STAR_SIF: in STD_LOGIC;
		PS_SET_E_CH_NO_TRANS_LAT_STAR_12_19: in STD_LOGIC;
		MC_BUFFER_NO_TRANS_COND: in STD_LOGIC;
		MC_BUFFER_NO_TRANS_COND_JRJ: in STD_LOGIC;
		MC_ADDR_COMP_TRUE_F_CH: in STD_LOGIC;
		MC_FAST_FILE_ON_LINE_F_CH: in STD_LOGIC;
		MS_1311_F_CH_END_ADDR_TRF: in STD_LOGIC;
		PS_WR_INHIBIT_STAR_7631_STAR_F_CH: in STD_LOGIC;
		PS_F_CH_NO_TRF_LATCH_STAR_SIF: in STD_LOGIC;
		PS_SET_F_CH_NO_TRANS_LAT_STAR_1414_STAR: in STD_LOGIC;
		PS_F_CH_NO_TRANS_LAT_STAR_12_19: in STD_LOGIC;
		MC_E_CH_FILE_DIGIT_RING_7: in STD_LOGIC;
		MC_F_CH_FILE_DIGIT_RING_7: in STD_LOGIC;
		MINUS_36_VOLTS: in STD_LOGIC;
		PS_OPTIONAL_SYNC_COND_STAR_CE: in STD_LOGIC;
		MS_OPTIONAL_SYNC_COND_A: in STD_LOGIC;
		MS_OPTIONAL_SYNC_COND_B: in STD_LOGIC;
		PS_BLOCK_ADDR_MOD_OR_1_STAR_1412_19: in STD_LOGIC;
		PS_ADDR_MOD_SET_TO_1_STAR_1412_19: in STD_LOGIC;
		PS_1311_SET_AAR: in STD_LOGIC;
		PS_1311_SET_DAR_STAR_1401: in STD_LOGIC;
		PS_1311_RESET_AAR: in STD_LOGIC;
		MS_1311_RESET_DAR_STAR_1401: in STD_LOGIC;
		MS_SCAN_RESTART_LATCH_STAR_1311: in STD_LOGIC;
		PS_BLOCK_BAR_RO_E_CH_STAR_1311: in STD_LOGIC;
		PS_BLOCK_BAR_RO_F_CH_STAR_1311: in STD_LOGIC;
		PS_1311_RO_DAR_STAR_1401: in STD_LOGIC;
		PS_E2_FULL_LATCH_STAR_SIF: in STD_LOGIC;
		MS_F_CH_OUTPUT_WM_CYCLE_STAR_1414_STAR: in STD_LOGIC;
		PS_OUTPUT_FIELD_CYCLE_STAR_1414_STAR: in STD_LOGIC;
		PS_ASM_CH_A_BIT_STAR_STERLING: in STD_LOGIC;
		MS_SET_F_U_SEL_REG_2_BIT_STAR_1414_STAR: in STD_LOGIC;
		MS_SET_F_U_SEL_REG_1_BIT_STAR_1414_STAR: in STD_LOGIC;
		MV_CONSOLE_C_INPUT_STAR_CHK_OP: in STD_LOGIC;
		MC_BUFFER_STROBE: in STD_LOGIC;
		MC_SET_ECH_STROB_TR_E_FR_FEATS: in STD_LOGIC;
		TW_SET_ECH_STROB_TR_E_FR_FEATS: in STD_LOGIC;
		MC_BUFFER_STROBE_JRJ: in STD_LOGIC;
		MC_TAPE_WRITE_STROBE: in STD_LOGIC;
		MC_TAPE_WRITE_STROBE_F_CH_JRJ: in STD_LOGIC;
		MC_1301_STROBE_E_CH: in STD_LOGIC;
		MC_1405_STROBE_E_CH: in STD_LOGIC;
		MC_TAPE_READ_STROBE: in STD_LOGIC;
		MC_TAPE_READ_STROBE_F_CH_JRJ: in STD_LOGIC;
		MS_F_CH_STK_SEL_OP_CODE_STAR_1414_STAR: in STD_LOGIC;
		PS_F_CH_WRITE_LATCH_STAR_1414_STAR: in STD_LOGIC;
		MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR: in STD_LOGIC;
		MC_1301_STROBE_F_CH: in STD_LOGIC;
		MC_SET_FCH_STROB_TR_E_FR_FEATS: in STD_LOGIC;
		TW_SET_FCH_STROB_TR_E_FR_FEATS: in STD_LOGIC;
		MC_1405_STROBE_F_CH: in STD_LOGIC;
		PS_GATE_SET_F1_REG_STAR_1414_STAR: in STD_LOGIC;
		PS_GATE_RESET_F2_FULL_STAR_1414_STAR: in STD_LOGIC;
		PS_RGEN_EXTN_CTRL_STAR_STERLING: in STD_LOGIC;
		PS_PULL_OFF_CMP_HI_STAR_1311_SCAN: in STD_LOGIC;
		PS_PULL_OFF_CMP_LO_STAR_1311_SCAN: in STD_LOGIC;
		PS_SIMULATE_CMP_HI_STAR_1311_SCAN: in STD_LOGIC;
		PS_SIMULATE_CMP_EQ_STAR_1311_SCAN: in STD_LOGIC;
		PS_SIMULATE_CMP_LO_STAR_1311_SCAN: in STD_LOGIC;
		PS_CMP_MODE_B_CYCLE_STAR_1311: in STD_LOGIC;
		M36_VOLTS_ON_CONSOLE: in STD_LOGIC;
		PS_INTERLOCK_F_CH_STAR_1414_STAR: in STD_LOGIC;
		MC_READER_BUSY: in STD_LOGIC;
		MC_READER_BUSY_JRJ: in STD_LOGIC;
		MC_PUNCH_BUSY: in STD_LOGIC;
		MC_PUNCH_BUSY_JRJ: in STD_LOGIC;
		MC_PAPER_TAPE_READER_BUSY: in STD_LOGIC;
		MC_PAPER_TAPE_READY_BUSY_JRJ: in STD_LOGIC;
		MC_I_O_CLOCK_080_090_TIME: in STD_LOGIC;
		MC_I_O_CLOCK_080_090_TIME_JRJ: in STD_LOGIC;
		PS_INTERRUPT_REQUEST_STAR_SIF: in STD_LOGIC;
		PS_INTERRUPT_REQUEST_JRJ: in STD_LOGIC;
		PS_INTERRUPT_REQUEST_STAR_1414_STAR: in STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR: in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_E_CH_1405: in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_E_CH_1301: in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_F_CH_1301: in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_F_CH_1405: in STD_LOGIC;
		PS_2ND_CND_A_BRANCH_STAR_SIF: in STD_LOGIC;
		PS_2ND_CND_A_BRANCH_STAR_SIF_JRJ: in STD_LOGIC;
		PS_2ND_CND_A_BRANCH_STAR_1414_STAR: in STD_LOGIC;
		PS_NO_BRANCH_CND_INTER_STAR_SIF: in STD_LOGIC;
		PS_NO_BRANCH_CND_INTER_STAR_SIF_JRJ: in STD_LOGIC;
		PS_NO_BRANCH_CND_INTER_STAR_1414_STAR: in STD_LOGIC;
		M6_V: in STD_LOGIC;
		MY_CHAR_SEL_ERROR_CHK_1_STAR_2_STAR: in STD_LOGIC;
		MY_CHAR_SEL_ERROR_CHK_2_STAR_2_STAR: in STD_LOGIC;
		CONS_36V: in STD_LOGIC;
		MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO: in STD_LOGIC;
		PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC: in STD_LOGIC;
		MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO: in STD_LOGIC;
		MV_CONS_PRINTER_C2_CAM_NC: in STD_LOGIC;
		MV_CONS_PRINTER_C2_CAM_NO: in STD_LOGIC;
		MV_CONS_PRINTER_SPACE_NO: in STD_LOGIC;
		MV_CONS_PRINTER_C1_CAM_NO: in STD_LOGIC;
		MV_CONS_PRINTER_C1_CAM_NC: in STD_LOGIC;
		MV_CONS_PRINTER_C3_OR_C4_NO: in STD_LOGIC;
		MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC: in STD_LOGIC;
		MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO: in STD_LOGIC;
		MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO: in STD_LOGIC;
		MB_CONS_PRINTER_EVEN_BIT_CHECK: in STD_LOGIC;
		MV_CONS_PRINTER_ODD_BIT_CHECK: in STD_LOGIC;
		MV_CONS_PRINTER_LAST_COLUMN_SET: in STD_LOGIC;
		MV_KEYBOARD_LOCK_MODE_STAR_NO: in STD_LOGIC;
		MV_KEYBOARD_UNLOCK_MODE: in STD_LOGIC;
		PS_E1_INPUT_STAR_SIF_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_E1_INPUT_STAR_1412_19_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_E_CH_TAU_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_I_O_SYNC_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_E_CH_1301_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_E_CH_1405_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MV_CONS_PRTR_TO_CPU_BUS: in STD_LOGIC_VECTOR (5 downTo 0);
		PS_F1_INPUT_STAR_SIF_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F1_INPUT_STAR_1414_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F1_INPUT_STAR_1412_19_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_1301_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_1405_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_TAU_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_0_STAR_Z_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_1_STAR_Z_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_2_STAR_Z_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_3_STAR_Z_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		SWITCH_ROT_STOR_SCAN_DK6: in STD_LOGIC_VECTOR(5 downTo 0);
		SWITCH_MOM_CONS_START: in STD_LOGIC;
		SWITCH_MOM_CE_START: in STD_LOGIC;
		SWITCH_MOM_CONS_STOP_PL1: in STD_LOGIC;
		SWITCH_MOM_CE_STOP_SW_PL1: in STD_LOGIC;
		SWITCH_TOG_I_O_CHK_ST_PL1: in STD_LOGIC;
		SWITCH_TOG_ADDR_STOP_PL1: in STD_LOGIC;
		SWITCH_REL_PWR_ON_RST: in STD_LOGIC;
		SWITCH_MOM_CO_CPR_RST: in STD_LOGIC;
		SWITCH_MOM_CE_CPR_RST: in STD_LOGIC;
		SWITCH_MOM_PROG_RESET: in STD_LOGIC;
		SWITCH_TOG_1401_MODE_PL1: in STD_LOGIC;
		SWITCH_ROT_CHECK_CTRL_DK2: in STD_LOGIC_VECTOR(5 downTo 0);
		SWITCH_MOM_IO_CHK_RST_PL1: in STD_LOGIC;
		SWITCH_ROT_M_RTC_023_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_M_RTC_578_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_MRTC_01234_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_MRTC_56789_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_01234_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_56789_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HRTC_012_CC: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_REL_RTC_BUSY: in STD_LOGIC;
		SWITCH_ROT_TENS_SYNC_DK2: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_TENS_SYNC_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_UNITS_SYNC_DK2: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_UNITS_SYNC_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_SCAN_GATE_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_THOUS_SYNC_DK2: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_THOUS_SYNC_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HUNDS_SYNC_DK2: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_HUNDS_SYNC_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_ENTRY_DK3: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_SEL_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_MOM_ADDR_DISP: in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK5: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_ASTERISK_PL2: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_1_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_2_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_4_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_8_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_A_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_B_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_C_PL1: in STD_LOGIC;
		SWITCH_TOG_SENSE_SW_W_PL1: in STD_LOGIC;
		SWITCH_MOM_1ST_TST_SW_PL1: in STD_LOGIC;
		SWITCH_MOM_2ND_TST_SW_PL1: in STD_LOGIC;
		SWITCH_MOM_3RD_TST_SW_PL1: in STD_LOGIC;
		SWITCH_ALT_PRIORITY_PL1: in STD_LOGIC;
		SWITCH_ALT_PRIORITY_PL2: in STD_LOGIC;
		SWITCH_ROT_I_O_UNIT_DK1: in STD_LOGIC_VECTOR(5 downTo 0);
		SWITCH_ROT_MODE_SW_DK: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_MODE_SW_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_CH_1: in STD_LOGIC;
		SWITCH_TOG_CH_2: in STD_LOGIC;
		SWITCH_TOG_AUTO_START_PL1: in STD_LOGIC;
		SWITCH_ROT_ADDR_ENTRY_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_WR_INHIBIT_PL1: in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_CYCLE_CTRL_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_ENTRY_DKA: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_CHECK_CTRL_DK1: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_INHIBIT_PO_PL1: in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK4: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_ASTERISK_PL1: in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK3: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_ENTRY_DK2: in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_INHIBIT_PO_PL2: in STD_LOGIC;
		SWITCH_MOM_STARTPRINT: in STD_LOGIC;
		SWITCH_ROT_CYCLE_CTRL_DK2: in STD_LOGIC_VECTOR(5 downTo 0);
		PS_1ST_CLOCK_PULSE_1: out STD_LOGIC;
		PS_CLOCK_STOPPED_STAR_AUTS_STAR: out STD_LOGIC;
		PS_CLOCK_STOPPED: out STD_LOGIC;
		MS_CLOCK_STOPPED: out STD_LOGIC;
		MS_LOGIC_GATE_B_1: out STD_LOGIC;
		PS_LOGIC_GATE_C_1: out STD_LOGIC;
		MS_LOGIC_GATE_D_1: out STD_LOGIC;
		PS_LOGIC_GATE_D_1: out STD_LOGIC;
		PS_LOGIC_GATE_E_1: out STD_LOGIC;
		PS_LOGIC_GATE_B_OR_C: out STD_LOGIC;
		PS_LOGIC_GATE_D_OR_E_OR_F: out STD_LOGIC;
		PS_LOGIC_GATE_EARLY_B: out STD_LOGIC;
		PS_LOGIC_GATE_EARLY_B_OR_S: out STD_LOGIC;
		PS_I_CYCLE_1: out STD_LOGIC;
		PS_I_CYCLE_DOT_NOT_CR_DISABLE: out STD_LOGIC;
		MS_F_CYCLE_DOT_ANY_LAST_GATE: out STD_LOGIC;
		PS_E_CYCLE_CTRL: out STD_LOGIC;
		PS_E_CYCLE: out STD_LOGIC;
		PS_E_CYCLE_CTRL_STAR_1311: out STD_LOGIC;
		PS_F_CYCLE_CTRL: out STD_LOGIC;
		PS_F_CYCLE: out STD_LOGIC;
		PS_LAST_INSN_RO_CYCLE_2: out STD_LOGIC;
		MS_START_KEY: out STD_LOGIC;
		PS_RUN_OR_IE_MODE_STAR_AUTS_STAR: out STD_LOGIC;
		PS_BRANCH_TO_A_CONDITIONS: out STD_LOGIC;
		PS_E_CH_READY_BUS: out STD_LOGIC;
		MS_E_CH_NOT_READY: out STD_LOGIC;
		MS_COMPUTER_RESET_1: out STD_LOGIC;
		MS_COMPUTER_RESET_2: out STD_LOGIC;
		MC_COMP_RESET_TO_TAPE_STAR_E_CH: out STD_LOGIC;
		MC_E_CH_COMP_RESET_TO_1301: out STD_LOGIC;
		MC_E_CH_COMP_RESET_TO_1405: out STD_LOGIC;
		MC_COMP_RESET_TO_TAPE_STAR_F_CH: out STD_LOGIC;
		MC_F_CH_COMP_RESET_TO_1301: out STD_LOGIC;
		MC_F_CH_COMP_RESET_TO_1405: out STD_LOGIC;
		MC_COMP_RESET_TO_BUFFER: out STD_LOGIC;
		MS_PROGRAM_RESET_6: out STD_LOGIC;
		MS_PROGRAM_RESET_2: out STD_LOGIC;
		PS_1401_MODE: out STD_LOGIC;
		MS_1401_MODE: out STD_LOGIC;
		MC_1401_MODE_TO_1405: out STD_LOGIC;
		PS_OP_REG_ARS_C_BIT: out STD_LOGIC;
		PS_OP_REG_ARS_NOT_C_BIT: out STD_LOGIC;
		PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B: out STD_LOGIC;
		PS_OP_DCDR_B_DOT_A_DOT_8_B: out STD_LOGIC;
		PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B: out STD_LOGIC;
		PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B: out STD_LOGIC;
		PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_NOT_1_B: out STD_LOGIC;
		PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_1_B: out STD_LOGIC;
		PS_OP_DCDR_NOT_4_DOT_2_DOT_NOT_1_B: out STD_LOGIC;
		PS_OP_DCDR_4_DOT_2_DOT_NOT_1_B: out STD_LOGIC;
		PS_OP_DCDR_4_DOT_NOT_2_DOT_NOT_1_B: out STD_LOGIC;
		PS_OP_DCDR_4_DOT_2_DOT_1_B: out STD_LOGIC;
		PS_NOT_B_DOT_NOT_A_DOT_8_OP_MOD: out STD_LOGIC;
		PS_NOT_B_DOT_NOT_A_DOT_NOT_8_OP_MOD: out STD_LOGIC;
		PS_NOT_4_DOT_NOT_2_DOT_NOT_1_OP_MOD: out STD_LOGIC;
		PS_NOT_4_DOT_NOT_2_DOT_1_OP_MOD: out STD_LOGIC;
		PS_NOT_4_DOT_2_DOT_1_OP_MOD: out STD_LOGIC;
		PS_NOT_4_DOT_2_DOT_NOT_1_OP_MOD: out STD_LOGIC;
		PS_4_DOT_2_DOT_NOT_1_OP_MOD: out STD_LOGIC;
		PS_4_DOT_2_DOT_1_OP_MOD: out STD_LOGIC;
		PS_4_DOT_NOT_2_DOT_1_OP_MOD: out STD_LOGIC;
		PS_4_DOT_NOT_2_DOT_NOT_1_OP_MOD: out STD_LOGIC;
		PS_S_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_B_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_E_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_F_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_LOZ_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_R_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_PERCENT_SIGN_OP_MODIFIER: out STD_LOGIC;
		PS_A_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_RECORD_MARK_OP_MODIFIER: out STD_LOGIC;
		PS_C_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_D_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_L_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_EXCLAM_MK_OP_MODIFIER: out STD_LOGIC;
		PS_ONE_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_TWO_SYMBOL_OP_MODIFIER: out STD_LOGIC;
		PS_ASTERISK_OP_MODIFIER: out STD_LOGIC;
		MS_COND_TEST_BRANCH_OP_CODE: out STD_LOGIC;
		MS_INTERRUPT_TEST_OP_CODE: out STD_LOGIC;
		PS_M_OR_L_OP_CODES: out STD_LOGIC;
		MC_CPU_READY_TO_TID: out STD_LOGIC;
		PS_E_CH_DISCON_LATCH: out STD_LOGIC;
		PS_E_CH_DISCON_LATCH_JRJ: out STD_LOGIC;
		MC_E_CH_DISCON_TO_1301: out STD_LOGIC;
		MC_E_CH_DISCON_TO_1405: out STD_LOGIC;
		MS_E_CH_EXT_END_OF_TRANSFER: out STD_LOGIC;
		PS_I_O_COML_AT_LATCH: out STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK: out STD_LOGIC;
		PS_I_O_ASTERISK_LATCH: out STD_LOGIC;
		MC_UNIT_1_SELECT_TO_I_O: out STD_LOGIC;
		MC_UNIT_2_SELECT_TO_I_O: out STD_LOGIC;
		MC_UNIT_4_SELECT_TO_I_O: out STD_LOGIC;
		MC_UNIT_8_SEL_TO_I_O: out STD_LOGIC;
		MC_SELECT_UNIT_P: out STD_LOGIC;
		MC_SELECT_UNIT_D: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_K: out STD_LOGIC;
		MC_SELECT_UNIT_Q: out STD_LOGIC;
		MC_E_CH_SELECT_UNIT_R: out STD_LOGIC;
		MC_SELECT_UNIT_L: out STD_LOGIC;
		MC_E_CH_SELECT_UNIT_M: out STD_LOGIC;
		MC_SELECT_UNIT_N: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_F: out STD_LOGIC;
		MC_ODD_PARITY_TO_TAPE_STAR_E_CH: out STD_LOGIC;
		MC_UNIT_SEL_F_STAR_E_CH_1301: out STD_LOGIC;
		MC_UNIT_SEL_F_STAR_E_CH_1405: out STD_LOGIC;
		PS_E_CH_UNOVLP_IN_PROCESS: out STD_LOGIC;
		PS_E_CH_IN_PROCESS: out STD_LOGIC;
		MS_LOAD_CYCLE: out STD_LOGIC;
		PS_E_CH_INT_END_OF_TRANSFER: out STD_LOGIC;
		MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_E_CH: out STD_LOGIC;
		MS_F_CH_RESET: out STD_LOGIC;
		MS_F_CH_RESET_1: out STD_LOGIC;
		PS_F_CH_U_SEL_A_DOT_NOT_8_DOT_NOT_1: out STD_LOGIC;
		MC_ODD_PARITY_TO_TAPE_STAR_F_CH: out STD_LOGIC;
		PS_F_CH_SELECT_UNIT_F_LN_2: out STD_LOGIC;
		MC_UNIT_SEL_F_F_CH_1301: out STD_LOGIC;
		MC_UNIT_SELECT_F_STAR_F_CH_1405: out STD_LOGIC;
		PS_F_CH_UNOVLP_IN_PROCESS: out STD_LOGIC;
		PS_F_CH_IN_PROCESS: out STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_B: out STD_LOGIC;
		MS_E_CH_STATUS_SAMPLE_B_DELAY: out STD_LOGIC;
		PS_E_CH_SECOND_SAMPLE_B: out STD_LOGIC;
		MS_E_CH_STATUS_SAMPLE_B: out STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_B_DELAY: out STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_A: out STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_A_DELAY: out STD_LOGIC;
		PS_F_CH_CONDITION: out STD_LOGIC;
		MS_F_CH_CHECK: out STD_LOGIC;
		MS_F_CH_END_OF_RECORD_LATCH: out STD_LOGIC;
		PS_F_CH_INT_END_OF_TRANSFER: out STD_LOGIC;
		PS_F_CH_READY_BUS: out STD_LOGIC;
		MS_F_CH_NOT_READY: out STD_LOGIC;
		MS_F_CH_BUSY: out STD_LOGIC;
		MS_F_CH_WRONG_LENGTH_RECORD: out STD_LOGIC;
		MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_F_CH: out STD_LOGIC;
		MC_READ_TAPE_CALL_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_TAPE_CALL_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_TAPE_MK_CALL_STAR_F_CH: out STD_LOGIC;
		MC_ERASE_CALL_STAR_F_CH: out STD_LOGIC;
		MC_REWIND_UNLOAD_STAR_F_CH: out STD_LOGIC;
		MC_REWIND_CALL_STAR_F_CH: out STD_LOGIC;
		MC_BACKSPACE_CALL_STAR_F_CH: out STD_LOGIC;
		MC_DISCONNECT_CALL_STAR_F_CH: out STD_LOGIC;
		MC_TURN_OFF_TI_STAR_F_CH: out STD_LOGIC;
		MC_RESET_TAPE_SEL_REG_STAR_CH_F: out STD_LOGIC;
		MC_SET_TAPE_SEL_REG_STAR_CH_F: out STD_LOGIC;
		PS_F_CH_STATUS_SAMPLE_A_DELAY: out STD_LOGIC;
		PS_F_CH_STATUS_SAMPLE_A: out STD_LOGIC;
		PS_F_CH_STATUS_SAMPLE_B: out STD_LOGIC;
		PS_F_CH_SECOND_SAMPLE_B: out STD_LOGIC;
		PS_F_CH_STATUS_SAMPLE_B_1: out STD_LOGIC;
		MS_F_CH_INT_END_OF_XFER_DELAYED: out STD_LOGIC;
		PS_F_CH_STATUS_SAMPLE_B_DELAY: out STD_LOGIC;
		PS_F_CH_DISCON_LATCH: out STD_LOGIC;
		MC_F_CH_DISCON_TO_1301: out STD_LOGIC;
		MC_F_CH_DISCON_TO_1405: out STD_LOGIC;
		MS_F_CH_EXT_END_OF_TRANSFER: out STD_LOGIC;
		MS_1401_I_O_END: out STD_LOGIC;
		MC_CORRECT_TRANS_TO_BUFFER: out STD_LOGIC;
		MC_RESET_SELECT_BUFFER_LATCHES: out STD_LOGIC;
		MC_READY_TO_BUFFER: out STD_LOGIC;
		MC_1401_MODE_TO_BUFFER: out STD_LOGIC;
		MC_STACK_SELECT_TO_BUFFER: out STD_LOGIC;
		MC_FORMS_CTRL_TO_BUFFER: out STD_LOGIC;
		MC_FORMS_STACKER_GO: out STD_LOGIC;
		MC_TURN_OFF_TAPE_IND_STAR_E_CH: out STD_LOGIC;
		MC_RESET_TAPE_SEL_REG_STAR_E_CH: out STD_LOGIC;
		MC_SET_TAPE_SEL_REG_STAR_E_CH: out STD_LOGIC;
		MC_DISCONNECT_CALL_STAR_E_CH: out STD_LOGIC;
		MC_READ_TAPE_CALL_STAR_E_CH: out STD_LOGIC;
		MC_WRITE_TAPE_CALL_STAR_E_CH: out STD_LOGIC;
		MC_WRITE_TAPE_MK_CALL_STAR_E_CH: out STD_LOGIC;
		MC_ERASE_CALL_STAR_E_CH: out STD_LOGIC;
		MC_REWIND_UNLOAD_STAR_E_CH: out STD_LOGIC;
		MC_REWIND_CALL_STAR_E_CH: out STD_LOGIC;
		MC_BACKSPACE_CALL_STAR_E_CH: out STD_LOGIC;
		PS_E_CH_2ND_ADDR_TRF: out STD_LOGIC;
		MS_E_CH_END_OF_2ND_ADDR_TRF: out STD_LOGIC;
		MC_1405_START_GATE_STAR_E_CH: out STD_LOGIC;
		MC_1301_START_GATE_STAR_E_CH: out STD_LOGIC;
		MC_SEEK_TEST_OP_STAR_E_CH_TO_1405: out STD_LOGIC;
		MC_SEEK_TEST_OP_STAR_E_CH_TO_1301: out STD_LOGIC;
		MC_FILE_STROBE_1ST_ADDR_STAR_E_CH: out STD_LOGIC;
		MC_FILE_STROBE_2ND_ADDR_STAR_E_CH: out STD_LOGIC;
		MC_FILE_DIGIT_ADVANCE_STAR_E_CH: out STD_LOGIC;
		MC_FILE_ADDR_TRF_GATE_STAR_E_CH: out STD_LOGIC;
		MC_E_CH_RBCI_RESET_1405: out STD_LOGIC;
		PS_E_CH_NO_STATUS_ON: out STD_LOGIC;
		PS_F_CH_2ND_ADDR_TRF: out STD_LOGIC;
		PS_F_CH_END_OF_2ND_ADDR_TRF: out STD_LOGIC;
		MC_1301_START_GATE_STAR_F_CH: out STD_LOGIC;
		MC_1405_START_GATE_STAR_F_CH: out STD_LOGIC;
		MC_SEEK_TEST_OP_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_FILE_STROBE_1ST_ADDR_STAR_F_CH: out STD_LOGIC;
		MC_FILE_STROBE_2ND_ADDR_STAR_F_CH: out STD_LOGIC;
		MC_FILE_DIGIT_ADVANCE_STAR_F_CH: out STD_LOGIC;
		MC_FILE_ADDR_TRF_GATE_STAR_F_CH: out STD_LOGIC;
		MC_SEEK_TEST_OP_STAR_F_CH_TO_1301: out STD_LOGIC;
		MC_F_CH_RBCI_RESET_1405: out STD_LOGIC;
		PS_F_CH_NO_TRANSFER_LATCH: out STD_LOGIC;
		PS_F_CH_NO_STATUS_ON: out STD_LOGIC;
		MS_F_CH_NO_TRANSFER_LATCH: out STD_LOGIC;
		MY_MEM_AR_NOT_TTHP4B: out STD_LOGIC;
		PS_ADDRESS_STOP: out STD_LOGIC;
		PS_OPTIONAL_SYNC_COND_CE: out STD_LOGIC;
		MC_UNIT_NU_0_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_SELECT_NO_0_TO_BUFFER: out STD_LOGIC;
		MC_SEEK_STAR_E_CH_1405: out STD_LOGIC;
		MC_UNIT_NU_1_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MS_E_CH_UNIT_NUMBER_1: out STD_LOGIC;
		MC_SELECT_NO_1_TO_BUFFER: out STD_LOGIC;
		MC_SINGLE_REC_STAR_E_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_2_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_SELECT_NO_2_TO_BUFFER: out STD_LOGIC;
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_E_CH: out STD_LOGIC;
		MC_UNIT_NU_3_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_SELECT_NO_3_TO_BUFFER: out STD_LOGIC;
		MC_WRITE_CHECK_STAR_E_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_4_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_WRITE_ADDR_STAR_E_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_5_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_UNIT_NU_6_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_UNIT_NU_7_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_UNIT_NU_8_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MC_UNIT_NU_9_TO_TAU_STAR_E_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_0: out STD_LOGIC;
		MC_UNIT_NU_0_TO_TAU_STAR_F_CH: out STD_LOGIC;
		PS_F_CH_UNIT_NUMBER_0: out STD_LOGIC;
		MC_SEEK_STAR_F_CH_1405: out STD_LOGIC;
		MC_UNIT_NU_1_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_1: out STD_LOGIC;
		PS_F_CH_UNIT_NUMBER_1: out STD_LOGIC;
		MC_SINGLE_REC_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_2_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_2: out STD_LOGIC;
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_3: out STD_LOGIC;
		MC_UNIT_NU_3_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_CHECK_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_4_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_ADDR_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_5_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_6_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_7_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_8_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_9_TO_TAU_STAR_F_CH: out STD_LOGIC;
		PS_E_CH_OUTPUT_MODE: out STD_LOGIC;
		PS_E_CH_INPUT_MODE: out STD_LOGIC;
		MC_OUTPUT_MODE_TO_BUFFER: out STD_LOGIC;
		MC_INPUT_MODE_TO_BUFFER: out STD_LOGIC;
		MC_OUTPUT_OP_TO_1301_STAR_E_CH: out STD_LOGIC;
		MC_OUTPUT_OP_TO_1405_STAR_E_CH: out STD_LOGIC;
		MC_INPUT_OP_TO_1405_STAR_E_CH: out STD_LOGIC;
		MC_INPUT_OP_TO_1301_STAR_E_CH: out STD_LOGIC;
		MS_E_CH_MOVE_MODE: out STD_LOGIC;
		MS_E_CH_LOAD_MODE: out STD_LOGIC;
		MS_E_CH_INTERLOCK: out STD_LOGIC;
		MC_LOAD_MODE_TO_1301_STAR_E_CH: out STD_LOGIC;
		MC_LOAD_MODE_TO_1405_STAR_E_CH: out STD_LOGIC;
		PS_SET_E2_REG: out STD_LOGIC;
		PS_SET_E1_REG: out STD_LOGIC;
		PS_F_CH_OUTPUT_MODE: out STD_LOGIC;
		PS_F_CH_INPUT_MODE: out STD_LOGIC;
		MS_INPUT_MODE_F_CH: out STD_LOGIC;
		MC_INPUT_OP_TO_1405_STAR_F_CH: out STD_LOGIC;
		MC_INPUT_OP_TO_1301_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_INPUT_MODE: out STD_LOGIC;
		MC_OUTPUT_OP_TO_1405_STAR_F_CH: out STD_LOGIC;
		MC_OUTPUT_OP_TO_1301_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_LOAD_MODE: out STD_LOGIC;
		PS_F_CH_INTERLOCK: out STD_LOGIC;
		MC_LOAD_MODE_TO_1301_STAR_F_CH: out STD_LOGIC;
		MC_LOAD_MODE_TO_1405_STAR_F_CH: out STD_LOGIC;
		PS_SET_F1_REG: out STD_LOGIC;
		PS_SET_F2_REG: out STD_LOGIC;
		TW_CPU_TO_F_CH_TAU_C_BIT: out STD_LOGIC;
		MS_MASTER_ERROR: out STD_LOGIC;
		MS_MASTER_ERROR_STAR_AUTS_STAR: out STD_LOGIC;
		PS_MASTER_ERROR: out STD_LOGIC;
		PS_INTERRUPT_REQ_STAR_AUTS_STAR: out STD_LOGIC;
		PS_Y_OP_DOT_TEST_RESET: out STD_LOGIC;
		PS_INTERRUPT_TEST_OP_CODE: out STD_LOGIC;
		MS_I_OP_DOT_I_CYCLE_DOT_C: out STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E: out STD_LOGIC;
		MY_MEM_AR_NOT_TP0B_JRJ: out STD_LOGIC;
		MY_MEM_AR_NOT_TP1B_JRJ: out STD_LOGIC;
		MY_MEM_AR_NOT_TP2B_JRJ: out STD_LOGIC;
		MY_MEM_AR_NOT_TP8B_JRJ: out STD_LOGIC;
		MY_MEM_AR_NOT_TP4B_JRJ: out STD_LOGIC;
		MV_GATE_X_LSMS_YY00_09_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY00_09_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY10_19_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY10_19_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY20_29_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY20_29_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY30_39_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY30_39_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY40_49_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY40_49_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY50_59_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY50_59_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY60_60_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY60_69_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY70_79_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY70_79_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY80_89_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY80_89_B: out STD_LOGIC;
		MV_GATE_X_LSMS_YY90_99_A: out STD_LOGIC;
		MV_GATE_X_LSMS_YY90_99_B: out STD_LOGIC;
		MY_MEM_AR_NOT_HP8B_Z: out STD_LOGIC;
		MY_MEM_AR_NOT_HP4B_Z: out STD_LOGIC;
		MY_MEM_AR_NOT_HP2B_Z: out STD_LOGIC;
		MY_MEM_AR_NOT_HP1B_Z: out STD_LOGIC;
		MY_MEM_AR_NOT_HP0B_Z: out STD_LOGIC;
		MY_GATE_Y_LSMS_00_09XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_00_09XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_10_19XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_10_19XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_20_29XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_20_29XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_30_39XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_30_39XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_40_49XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_40_49XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_50_59XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_50_59XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_60_69XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_60_69XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_70_79XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_70_79XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_80_89XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_80_89XX_B: out STD_LOGIC;
		MY_GATE_Y_LSMS_90_99XX_A: out STD_LOGIC;
		MY_GATE_Y_LSMS_90_99XX_B: out STD_LOGIC;
		MY_X_RD_1: out STD_LOGIC;
		MY_B_DATA_REG_RESET: out STD_LOGIC;
		PY_START_READ: out STD_LOGIC;
		MY_X_WR_1: out STD_LOGIC;
		PY_START_WRITE: out STD_LOGIC;
		MY_LOAD_MEMORY_Z: out STD_LOGIC;
		MY_REGEN_MEMORY_Z: out STD_LOGIC;
		PY_1ST_CHECK_TEST_Z: out STD_LOGIC;
		PY_2ND_CHECK_TEST_Z: out STD_LOGIC;
		PY_COMPUTER_RESET: out STD_LOGIC;
		PS_DENSITY_SW_556_OR_200_CH_1: out STD_LOGIC;
		PS_DENSITY_SW_800_OR_556_CH_1: out STD_LOGIC;
		PS_DENSITY_SW_556_OR_200_CH_2: out STD_LOGIC;
		PS_DENSITY_SW_800_OR_556_CH_2: out STD_LOGIC;
		MC_DISK_WRITE_NORMAL_STAR_F_CH: out STD_LOGIC;
		MC_DISK_WRITE_NORMAL_STAR_E_CH: out STD_LOGIC;
		MS_CONSOLE_INHIBIT_AR_RO: out STD_LOGIC;
		PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR: out STD_LOGIC;
		PS_CONS_CLOCK_1_POS: out STD_LOGIC;
		PS_CONS_CLOCK_3_POS_1: out STD_LOGIC;
		MS_CONSOLE_CHECK_STROBE: out STD_LOGIC;
		PW_UPPER_CASE_SHIFT_SOLENOID: out STD_LOGIC;
		PW_LOWER_CASE_SHIFT_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_R1_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_R2A_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_R2_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_R5_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_T1_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_T2_SOLENOID: out STD_LOGIC;
		PW_CONS_PRINTER_CHK_SOLENOID: out STD_LOGIC;
		PW_BACKSPACE_SOLENOID: out STD_LOGIC;
		PW_CARRIAGE_RETURN_SOLENOID: out STD_LOGIC;
		PW_SPACE_SOLENOID: out STD_LOGIC;
		MW_KEYBOARD_LOCK_SOLENOID: out STD_LOGIC;
		LAMP_15A1K24: out STD_LOGIC;
		LAMP_15A1A16: out STD_LOGIC;
		LAMP_15A1C16: out STD_LOGIC;
		LAMP_15A1E16: out STD_LOGIC;
		LAMP_15A1F16: out STD_LOGIC;
		LAMP_15A1K23: out STD_LOGIC;
		LAMP_15A1H14: out STD_LOGIC;
		LAMP_15A1K14: out STD_LOGIC;
		LAMP_15A1H16: out STD_LOGIC;
		LAMP_15A1K15: out STD_LOGIC;
		LAMP_15A1H15: out STD_LOGIC;
		LAMP_15A1E17: out STD_LOGIC;
		LAMP_15A1F17: out STD_LOGIC;
		LAMP_15A1A17: out STD_LOGIC;
		LAMP_15A1C17: out STD_LOGIC;
		LAMP_15A1H17: out STD_LOGIC;
		LAMP_15A1B14: out STD_LOGIC;
		LAMP_15A1K16: out STD_LOGIC;
		LAMP_15A1C15: out STD_LOGIC;
		LAMP_15A1K17: out STD_LOGIC;
		LAMP_15A1E21: out STD_LOGIC;
		LAMP_11C8K07: out STD_LOGIC;
		LAMP_11C8J07: out STD_LOGIC;
		LAMP_11C8H07: out STD_LOGIC;
		LAMP_11C8G07: out STD_LOGIC;
		LAMP_11C8F07: out STD_LOGIC;
		LAMP_11C8A02: out STD_LOGIC;
		LAMP_11C8B02: out STD_LOGIC;
		LAMP_11C8A01: out STD_LOGIC;
		LAMP_11C8B01: out STD_LOGIC;
		LAMP_15A1K20: out STD_LOGIC;
		LAMP_11C8C14: out STD_LOGIC;
		LAMP_11C8D14: out STD_LOGIC;
		LAMP_11C8E14: out STD_LOGIC;
		LAMP_11C8F14: out STD_LOGIC;
		LAMP_15A1E14: out STD_LOGIC;
		LAMP_15A1F14: out STD_LOGIC;
		LAMP_15A1A14: out STD_LOGIC;
		LAMP_15A1E15: out STD_LOGIC;
		LAMP_15A1F15: out STD_LOGIC;
		LAMP_15A1A15: out STD_LOGIC;
		LAMP_15A1C11: out STD_LOGIC;
		LAMP_15A1K12: out STD_LOGIC;
		LAMP_15A1F11: out STD_LOGIC;
		LAMP_15A1E11: out STD_LOGIC;
		LAMP_15A1A11: out STD_LOGIC;
		LAMP_15A1G08: out STD_LOGIC;
		LAMP_15A1H08: out STD_LOGIC;
		LAMP_15A1J08: out STD_LOGIC;
		LAMP_15A1K08: out STD_LOGIC;
		LAMP_15A1H12: out STD_LOGIC;
		LAMP_15A1F12: out STD_LOGIC;
		LAMP_15A1A12: out STD_LOGIC;
		LAMP_15A1E12: out STD_LOGIC;
		LAMP_15A1C12: out STD_LOGIC;
		LAMP_11C8A12: out STD_LOGIC;
		LAMP_15A1A19: out STD_LOGIC;
		LAMP_11C8A13: out STD_LOGIC;
		LAMP_15A1C19: out STD_LOGIC;
		LAMP_15A1B19: out STD_LOGIC;
		LAMP_11C8A10: out STD_LOGIC;
		LAMP_15A1H20: out STD_LOGIC;
		LAMP_15A1H19: out STD_LOGIC;
		LAMP_15A1F19: out STD_LOGIC;
		LAMP_11C8A07: out STD_LOGIC;
		LAMP_15A1E20: out STD_LOGIC;
		LAMP_15A1F20: out STD_LOGIC;
		LAMP_15A1C20: out STD_LOGIC;
		LAMP_15A1V01: out STD_LOGIC;
		LAMP_15A1B15: out STD_LOGIC;
		LAMP_15A1W01: out STD_LOGIC;
		LAMP_15A1W04: out STD_LOGIC;
		LAMP_15A2K03: out STD_LOGIC;
		LAMP_15A2K05: out STD_LOGIC;
		LAMP_15A1K22: out STD_LOGIC;
		LAMP_15A1K21: out STD_LOGIC;
		LAMP_11C8A04: out STD_LOGIC;
		LAMP_11C8B05: out STD_LOGIC;
		LAMP_11C8B04: out STD_LOGIC;
		LAMP_11C8A05: out STD_LOGIC;
		PS_I_RING_HDL_BUS: out STD_LOGIC_VECTOR (12 downTo 0);
		PS_OP_MOD_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_OP_MOD_REG_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_MEM_AR_NOT_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_TTHP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PS_A_CH_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_ASSEMBLY_CH_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_E_CH_UNIT_STAR_1301_STAR_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_E_CH_U_SEL_REG_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_E_CH_U_SEL_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_UNIT_STAR_1301_STAR_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_F_CH_U_SEL_REG_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_F_CH_U_SEL_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_E2_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_E_CH_TAU_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_I_O_SYNC_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_E_CH_1301_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_E_CH_1405_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_F2_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MS_F2_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_F_CH_TAU_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_F_CH_1301_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MC_CPU_TO_F_CH_1405_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PV_X_LSMS_DRV_IN_BUS: out STD_LOGIC_VECTOR (15 downTo 0);
		PV_Y_LSMS_DRV_IN_BUS: out STD_LOGIC_VECTOR (15 downTo 0);
		MV_INH_CHAR_0_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_0_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_1_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_1_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_2_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_2_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_3_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_3_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_ASSEMBLY_CH_Z_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_LOGIC_GATE_RING: out STD_LOGIC_VECTOR (10 downTo 1);
		LAMPS_IRING: out STD_LOGIC_VECTOR (12 downTo 0);
		LAMPS_CYCLE_CE: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_CYCLE_CONSOLE: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_SCAN: out STD_LOGIC_VECTOR (3 downTo 0);
		LAMPS_OPREG_CE: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_OPMOD_CE: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_MAR_UP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_TP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_HP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_THP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_TTHP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_ARING: out STD_LOGIC_VECTOR (6 downTo 1);
		LAMPS_B_CH: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_A_CH: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_ASSM_CH_NOT: out STD_LOGIC_VECTOR (7 downTo 0);
		LAMPS_ASSM_CH: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

   component debounce IS
      GENERIC(
         clk_freq    : INTEGER := 100000000;  --system clock frequency in Hz
         stable_time : INTEGER := 10);         --time button must remain stable in ms
      PORT(
         clk     : IN  STD_LOGIC;  --input clock
         reset_n : IN  STD_LOGIC;  --asynchronous active low reset
         button  : IN  STD_LOGIC;  --input signal to be debounced
         result  : OUT STD_LOGIC); --debounced signal
   END component;

   component IBM1410Memory is
   Port (
      FPGA_CLK: in STD_LOGIC;
      MY_X_RD_1: in STD_LOGIC;
      MY_X_WR_1: in STD_LOGIC;
      MY_MEM_AR_NOT_UP_BUS: in STD_LOGIC_VECTOR(4 downto 0);
      MY_MEM_AR_NOT_TP_BUS: in STD_LOGIC_VECTOR(4 downto 0);
      MY_MEM_AR_NOT_HP_BUS: in STD_LOGIC_VECTOR(4 downto 0);
      MY_MEM_AR_NOT_THP_BUS: in STD_LOGIC_VECTOR(4 downto 0);
      MY_MEM_AR_NOT_TTHP_BUS: in STD_LOGIC_VECTOR(4 downto 0);
      MV_INH_CHAR_0_B1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_0_D1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_1_B1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_1_D1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_2_B1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_2_D1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_3_B1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      MV_INH_CHAR_3_D1_BUS: in STD_LOGIC_VECTOR(7 downto 0);
      PV_SENSE_CHAR_0_BUS: out STD_LOGIC_VECTOR(7 downto 0);
      PV_SENSE_CHAR_1_BUS: out STD_LOGIC_VECTOR(7 downto 0);
      PV_SENSE_CHAR_2_BUS: out STD_LOGIC_VECTOR(7 downto 0);
      PV_SENSE_CHAR_3_BUS: out STD_LOGIC_VECTOR(7 downto 0);
      
      IBM1410_DIRECT_MEMORY_ADDRESS:      in STD_LOGIC_VECTOR(13 downto 0);
      IBM1410_DIRECT_MEMORY_ENABLE:       in STD_LOGIC_VECTOR(3 downto 0);
      IBM1410_DIRECT_MEMORY_WRITE_ENABLE: in STD_LOGIC_VECTOR(3 downto 0);
      IBM1410_DIRECT_MEMORY_WRITE_DATA:   in STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_DIRECT_MEMORY_READ_DATA_0:    out STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_DIRECT_MEMORY_READ_DATA_1:    out STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_DIRECT_MEMORY_READ_DATA_2:    out STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_DIRECT_MEMORY_READ_DATA_3:    out STD_LOGIC_VECTOR(7 downto 0) );
      
   end component;

   component IBM1410ConsoleTypewriter is
   GENERIC(FAST_MULTIPLIER: integer := 100;
           SLOW_MULTIPLIER: integer := 100);
   PORT (
      FPGA_CLK: in STD_LOGIC;
      UART_RESET: in STD_LOGIC;
      SLOW_TYPING: in STD_LOGIC;

      PW_CONS_PRINTER_R1_SOLENOID: in STD_LOGIC;      
      PW_CONS_PRINTER_R2_SOLENOID: in STD_LOGIC;
      PW_CONS_PRINTER_R2A_SOLENOID: in STD_LOGIC;
      PW_CONS_PRINTER_R5_SOLENOID: in STD_LOGIC;
      PW_CONS_PRINTER_T1_SOLENOID: in STD_LOGIC;
      PW_CONS_PRINTER_T2_SOLENOID: in STD_LOGIC;

      PW_UPPER_CASE_SHIFT_SOLENOID: in STD_LOGIC;
      PW_LOWER_CASE_SHIFT_SOLENOID: in STD_LOGIC;
      PW_BACKSPACE_SOLENOID: in STD_LOGIC;
      PW_SPACE_SOLENOID: in STD_LOGIC;
      PW_CARRIAGE_RETURN_SOLENOID: in STD_LOGIC;      

      MW_KEYBOARD_LOCK_SOLENOID: in STD_LOGIC;
      PW_CONS_PRINTER_CHK_SOLENOID: in STD_LOGIC;
      
      MV_CONS_PRINTER_C1_CAM_NO: out STD_LOGIC;
      MV_CONS_PRINTER_C1_CAM_NC: out STD_LOGIC;
      MV_CONS_PRINTER_C2_CAM_NC: out STD_LOGIC;
      MV_CONS_PRINTER_C2_CAM_NO: out STD_LOGIC;
      MV_CONS_PRINTER_C3_OR_C4_NO: out STD_LOGIC;

      MV_CONS_PRINTER_SPACE_NO: out STD_LOGIC;
      
      MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC: out STD_LOGIC;
      MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO: out STD_LOGIC;
      MB_CONS_PRINTER_EVEN_BIT_CHECK: out STD_LOGIC;
      MV_CONS_PRINTER_ODD_BIT_CHECK: out STD_LOGIC; 
      MV_KEYBOARD_LOCK_MODE_STAR_NO: out STD_LOGIC;
      MV_KEYBOARD_UNLOCK_MODE: out STD_LOGIC;
      
      MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO: out STD_LOGIC;
      MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO: out STD_LOGIC;
      PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC: out STD_LOGIC;
      MV_CONS_PRINTER_LAST_COLUMN_SET: out STD_LOGIC;
      
      MV_CONS_PRTR_TO_CPU_BUS: out STD_LOGIC_VECTOR(5 downto 0);
      MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO: out STD_LOGIC;
      MV_CONSOLE_C_INPUT_STAR_CHK_OP: out STD_LOGIC;
      
      -- Console Output UART support -- characters
      
      IBM1410_CONSOLE_XMT_CHAR: out STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_CONSOLE_XMT_STROBE: out STD_LOGIC;
      
      -- Console Input Output support -- keyboard lock
      
      IBM1410_CONSOLE_LOCK_XMT_CHAR: out STD_LOGIC_VECTOR(7 downto 0);
      IBM1410_CONSOLE_LOCK_XMT_STROBE: out STD_LOGIC;

       -- Console Input UART
       
       IBM1410_CONSOLE_INPUT_FIFO_WRITE_ENABLE: in STD_LOGIC;
       IBM1410_CONSOLE_INPUT_FIFO_WRITE_DATA: in STD_LOGIC_VECTOR(7 downto 0)
       );
      
   end component;
   
   -- Component for an IBM 1414 Tape Adapter Unit (TAU)
   
   component IBM1410TapeAdapterUnit is
  
      GENERIC(
          CHANNEL_STROBE_LENGTH: integer;
          CHANNEL_CYCLE_LENGTH: integer;
          TAU_IRG_DELAY:        integer;
          TAU_WRITE_RBC_DELAY:  integer;
          TAU_OUTPUT_FIFO_SIZE: integer );
      PORT (
          FPGA_CLK: in STD_LOGIC;
        
          -- TAU Input Signals From CPU
       
          MC_CPU_TO_TAU_BUS: in STD_LOGIC_VECTOR(7 downto 0);       
       
          MC_COMP_RESET_TO_TAPE: in STD_LOGIC;
          MC_WRITE_TAPE_CALL: in STD_LOGIC;
          MC_WRITE_TAPE_MK_CALL: in STD_LOGIC;
          MC_ERASE_CALL: in STD_LOGIC;
          MC_REWIND_UNLOAD: in STD_LOGIC;
          MC_REWIND_CALL: in STD_LOGIC;
          MC_BACKSPACE_CALL: in STD_LOGIC;
          MC_TURN_OFF_TAPE_IND: in STD_LOGIC;
          MC_RESET_TAPE_SEL_REG: in STD_LOGIC;
          MC_SET_TAPE_SEL_REG: in STD_LOGIC;
          MC_DISCONNECT_CALL: in STD_LOGIC;
          MC_READ_TAPE_CALL: in STD_LOGIC;
          MC_ODD_PARITY_TO_TAPE: in STD_LOGIC;
       
          MC_UNIT_NU_0_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_1_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_2_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_3_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_4_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_5_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_6_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_7_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_8_TO_TAU: in STD_LOGIC;
          MC_UNIT_NU_9_TO_TAU: in STD_LOGIC;       
            
          -- TAU Output Signals to CPU
       
          MC_TAU_TO_CPU_BUS: out STD_LOGIC_VECTOR(7 downto 0);

          MC_WRITE_CONDITION: out STD_LOGIC;
          MC_SELECT_AND_REWIND: out STD_LOGIC;
          MC_SELECT_AT_LOAD_POINT: out STD_LOGIC;
          MC_SEL_OR_TAPE_IND_ON: out STD_LOGIC;
       
          MC_TAPE_READ_STROBE: out STD_LOGIC;
          MC_TAPE_BUSY: out STD_LOGIC;
          MC_TAPE_ERROR: out STD_LOGIC;
          MC_TAPE_READY: out STD_LOGIC;
          MC_TAPE_WRITE_STROBE: out STD_LOGIC;
          MC_TAPE_IN_PROCESS: out STD_LOGIC;
      
          -- TAU to PC Support System
       
          IBM1410_TAU_XMT_UART_DATA: out STD_LOGIC_VECTOR(7 downto 0);
          IBM1410_TAU_XMT_UART_REQUEST: out STD_LOGIC;
          IBM1410_TAU_XMT_UART_GRANT: in STD_LOGIC;    
          IBM1410_TAU_XMT_UDP_FLUSH: out STD_LOGIC;   
              
          -- PC Support System to TAU 
       
          IBM1410_TAU_INPUT_FIFO_WRITE_ENABLE: in STD_LOGIC;
          IBM1410_TAU_INPUT_FIFO_WRITE_DATA: in STD_LOGIC_VECTOR(7 downto 0)       
      );
    
end component;
     
   -- Component to allow directly writing into 1410 memory from console app.
   
   component IBM1410_MEMORY_LOADER_RECEIVER
      Port ( FPGA_CLK : in STD_LOGIC;
             RESET : in STD_LOGIC;
             LOADER_FIFO_WRITE_ENABLE : in STD_LOGIC;
             LOADER_FIFO_WRITE_DATA : in STD_LOGIC_VECTOR (7 downto 0);
             IBM1410_DIRECT_MEMORY_ADDRESS: out STD_LOGIC_VECTOR(13 downto 0);
             IBM1410_LOADER_DIRECT_MEMORY_ENABLE:  out STD_LOGIC_VECTOR(3 downto 0);
             IBM1410_LOADER_DIRECT_MEMORY_WRITE_ENABLE:  out STD_LOGIC_VECTOR(3 downto 0);
             IBM1410_DIRECT_MEMORY_WRITE_DATA: out STD_LOGIC_VECTOR(7 downto 0);
             IBM1410_MEMORY_LOADER_DEBUG_VECTOR: out STD_LOGIC_VECTOR(4 downto 0)
       );
    end component;

   component IBM1410_UART_OUTPUT_SUBSYSTEM is
   Generic (
       UART_OUTPUT_CLKS_PER_BIT: integer := 100000000 / 115200
    );
    Port ( FPGA_CLK : in STD_LOGIC;
           UART_RESET: in STD_LOGIC;
           UART_OUTPUT_REQUESTER_STROBES : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_0 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_1 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_2 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_3 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_4 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_5 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_6 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_REQUEST_DATA_7 : in STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_ARBITER_REQUESTS : out STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_ARBITER_GRANTS: out STD_LOGIC_VECTOR (7 downto 0);
           UART_OUTPUT_TX_DATA : out STD_LOGIC);
   end component;

   component IBM1410_UART_INPUT_SUBSYSTEM is
    GENERIC (
       CLOCKS_PER_BIT: Integer := 200;
       UART_INPUT_FIFO_COUNT: Integer := 8
       );
    Port ( 
       FPGA_CLK: in STD_LOGIC;
       RESET: in STD_LOGIC;
       UART_RX_DATA: in STD_LOGIC;
       UART_INPUT_FIFO_WRITE_ENABLE : out STD_LOGIC_VECTOR (UART_INPUT_FIFO_COUNT-1 downto 0);
       UART_INPUT_FIFO_WRITE_DATA: out STD_LOGIC_VECTOR(7 downto 0);
       UART_INPUT_CURRENT_STREAM: out STD_LOGIC_VECTOR(7 downto 0) 
       );
   end component;

component IBM1410_UDP_INPUT_SUBSYSTEM is

    GENERIC (
       UDP_INPUT_FIFO_COUNT: Integer := 8
       );
    Port ( 
       FPGA_CLK: in STD_LOGIC;
       RESET: in STD_LOGIC;
       -- Interface to UART-LIKE UDP INTERFACE
       UDP_UART_RX_DATA_READY: out STD_LOGIC;  -- Indicates this component ready for data
       UDP_UART_RX_DATA_VALID: in  STD_LOGIC;  -- Indicates a byte of UDP data available
       UDP_UART_RX_BYTE: in STD_LOGIC_VECTOR(7 downto 0); -- A byte of UDP data
       UDP_UART_RX_PACKET_END: in STD_LOGIC;   -- Indicates end of packet (not currently used)
       -- Interface to the IBM 1410 FPGA I/O components.  They are required to have FIFOs
       -- large enough that this component does NOT need to wait for them
       UDP_INPUT_FIFO_WRITE_ENABLE : out STD_LOGIC_VECTOR (UDP_INPUT_FIFO_COUNT-1 downto 0);
       UDP_INPUT_FIFO_WRITE_DATA: out STD_LOGIC_VECTOR(7 downto 0);
       UDP_INPUT_CURRENT_STREAM: out STD_LOGIC_VECTOR(7 downto 0) 
       );
end component;


component IBM1410_UDP_OUTPUT_SUBSYSTEM is
    GENERIC (
       SIMULATED_UART: integer := 1
    );
    Port ( FPGA_CLK                     : in STD_LOGIC;
           UDP_RESET                    : in STD_LOGIC;
           UDP_OUTPUT_REQUESTER_STROBES : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUESTER_FLUSHES : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_0    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_1    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_2    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_3    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_4    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_5    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_6    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_REQUEST_DATA_7    : in STD_LOGIC_VECTOR (7 downto 0);
           UDP_OUTPUT_ARBITER_REQUESTS  : out STD_LOGIC_VECTOR(7 downto 0);
           UDP_OUTPUT_ARBITER_GRANTS    : out STD_LOGIC_VECTOR(7 downto 0);
           -- UDP UART-like interface signals
           UDP_UART_TX_ACTIVE           : in STD_LOGIC;
           UDP_UART_TX_DATA_VALID       : out STD_LOGIC;
           UDP_UART_TX_BYTE             : out STD_LOGIC_VECTOR(7 downto 0);
           UDP_UART_TX_FLUSH            : out STD_LOGIC;
           -- Fake serial output from internal uart, for testing
           SERIAL_OUTPUT_TX_DATA : out STD_LOGIC);
   end component;
   
component IBM1410_UDP_OUTPUT_UART_TX is
    Generic (
        MAX_UDP_PACKET_SIZE:            integer := 20  -- Eventually, 1400
    );
    Port (FPGA_CLOCK:                   in std_logic;
          UDP_UART_RESET:               in std_logic;
          -- UDP Side Interface 
          tx_udp_hdr_ready:             in std_logic;
          tx_udp_payload_axis_tready:   in std_logic;
          tx_udp_hdr_valid:             out std_logic;
          tx_udp_payload_axis_tvalid:   out std_logic;
          tx_udp_payload_axis_tdata:    out std_logic_vector(7 downto 0);
          tx_udp_payload_axis_tlast:    out std_logic;
          -- UART-like Interface
          UDP_UART_TX_DATA_VALID:       in std_logic;
          UDP_UART_TX_FLUSH:            in std_logic;
          UDP_UART_TX_BYTE:             in std_logic_vector(7 downto 0);
          UDP_UART_TX_ACTIVE:           out std_logic
           );
end component;
 
component IBM1410_UDP_INPUT_UART_RX is
    Port (FPGA_CLOCK:                   in std_logic;
          UDP_UART_RESET:               in std_logic;
          -- UDP Side Interface 
          rx_match_cond:                in std_logic;
          rx_udp_hdr_ready:             out std_logic;
          rx_udp_hdr_valid:             in std_logic;
          rx_udp_payload_axis_tready:   out std_logic;
          rx_udp_payload_axis_tvalid:   in std_logic;
          rx_udp_payload_axis_tdata:    in std_logic_vector(7 downto 0);
          rx_udp_payload_axis_tlast:    in std_logic;
          -- UART-like Interface
          UDP_UART_RX_DATA_READY:       in std_logic;
          UDP_UART_RX_DATA_VALID:       out std_logic;
          UDP_UART_RX_BYTE:             out std_logic_vector(7 downto 0);
          UDP_UART_RX_PACKET_END:       out std_logic
    );
end component;   
            
component mii_to_rmii_0 IS
   PORT(
      rst_n : IN STD_LOGIC;
      ref_clk : IN STD_LOGIC;
      mac2rmii_tx_en : IN STD_LOGIC;
      mac2rmii_txd : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      mac2rmii_tx_er : IN STD_LOGIC;
      rmii2mac_tx_clk : OUT STD_LOGIC;
      rmii2mac_rx_clk : OUT STD_LOGIC;
      rmii2mac_col : OUT STD_LOGIC;
      rmii2mac_crs : OUT STD_LOGIC;
      rmii2mac_rx_dv : OUT STD_LOGIC;
      rmii2mac_rx_er : OUT STD_LOGIC;
      rmii2mac_rxd : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      phy2rmii_crs_dv : IN STD_LOGIC;
      phy2rmii_rx_er : IN STD_LOGIC;
      phy2rmii_rxd : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      rmii2phy_txd : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      rmii2phy_tx_en : OUT STD_LOGIC
   );
END component mii_to_rmii_0;

component udp_fpga is
   PORT (
      clk:            IN STD_LOGIC;
      reset_n:        IN STD_LOGIC;
      mmcm_locked:   OUT STD_LOGIC;

      debug_leds:    OUT STD_LOGIC_VECTOR(7 downto 0);
      --RGB2_Red:        OUT STD_LOGIC;
      --RGB2_Green:      OUT STD_LOGIC;
      --RGB2_Blue:       OUT STD_LOGIC;
      
      -- 100Base-T MII
      
      phy_ref_clk:   OUT STD_LOGIC;
      phy_rx_clk:     IN STD_LOGIC;
      phy_rxd:        IN STD_LOGIC_VECTOR(3 downto 0);
      phy_rx_dv:      IN STD_LOGIC;
      phy_rx_er:      IN STD_LOGIC;
      phy_tx_clk:     IN STD_LOGIC;
      phy_txd:       OUT STD_LOGIC_VECTOR(3 downto 0);
      phy_tx_en:     OUT STD_LOGIC;
      phy_col:        IN STD_LOGIC;
      phy_crs:        IN STD_LOGIC;
      phy_reset_n:   OUT STD_LOGIC;
      
      -- Ethernet Configuration inputs
      
      local_mac:      IN STD_LOGIC_VECTOR(47 downto 0);
      
      -- IP Configuration inputs
      
      local_ip:       IN STD_LOGIC_VECTOR(31 downto 0);
      gateway_ip:     IN STD_LOGIC_VECTOR(31 downto 0);
      subnet_mask:    IN STD_LOGIC_VECTOR(31 downto 0);
      remote_ip:      IN STD_LOGIC_VECTOR(31 downto 0);
      
      -- UDP IN from Network
      
      rx_udp_hdr_ready:  IN STD_LOGIC;
      rx_udp_hdr_valid: OUT STD_LOGIC;
      rx_match_cond:     IN STD_LOGIC;
      
      rx_udp_ip_source_ip:  OUT STD_LOGIC_VECTOR(31 downto 0);
      rx_udp_ip_dest_ip:    OUT STD_LOGIC_VECTOR(31 downto 0);
      rx_udp_source_port:   OUT STD_LOGIC_VECTOR(15 downto 0);
      rx_udp_dest_port:     OUT STD_LOGIC_VECTOR(15 downto 0);
      rx_udp_length:        OUT STD_LOGIC_VECTOR(15 downto 0);
      
      rx_udp_payload_axis_tready:  IN STD_LOGIC;
      rx_udp_payload_axis_tvalid: OUT STD_LOGIC;
      rx_udp_payload_axis_tlast:  OUT STD_LOGIC;
      rx_udp_payload_axis_tdata:  OUT STD_LOGIC_VECTOR(7 downto 0);
      
      -- UDP Out TO network
      
      tx_udp_ip_source_ip:         IN STD_LOGIC_VECTOR(31 downto 0);
      tx_udp_ip_dest_ip:           IN STD_LOGIC_VECTOR(31 downto 0);
      tx_udp_source_port:          IN STD_LOGIC_VECTOR(15 downto 0);
      tx_udp_dest_port:            IN STD_LOGIC_VECTOR(15 downto 0);
      
      tx_udp_hdr_ready:           OUT STD_LOGIC;
      tx_udp_hdr_valid:            IN STD_LOGIC;
      
      tx_udp_payload_axis_tready: OUT STD_LOGIC;
      tx_udp_payload_axis_tdata:   IN STD_LOGIC_VECTOR(7 downto 0);
      tx_udp_payload_axis_tvalid:  IN STD_LOGIC;
      tx_udp_payload_axis_tlast:   IN STD_LOGIC      
   );
   
end component udp_fpga;


   component IBM1410_CONSOLE_LAMPS_TRANSMITTER 
      Generic(LAMP_VECTOR_BITS: INTEGER; 
              REFRESH_TIME: INTEGER;
              CLOCKPERIOD: INTEGER);
      Port ( FPGA_CLK: in STD_LOGIC;
             RESET : in STD_LOGIC;
             LAMP_SUPPRESSION: in STD_LOGIC;
             LAMP_VECTOR : in STD_LOGIC_VECTOR (LAMP_VECTOR_BITS-1 downto 0);
             UART_OUTPUT_GRANT: in STD_LOGIC;           
             UART_OUTPUT_REQUEST : inout STD_LOGIC;
             UDP_OUTPUT_FLUSH: out STD_LOGIC;
             UART_OUTPUT_REQUEST_DATA : out STD_LOGIC_VECTOR (7 downto 0));
   end component;




   component IBM1410_CONSOLE_SWITCHES_RECEIVER is
    GENERIC(
       SWITCH_VECTOR_BITS: INTEGER := 200
       );
    Port ( FPGA_CLK : in STD_LOGIC;
           RESET : in STD_LOGIC;
           DEBUG_VECTOR: out STD_LOGIC_VECTOR(7 downto 0);
           SWITCH_VECTOR_INIT: in STD_LOGIC_VECTOR (SWITCH_VECTOR_BITS-1 downto 0);
           SWITCH_FIFO_WRITE_ENABLE : in STD_LOGIC;
           SWITCH_FIFO_WRITE_DATA : in STD_LOGIC_VECTOR (7 downto 0);
           SWITCH_VECTOR : out STD_LOGIC_VECTOR (SWITCH_VECTOR_BITS-1 downto 0));
   end component;

   component IBM1410_SWITCH_DECODER_LONG is
     Port (SWITCH_VECTOR_IN: in STD_LOGIC_VECTOR(12 downto 0);
           SWITCH_VECTOR_OUT: out STD_LOGIC_VECTOR(12 downto 0)
     );
   end component;         

	-- Inputs

	signal FPGA_CLK: STD_LOGIC; --  := '0';
	signal PP_SPECIAL_OR_12V_POWER_FOR_OSC: STD_LOGIC := '1';
	signal MV_36_VOLTS: STD_LOGIC := '1';
	-- signal GROUND: STD_LOGIC := '0';
	signal PS_INSTRUCTION_CHECK_GATE_STAR_1311: STD_LOGIC := '0';
	signal MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_COMP_DISABLE_CYCLE_STAR_1412_19: STD_LOGIC := '0';
	signal PS_START_AUTO_STARTMODE_STAR_AUTS_STAR: STD_LOGIC := '0';
	signal PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR: STD_LOGIC := '0';
	signal M36_VOLTS: STD_LOGIC := '1';
	signal PS_BRANCH_TO_A_COND_STAR_1412_19: STD_LOGIC := '0';
	signal PS_SET_NO_SCAN_CTRL_STAR_1412_19: STD_LOGIC := '0';
	signal PS_SET_B_CYCLE_CTRL_STAR_1412_19: STD_LOGIC := '0';
	signal PS_NO_BRANCH_COND_STAR_1412_19: STD_LOGIC := '0';
	signal PS_LAST_EXECUTE_CYCLE_STAR_1412_19: STD_LOGIC := '0';
	signal MC_BUFFER_INQ_REQUEST: STD_LOGIC := '1';
	signal MC_BUFFER_OUTQUIRY_PULSE: STD_LOGIC := '1';
	signal PS_SPEC_BRANCH_LATCH_STAR_1414_STAR: STD_LOGIC := '0';
	signal MC_PRINTER_CHANNEL_9: STD_LOGIC := '1';
	signal MC_PRINTER_CHANNEL_12: STD_LOGIC := '1';
	signal MC_FORMS_BUSY_STATUS_TO_CPU: STD_LOGIC := '1';
	signal MC_READ_COLUMN_BINARY: STD_LOGIC := '1';
	signal MC_1301_READY_E_CH: STD_LOGIC := '1';
	signal MC_1405_READY_E_CH: STD_LOGIC := '1';
	signal MC_BUFFER_READY: STD_LOGIC := '1';
	signal PS_E_CH_READY_BUS_STAR_SIF: STD_LOGIC := '0';
	signal PS_E_CH_READY_BUS_STAR_1412_19: STD_LOGIC := '0';
	signal MC_TAPE_READY: STD_LOGIC := '1';
	signal MC_TAPE_READY_F_CH_JRJ: STD_LOGIC := '1';
	signal MC_BUFFER_READY_JRJ: STD_LOGIC := '1';
	signal MC_SELECT_AND_REWIND_STAR_E_CH: STD_LOGIC := '1';
	signal MC_1301_BUSY_E_CH: STD_LOGIC := '1';
	signal PS_E_CH_BUSY_BUS_STAR_1412_19: STD_LOGIC := '0';
	signal MC_1405_BUSY_E_CH: STD_LOGIC := '1';
	signal MC_BUFFER_BUSY: STD_LOGIC := '1';
	signal MC_BUFFER_BUSY_JRJ: STD_LOGIC := '1';
	signal MC_TAPE_BUSY: STD_LOGIC := '1';
	signal MC_TAPE_BUSY_F_CH_JRJ: STD_LOGIC := '1';
	signal MC_1301_ERROR_E_CH: STD_LOGIC := '1';
	signal MC_1405_ERROR_E_CH: STD_LOGIC := '1';
	signal MC_BUFFER_ERROR: STD_LOGIC := '1';
	signal MC_BUFFER_ERROR_JRJ: STD_LOGIC := '1';
	signal PS_E_CH_CHECK_BUS_STAR_SIF: STD_LOGIC := '0';
	signal PS_E_CH_CHECK_BUS_STAR_1412_19: STD_LOGIC := '0';
	signal MC_TAPE_ERROR: STD_LOGIC := '1';
	signal MC_TAPE_ERROR_F_CH_JRJ: STD_LOGIC := '1';
	signal MC_1301_E_CH_CONDITION: STD_LOGIC := '1';
	signal MC_1405_CONDITION_E_CH: STD_LOGIC := '1';
	signal MC_BUFFER_CONDITION: STD_LOGIC := '1';
	signal MC_BUFFER_CONDITION_JRJ: STD_LOGIC := '1';
	signal MC_SEL_OR_TAPE_IND_ON_CH_1: STD_LOGIC := '1';
	signal MC_RBC_ERROR_1405_E_CH: STD_LOGIC := '1';
	signal PS_E_CH_COND_LATCH_STAR_SIF: STD_LOGIC := '0';
	signal MV_CONSOLE_PWR_SUPPLY_36_VOLTS: STD_LOGIC := '1';
	signal PS_OP_MOD_SYM_IO_STATUS_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF: STD_LOGIC := '0';
	signal PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF_JRJ: STD_LOGIC := '0';
	signal PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF: STD_LOGIC := '0';
	signal PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF_JRJ: STD_LOGIC := '0';
	signal MS_I_OR_O_OP_CODES_STAR_12_19: STD_LOGIC := '1';
	signal MS_E_CH_2_CHAR_OP_CODES_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_P_OR_Q_2_CHAR_OP_1412_19: STD_LOGIC := '0';
	signal MC_1301_END_ADDR_TRF_E_CH: STD_LOGIC := '1';
	signal MC_BUFFER_END_OF_TRANSFER: STD_LOGIC := '1';
	signal PS_E_CH_EXT_END_OF_TRF_STAR_1311: STD_LOGIC := '0';
	signal PS_E_CH_EXT_END_OF_TRF_STAR_SIF: STD_LOGIC := '0';
	signal PS_E_CH_EXT_END_OF_TRF_STAR_1412_19: STD_LOGIC := '0';
	signal MC_1405_END_OF_OP_STAR_E_CH: STD_LOGIC := '1';
	signal UNNAMED_26_DOT_00_DOT_01_DOT_0: STD_LOGIC := '0';
	signal MC_TAPE_IN_PROCESS: STD_LOGIC := '1';
	signal MC_TAPE_IN_PROCESS_F_CH_JRJ: STD_LOGIC := '1';
	signal MC_1301_END_OF_OP_STAR_E_CH: STD_LOGIC := '1';
	signal PS_GATE_OFF_E_CH_EXT_END_OF_TRF: STD_LOGIC := '0';
	signal MS_E_CH_SEL_ODD_PARITY_STAR_1412_19: STD_LOGIC := '1';
	signal PS_E_CH_SELECT_7_BIT_UNIT_STAR_SIF: STD_LOGIC := '0';
	signal PS_END_OF_RECORD_STAR_1311: STD_LOGIC := '0';
	signal PS_E_CH_SIF_SENSE_OR_CONTROL: STD_LOGIC := '0';
	signal PS_INT_END_OF_XFER_STAR_1311: STD_LOGIC := '0';
	signal PS_F_CH_RESET_STAR_1414: STD_LOGIC := '0';
	signal PS_F_CH_SELECT_ODD_PARITY_STAR_1414: STD_LOGIC := '0';
	signal PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_SIF: STD_LOGIC := '0';
	signal PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_2_9: STD_LOGIC := '0';
	signal PS_F_CH_SELECT_7_BIT_UNIT_STAR_SIF: STD_LOGIC := '0';
	signal PS_F_CH_SELECT_7_BIT_UNIT_STAR_1414: STD_LOGIC := '0';
	signal MC_FILE_INVALID_ADDRESS_1405: STD_LOGIC := '1';
	signal MS_E_CH_U_SEL_K_DOT_S_OP_MOD: STD_LOGIC := '1';
	signal MS_F_CH_U_SEL_K_DOT_S_OP_MOD: STD_LOGIC := '1';
	signal MS_RECOVER_LATCH_STAR_1311: STD_LOGIC := '1';
	signal PS_GT_OFF_E_CH_ST_SPL_DLY: STD_LOGIC := '0';
	signal PS_BLOCK_IO_LAST_EXECUTE: STD_LOGIC := '0';
	signal MS_F_CH_CON_LAT_SET_STAR_1414_STAR: STD_LOGIC := '1';
	signal MC_1301_ERROR_F_CH: STD_LOGIC := '1';
	signal MC_1405_ERROR_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_CHECK_STAR_SIF: STD_LOGIC := '0';
	signal PS_F_CH_CHECK_BUS_STAR_1414_STAR: STD_LOGIC := '0';
	signal MC_RBC_ERROR_1405_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_CHECK_STAR_1412_19: STD_LOGIC := '0';
	signal MS_F_CH_COND_LATCH_STAR_SIF: STD_LOGIC := '1';
	signal TW_RBC_ERROR_1405_F_CH: STD_LOGIC := '0';
	signal MC_1301_F_CH_CONDITION: STD_LOGIC := '1';
	signal MC_1405_CONDITION_F_CH: STD_LOGIC := '1';
	signal MC_SEL_OR_TI_ON_CH_2: STD_LOGIC := '1';
	signal PS_F_CH_COND_BUS_STAR_1414_STAR: STD_LOGIC := '0';
	signal MS_SET_F_CH_CON_LATCH_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_F_CH_SIF_SENSE_OR_CONTROL: STD_LOGIC := '0';
	signal MC_1301_READY_F_CH: STD_LOGIC := '1';
	signal MC_1405_READY_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_READY_BUS_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_F_CH_READY_BUS_STAR_1412_19: STD_LOGIC := '0';
	signal PS_F_CH_READY_BUS_STAR_SIF: STD_LOGIC := '0';
	signal MC_SELECT_AND_REWIND_STAR_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_BUSY_BUS_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_F_CH_BUSY_BUS_STAR_1412_19: STD_LOGIC := '0';
	signal MC_1301_BUSY_F_CH: STD_LOGIC := '1';
	signal MC_1405_BUSY_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_CLR_LATCH_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_RESET_F_CH_CLR_LAT_STAR_1414_STAR: STD_LOGIC := '0';
	signal MC_SELECT_AT_LOAD_POINT_STAR_F_CH: STD_LOGIC := '1';
	signal MC_WRITE_CONDITION_STAR_F_CH: STD_LOGIC := '1';
	signal PS_ASSEMBLY_TO_F_CH_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_GATE_F_CH_ST_SAMPLE_A_STAR_1414_STAR: STD_LOGIC := '0';
	signal MC_1301_END_ADDR_TRF_F_CH: STD_LOGIC := '1';
	signal PS_SET_F_CH_EXT_END_TRF_STAR_SIF: STD_LOGIC := '0';
	signal PS_F_CH_EXT_END_OF_TRF_BUS_STAR_1414: STD_LOGIC := '0';
	signal PS_SET_F_CH_EXT_END_TRF_STAR_1412_19: STD_LOGIC := '0';
	signal MC_1301_END_OF_OP_STAR_F_CH: STD_LOGIC := '1';
	signal MC_1405_END_OF_OP_STAR_F_CH: STD_LOGIC := '1';
	signal MC_1403_PRINT_BUFFER_BUSY: STD_LOGIC := '1';
	signal MC_I_O_PRINTER_READY: STD_LOGIC := '1';
	signal MC_SELECT_AT_LOAD_POINT_STAR_E_CH: STD_LOGIC := '1';
	signal MC_WRITE_CONDITION_STAR_E_CH: STD_LOGIC := '1';
	signal PS_GATE_ON_E_CH_END_ADDR_TRF: STD_LOGIC := '0';
	signal PS_WR_INHIBIT_STAR_7631_STAR_E_CH: STD_LOGIC := '0';
	signal PS_SET_E_CH_NO_TRANS_LAT_STAR_SIF: STD_LOGIC := '0';
	signal PS_SET_E_CH_NO_TRANS_LAT_STAR_12_19: STD_LOGIC := '0';
	signal MC_BUFFER_NO_TRANS_COND: STD_LOGIC := '1';
	signal MC_BUFFER_NO_TRANS_COND_JRJ: STD_LOGIC := '1';
	signal MC_ADDR_COMP_TRUE_F_CH: STD_LOGIC := '1';
	signal MC_FAST_FILE_ON_LINE_F_CH: STD_LOGIC := '1';
	signal MS_1311_F_CH_END_ADDR_TRF: STD_LOGIC := '1';
	signal PS_WR_INHIBIT_STAR_7631_STAR_F_CH: STD_LOGIC := '0';
	signal PS_F_CH_NO_TRF_LATCH_STAR_SIF: STD_LOGIC := '0';
	signal PS_SET_F_CH_NO_TRANS_LAT_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_F_CH_NO_TRANS_LAT_STAR_12_19: STD_LOGIC := '0';
	signal MC_E_CH_FILE_DIGIT_RING_7: STD_LOGIC := '1';
	signal MC_F_CH_FILE_DIGIT_RING_7: STD_LOGIC := '1';
	signal MINUS_36_VOLTS: STD_LOGIC := '1';
	signal PS_OPTIONAL_SYNC_COND_STAR_CE: STD_LOGIC := '0';
	signal MS_OPTIONAL_SYNC_COND_A: STD_LOGIC := '1';
	signal MS_OPTIONAL_SYNC_COND_B: STD_LOGIC := '1';
	signal PS_BLOCK_ADDR_MOD_OR_1_STAR_1412_19: STD_LOGIC := '0';
	signal PS_ADDR_MOD_SET_TO_1_STAR_1412_19: STD_LOGIC := '0';
	signal PS_1311_SET_AAR: STD_LOGIC := '0';
	signal PS_1311_SET_DAR_STAR_1401: STD_LOGIC := '0';
	signal PS_1311_RESET_AAR: STD_LOGIC := '0';
	signal MS_1311_RESET_DAR_STAR_1401: STD_LOGIC := '1';
	signal MS_SCAN_RESTART_LATCH_STAR_1311: STD_LOGIC := '1';
	signal PS_BLOCK_BAR_RO_E_CH_STAR_1311: STD_LOGIC := '0';
	signal PS_BLOCK_BAR_RO_F_CH_STAR_1311: STD_LOGIC := '0';
	signal PS_1311_RO_DAR_STAR_1401: STD_LOGIC := '0';
	signal PS_E2_FULL_LATCH_STAR_SIF: STD_LOGIC := '0';
	signal MS_F_CH_OUTPUT_WM_CYCLE_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_OUTPUT_FIELD_CYCLE_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_ASM_CH_A_BIT_STAR_STERLING: STD_LOGIC := '0';
	signal MS_SET_F_U_SEL_REG_2_BIT_STAR_1414_STAR: STD_LOGIC := '1';
	signal MS_SET_F_U_SEL_REG_1_BIT_STAR_1414_STAR: STD_LOGIC := '1';
	signal MV_CONSOLE_C_INPUT_STAR_CHK_OP: STD_LOGIC := '1';
	signal MC_BUFFER_STROBE: STD_LOGIC := '1';
	signal MC_SET_ECH_STROB_TR_E_FR_FEATS: STD_LOGIC := '1';
	signal TW_SET_ECH_STROB_TR_E_FR_FEATS: STD_LOGIC := '0';
	signal MC_BUFFER_STROBE_JRJ: STD_LOGIC := '1';
	signal MC_TAPE_WRITE_STROBE: STD_LOGIC := '1';
	signal MC_TAPE_WRITE_STROBE_F_CH_JRJ: STD_LOGIC := '1';
	signal MC_1301_STROBE_E_CH: STD_LOGIC := '1';
	signal MC_1405_STROBE_E_CH: STD_LOGIC := '1';
	signal MC_TAPE_READ_STROBE: STD_LOGIC := '1';
	signal MC_TAPE_READ_STROBE_F_CH_JRJ: STD_LOGIC := '1';
	signal MS_F_CH_STK_SEL_OP_CODE_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_F_CH_WRITE_LATCH_STAR_1414_STAR: STD_LOGIC := '0';
	signal MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR: STD_LOGIC := '1';
	signal MC_1301_STROBE_F_CH: STD_LOGIC := '1';
	signal MC_SET_FCH_STROB_TR_E_FR_FEATS: STD_LOGIC := '1';
	signal TW_SET_FCH_STROB_TR_E_FR_FEATS: STD_LOGIC := '0';
	signal MC_1405_STROBE_F_CH: STD_LOGIC := '1';
	signal PS_GATE_SET_F1_REG_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_GATE_RESET_F2_FULL_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_RGEN_EXTN_CTRL_STAR_STERLING: STD_LOGIC := '0';
	signal PS_PULL_OFF_CMP_HI_STAR_1311_SCAN: STD_LOGIC := '0';
	signal PS_PULL_OFF_CMP_LO_STAR_1311_SCAN: STD_LOGIC := '0';
	signal PS_SIMULATE_CMP_HI_STAR_1311_SCAN: STD_LOGIC := '0';
	signal PS_SIMULATE_CMP_EQ_STAR_1311_SCAN: STD_LOGIC := '0';
	signal PS_SIMULATE_CMP_LO_STAR_1311_SCAN: STD_LOGIC := '0';
	signal PS_CMP_MODE_B_CYCLE_STAR_1311: STD_LOGIC := '0';
	signal M36_VOLTS_ON_CONSOLE: STD_LOGIC := '1';
	signal PS_INTERLOCK_F_CH_STAR_1414_STAR: STD_LOGIC := '0';
	signal MC_READER_BUSY: STD_LOGIC := '1';
	signal MC_READER_BUSY_JRJ: STD_LOGIC := '1';
	signal MC_PUNCH_BUSY: STD_LOGIC := '1';
	signal MC_PUNCH_BUSY_JRJ: STD_LOGIC := '1';
	signal MC_PAPER_TAPE_READER_BUSY: STD_LOGIC := '1';
	signal MC_PAPER_TAPE_READY_BUSY_JRJ: STD_LOGIC := '1';
	signal MC_I_O_CLOCK_080_090_TIME: STD_LOGIC := '1';
	signal MC_I_O_CLOCK_080_090_TIME_JRJ: STD_LOGIC := '1';
	signal PS_INTERRUPT_REQUEST_STAR_SIF: STD_LOGIC := '0';
	signal PS_INTERRUPT_REQUEST_JRJ: STD_LOGIC := '0';
	signal PS_INTERRUPT_REQUEST_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR: STD_LOGIC := '0';
	signal MC_ANY_SEEK_COMP_STAR_E_CH_1405: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_E_CH_1301: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_F_CH_1301: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_F_CH_1405: STD_LOGIC := '1';
	signal PS_2ND_CND_A_BRANCH_STAR_SIF: STD_LOGIC := '0';
	signal PS_2ND_CND_A_BRANCH_STAR_SIF_JRJ: STD_LOGIC := '0';
	signal PS_2ND_CND_A_BRANCH_STAR_1414_STAR: STD_LOGIC := '0';
	signal PS_NO_BRANCH_CND_INTER_STAR_SIF: STD_LOGIC := '0';
	signal PS_NO_BRANCH_CND_INTER_STAR_SIF_JRJ: STD_LOGIC := '0';
	signal PS_NO_BRANCH_CND_INTER_STAR_1414_STAR: STD_LOGIC := '0';
	signal M6_V: STD_LOGIC := '1';
	signal MY_CHAR_SEL_ERROR_CHK_1_STAR_2_STAR: STD_LOGIC := '1';
	signal MY_CHAR_SEL_ERROR_CHK_2_STAR_2_STAR: STD_LOGIC := '1';
	signal CONS_36V: STD_LOGIC := '0';
	signal MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO: STD_LOGIC; -- := '1';
	signal PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC: STD_LOGIC; -- := '0';
	signal MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_C2_CAM_NC: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_C2_CAM_NO: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_SPACE_NO: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_C1_CAM_NO: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_C1_CAM_NC: STD_LOGIC; -- := '1';
	signal MV_CONS_PRINTER_C3_OR_C4_NO: STD_LOGIC := '1';
	signal MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC: STD_LOGIC := '1';
	signal MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO: STD_LOGIC := '1';
	signal MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO: STD_LOGIC := '1';
	signal MB_CONS_PRINTER_EVEN_BIT_CHECK: STD_LOGIC := '1';
	signal MV_CONS_PRINTER_ODD_BIT_CHECK: STD_LOGIC := '1';
	signal MV_CONS_PRINTER_LAST_COLUMN_SET: STD_LOGIC := '1';
	signal MV_KEYBOARD_LOCK_MODE_STAR_NO: STD_LOGIC := '1';
	signal MV_KEYBOARD_UNLOCK_MODE: STD_LOGIC := '1';
	signal PS_E1_INPUT_STAR_SIF_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_E1_INPUT_STAR_1412_19_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal MC_E_CH_TAU_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_I_O_SYNC_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_E_CH_1301_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_E_CH_1405_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MV_CONS_PRTR_TO_CPU_BUS: STD_LOGIC_VECTOR (5 downTo 0) := "111111";
	signal PS_F1_INPUT_STAR_SIF_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_F1_INPUT_STAR_1414_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_F1_INPUT_STAR_1412_19_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal MC_F_CH_1301_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_F_CH_1405_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_F_CH_TAU_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal PV_SENSE_CHAR_0_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_0_STAR_Z_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_1_STAR_Z_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_2_STAR_Z_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_3_STAR_Z_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal SWITCH_ROT_STOR_SCAN_DK6: STD_LOGIC_VECTOR(5 downTo 0) := "000000";
	signal SWITCH_MOM_CONS_START: STD_LOGIC := '0';
	signal SWITCH_MOM_CE_START: STD_LOGIC := '0';
	signal SWITCH_MOM_CONS_STOP_PL1: STD_LOGIC := '0';
	signal SWITCH_MOM_CE_STOP_SW_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_I_O_CHK_ST_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_ADDR_STOP_PL1: STD_LOGIC := '0';
	signal SWITCH_REL_PWR_ON_RST: STD_LOGIC := '1'; -- Initial power on reset
	signal SWITCH_MOM_CO_CPR_RST: STD_LOGIC; -- := '0';
	signal SWITCH_MOM_CE_CPR_RST: STD_LOGIC := '0';
	signal SWITCH_MOM_PROG_RESET: STD_LOGIC := '0';
	signal SWITCH_TOG_1401_MODE_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_CHECK_CTRL_DK2: STD_LOGIC_VECTOR(5 downTo 0) := "000000";
	signal SWITCH_MOM_IO_CHK_RST_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_M_RTC_023_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_M_RTC_578_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_MRTC_01234_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_MRTC_56789_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_01234_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_56789_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HRTC_012_CC: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_REL_RTC_BUSY: STD_LOGIC := '0';
	signal SWITCH_ROT_TENS_SYNC_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_TENS_SYNC_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_UNITS_SYNC_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_UNITS_SYNC_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_SCAN_GATE_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_THOUS_SYNC_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_THOUS_SYNC_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HUNDS_SYNC_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_HUNDS_SYNC_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_ENTRY_DK3: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_SEL_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_MOM_ADDR_DISP: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK5: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_ASTERISK_PL2: STD_LOGIC := '1';
	signal SWITCH_TOG_SENSE_SW_1_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_2_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_4_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_8_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_A_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_B_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_C_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_SENSE_SW_W_PL1: STD_LOGIC := '0';
	signal SWITCH_MOM_1ST_TST_SW_PL1: STD_LOGIC := '0';
	signal SWITCH_MOM_2ND_TST_SW_PL1: STD_LOGIC := '0';
	signal SWITCH_MOM_3RD_TST_SW_PL1: STD_LOGIC := '0';
	signal SWITCH_ALT_PRIORITY_PL1: STD_LOGIC := '0';
	signal SWITCH_ALT_PRIORITY_PL2: STD_LOGIC := '0';
	signal SWITCH_ROT_I_O_UNIT_DK1: STD_LOGIC_VECTOR(5 downTo 0) := "000000";
	signal SWITCH_ROT_MODE_SW_DK: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_MODE_SW_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_CH_1: STD_LOGIC := '0';
	signal SWITCH_TOG_CH_2: STD_LOGIC := '0';
	signal SWITCH_TOG_AUTO_START_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_ADDR_ENTRY_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_WR_INHIBIT_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_CYCLE_CTRL_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_ENTRY_DKA: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_CHECK_CTRL_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_INHIBIT_PO_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK4: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_ASTERISK_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK3: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_ENTRY_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_INHIBIT_PO_PL2: STD_LOGIC := '0';
	signal SWITCH_MOM_STARTPRINT: STD_LOGIC := '0';
	signal SWITCH_ROT_CYCLE_CTRL_DK2: STD_LOGIC_VECTOR(5 downTo 0) := "000000";

	-- Outputs

	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC;
	signal PS_CLOCK_STOPPED_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_CLOCK_STOPPED: STD_LOGIC;
	signal MS_CLOCK_STOPPED: STD_LOGIC;
	signal MS_LOGIC_GATE_B_1: STD_LOGIC;
	signal PS_LOGIC_GATE_C_1: STD_LOGIC;
	signal MS_LOGIC_GATE_D_1: STD_LOGIC;
	signal PS_LOGIC_GATE_D_1: STD_LOGIC;
	signal PS_LOGIC_GATE_E_1: STD_LOGIC;
	signal PS_LOGIC_GATE_B_OR_C: STD_LOGIC;
	signal PS_LOGIC_GATE_D_OR_E_OR_F: STD_LOGIC;
	signal PS_LOGIC_GATE_EARLY_B: STD_LOGIC;
	signal PS_LOGIC_GATE_EARLY_B_OR_S: STD_LOGIC;
	signal PS_I_CYCLE_1: STD_LOGIC;
	signal PS_I_CYCLE_DOT_NOT_CR_DISABLE: STD_LOGIC;
	signal MS_F_CYCLE_DOT_ANY_LAST_GATE: STD_LOGIC;
	signal PS_E_CYCLE_CTRL: STD_LOGIC;
	signal PS_E_CYCLE: STD_LOGIC;
	signal PS_E_CYCLE_CTRL_STAR_1311: STD_LOGIC;
	signal PS_F_CYCLE_CTRL: STD_LOGIC;
	signal PS_F_CYCLE: STD_LOGIC;
	signal PS_LAST_INSN_RO_CYCLE_2: STD_LOGIC;
	signal MS_START_KEY: STD_LOGIC;
	signal PS_RUN_OR_IE_MODE_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_BRANCH_TO_A_CONDITIONS: STD_LOGIC;
	signal PS_E_CH_READY_BUS: STD_LOGIC;
	signal MS_E_CH_NOT_READY: STD_LOGIC;
	signal MS_COMPUTER_RESET_1: STD_LOGIC;
	signal MS_COMPUTER_RESET_2: STD_LOGIC;
	signal MC_COMP_RESET_TO_TAPE_STAR_E_CH: STD_LOGIC;
	signal MC_E_CH_COMP_RESET_TO_1301: STD_LOGIC;
	signal MC_E_CH_COMP_RESET_TO_1405: STD_LOGIC;
	signal MC_COMP_RESET_TO_TAPE_STAR_F_CH: STD_LOGIC;
	signal MC_F_CH_COMP_RESET_TO_1301: STD_LOGIC;
	signal MC_F_CH_COMP_RESET_TO_1405: STD_LOGIC;
	signal MC_COMP_RESET_TO_BUFFER: STD_LOGIC;
	signal MS_PROGRAM_RESET_6: STD_LOGIC;
	signal MS_PROGRAM_RESET_2: STD_LOGIC;
	signal PS_1401_MODE: STD_LOGIC;
	signal MS_1401_MODE: STD_LOGIC;
	signal MC_1401_MODE_TO_1405: STD_LOGIC;
	signal PS_OP_REG_ARS_C_BIT: STD_LOGIC;
	signal PS_OP_REG_ARS_NOT_C_BIT: STD_LOGIC;
	signal PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B: STD_LOGIC;
	signal PS_OP_DCDR_B_DOT_A_DOT_8_B: STD_LOGIC;
	signal PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B: STD_LOGIC;
	signal PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B: STD_LOGIC;
	signal PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_NOT_1_B: STD_LOGIC;
	signal PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_1_B: STD_LOGIC;
	signal PS_OP_DCDR_NOT_4_DOT_2_DOT_NOT_1_B: STD_LOGIC;
	signal PS_OP_DCDR_4_DOT_2_DOT_NOT_1_B: STD_LOGIC;
	signal PS_OP_DCDR_4_DOT_NOT_2_DOT_NOT_1_B: STD_LOGIC;
	signal PS_OP_DCDR_4_DOT_2_DOT_1_B: STD_LOGIC;
	signal PS_NOT_B_DOT_NOT_A_DOT_8_OP_MOD: STD_LOGIC;
	signal PS_NOT_B_DOT_NOT_A_DOT_NOT_8_OP_MOD: STD_LOGIC;
	signal PS_NOT_4_DOT_NOT_2_DOT_NOT_1_OP_MOD: STD_LOGIC;
	signal PS_NOT_4_DOT_NOT_2_DOT_1_OP_MOD: STD_LOGIC;
	signal PS_NOT_4_DOT_2_DOT_1_OP_MOD: STD_LOGIC;
	signal PS_NOT_4_DOT_2_DOT_NOT_1_OP_MOD: STD_LOGIC;
	signal PS_4_DOT_2_DOT_NOT_1_OP_MOD: STD_LOGIC;
	signal PS_4_DOT_2_DOT_1_OP_MOD: STD_LOGIC;
	signal PS_4_DOT_NOT_2_DOT_1_OP_MOD: STD_LOGIC;
	signal PS_4_DOT_NOT_2_DOT_NOT_1_OP_MOD: STD_LOGIC;
	signal PS_S_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_B_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_E_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_F_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_LOZ_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_R_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_PERCENT_SIGN_OP_MODIFIER: STD_LOGIC;
	signal PS_A_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_RECORD_MARK_OP_MODIFIER: STD_LOGIC;
	signal PS_C_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_D_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_L_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_EXCLAM_MK_OP_MODIFIER: STD_LOGIC;
	signal PS_ONE_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_TWO_SYMBOL_OP_MODIFIER: STD_LOGIC;
	signal PS_ASTERISK_OP_MODIFIER: STD_LOGIC;
	signal MS_COND_TEST_BRANCH_OP_CODE: STD_LOGIC;
	signal MS_INTERRUPT_TEST_OP_CODE: STD_LOGIC;
	signal PS_M_OR_L_OP_CODES: STD_LOGIC;
	signal MC_CPU_READY_TO_TID: STD_LOGIC;
	signal PS_E_CH_DISCON_LATCH: STD_LOGIC;
	signal PS_E_CH_DISCON_LATCH_JRJ: STD_LOGIC;
	signal MC_E_CH_DISCON_TO_1301: STD_LOGIC;
	signal MC_E_CH_DISCON_TO_1405: STD_LOGIC;
	signal MS_E_CH_EXT_END_OF_TRANSFER: STD_LOGIC;
	signal PS_I_O_COML_AT_LATCH: STD_LOGIC;
	signal PS_LOZENGE_OR_ASTERISK: STD_LOGIC;
	signal PS_I_O_ASTERISK_LATCH: STD_LOGIC;
	signal MC_UNIT_1_SELECT_TO_I_O: STD_LOGIC;
	signal MC_UNIT_2_SELECT_TO_I_O: STD_LOGIC;
	signal MC_UNIT_4_SELECT_TO_I_O: STD_LOGIC;
	signal MC_UNIT_8_SEL_TO_I_O: STD_LOGIC;
	signal MC_SELECT_UNIT_P: STD_LOGIC;
	signal MC_SELECT_UNIT_D: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_K: STD_LOGIC;
	signal MC_SELECT_UNIT_Q: STD_LOGIC;
	signal MC_E_CH_SELECT_UNIT_R: STD_LOGIC;
	signal MC_SELECT_UNIT_L: STD_LOGIC;
	signal MC_E_CH_SELECT_UNIT_M: STD_LOGIC;
	signal MC_SELECT_UNIT_N: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_F: STD_LOGIC;
	signal MC_ODD_PARITY_TO_TAPE_STAR_E_CH: STD_LOGIC;
	signal MC_UNIT_SEL_F_STAR_E_CH_1301: STD_LOGIC;
	signal MC_UNIT_SEL_F_STAR_E_CH_1405: STD_LOGIC;
	signal PS_E_CH_UNOVLP_IN_PROCESS: STD_LOGIC;
	signal PS_E_CH_IN_PROCESS: STD_LOGIC;
	signal MS_LOAD_CYCLE: STD_LOGIC;
	signal PS_E_CH_INT_END_OF_TRANSFER: STD_LOGIC;
	signal MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_E_CH: STD_LOGIC;
	signal MS_F_CH_RESET: STD_LOGIC;
	signal MS_F_CH_RESET_1: STD_LOGIC;
	signal PS_F_CH_U_SEL_A_DOT_NOT_8_DOT_NOT_1: STD_LOGIC;
	signal MC_ODD_PARITY_TO_TAPE_STAR_F_CH: STD_LOGIC;
	signal PS_F_CH_SELECT_UNIT_F_LN_2: STD_LOGIC;
	signal MC_UNIT_SEL_F_F_CH_1301: STD_LOGIC;
	signal MC_UNIT_SELECT_F_STAR_F_CH_1405: STD_LOGIC;
	signal PS_F_CH_UNOVLP_IN_PROCESS: STD_LOGIC;
	signal PS_F_CH_IN_PROCESS: STD_LOGIC;
	signal PS_E_CH_STATUS_SAMPLE_B: STD_LOGIC;
	signal MS_E_CH_STATUS_SAMPLE_B_DELAY: STD_LOGIC;
	signal PS_E_CH_SECOND_SAMPLE_B: STD_LOGIC;
	signal MS_E_CH_STATUS_SAMPLE_B: STD_LOGIC;
	signal PS_E_CH_STATUS_SAMPLE_B_DELAY: STD_LOGIC;
	signal PS_E_CH_STATUS_SAMPLE_A: STD_LOGIC;
	signal PS_E_CH_STATUS_SAMPLE_A_DELAY: STD_LOGIC;
	signal PS_F_CH_CONDITION: STD_LOGIC;
	signal MS_F_CH_CHECK: STD_LOGIC;
	signal MS_F_CH_END_OF_RECORD_LATCH: STD_LOGIC;
	signal PS_F_CH_INT_END_OF_TRANSFER: STD_LOGIC;
	signal PS_F_CH_READY_BUS: STD_LOGIC;
	signal MS_F_CH_NOT_READY: STD_LOGIC;
	signal MS_F_CH_BUSY: STD_LOGIC;
	signal MS_F_CH_WRONG_LENGTH_RECORD: STD_LOGIC;
	signal MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_F_CH: STD_LOGIC;
	signal MC_READ_TAPE_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_TAPE_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_TAPE_MK_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_ERASE_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_REWIND_UNLOAD_STAR_F_CH: STD_LOGIC;
	signal MC_REWIND_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_BACKSPACE_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_DISCONNECT_CALL_STAR_F_CH: STD_LOGIC;
	signal MC_TURN_OFF_TI_STAR_F_CH: STD_LOGIC;
	signal MC_RESET_TAPE_SEL_REG_STAR_CH_F: STD_LOGIC;
	signal MC_SET_TAPE_SEL_REG_STAR_CH_F: STD_LOGIC;
	signal PS_F_CH_STATUS_SAMPLE_A_DELAY: STD_LOGIC;
	signal PS_F_CH_STATUS_SAMPLE_A: STD_LOGIC;
	signal PS_F_CH_STATUS_SAMPLE_B: STD_LOGIC;
	signal PS_F_CH_SECOND_SAMPLE_B: STD_LOGIC;
	signal PS_F_CH_STATUS_SAMPLE_B_1: STD_LOGIC;
	signal MS_F_CH_INT_END_OF_XFER_DELAYED: STD_LOGIC;
	signal PS_F_CH_STATUS_SAMPLE_B_DELAY: STD_LOGIC;
	signal PS_F_CH_DISCON_LATCH: STD_LOGIC;
	signal MC_F_CH_DISCON_TO_1301: STD_LOGIC;
	signal MC_F_CH_DISCON_TO_1405: STD_LOGIC;
	signal MS_F_CH_EXT_END_OF_TRANSFER: STD_LOGIC;
	signal MS_1401_I_O_END: STD_LOGIC;
	signal MC_CORRECT_TRANS_TO_BUFFER: STD_LOGIC;
	signal MC_RESET_SELECT_BUFFER_LATCHES: STD_LOGIC;
	signal MC_READY_TO_BUFFER: STD_LOGIC;
	signal MC_1401_MODE_TO_BUFFER: STD_LOGIC;
	signal MC_STACK_SELECT_TO_BUFFER: STD_LOGIC;
	signal MC_FORMS_CTRL_TO_BUFFER: STD_LOGIC;
	signal MC_FORMS_STACKER_GO: STD_LOGIC;
	signal MC_TURN_OFF_TAPE_IND_STAR_E_CH: STD_LOGIC;
	signal MC_RESET_TAPE_SEL_REG_STAR_E_CH: STD_LOGIC;
	signal MC_SET_TAPE_SEL_REG_STAR_E_CH: STD_LOGIC;
	signal MC_DISCONNECT_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_READ_TAPE_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_WRITE_TAPE_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_WRITE_TAPE_MK_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_ERASE_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_REWIND_UNLOAD_STAR_E_CH: STD_LOGIC;
	signal MC_REWIND_CALL_STAR_E_CH: STD_LOGIC;
	signal MC_BACKSPACE_CALL_STAR_E_CH: STD_LOGIC;
	signal PS_E_CH_2ND_ADDR_TRF: STD_LOGIC;
	signal MS_E_CH_END_OF_2ND_ADDR_TRF: STD_LOGIC;
	signal MC_1405_START_GATE_STAR_E_CH: STD_LOGIC;
	signal MC_1301_START_GATE_STAR_E_CH: STD_LOGIC;
	signal MC_SEEK_TEST_OP_STAR_E_CH_TO_1405: STD_LOGIC;
	signal MC_SEEK_TEST_OP_STAR_E_CH_TO_1301: STD_LOGIC;
	signal MC_FILE_STROBE_1ST_ADDR_STAR_E_CH: STD_LOGIC;
	signal MC_FILE_STROBE_2ND_ADDR_STAR_E_CH: STD_LOGIC;
	signal MC_FILE_DIGIT_ADVANCE_STAR_E_CH: STD_LOGIC;
	signal MC_FILE_ADDR_TRF_GATE_STAR_E_CH: STD_LOGIC;
	signal MC_E_CH_RBCI_RESET_1405: STD_LOGIC;
	signal PS_E_CH_NO_STATUS_ON: STD_LOGIC;
	signal PS_F_CH_2ND_ADDR_TRF: STD_LOGIC;
	signal PS_F_CH_END_OF_2ND_ADDR_TRF: STD_LOGIC;
	signal MC_1301_START_GATE_STAR_F_CH: STD_LOGIC;
	signal MC_1405_START_GATE_STAR_F_CH: STD_LOGIC;
	signal MC_SEEK_TEST_OP_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_FILE_STROBE_1ST_ADDR_STAR_F_CH: STD_LOGIC;
	signal MC_FILE_STROBE_2ND_ADDR_STAR_F_CH: STD_LOGIC;
	signal MC_FILE_DIGIT_ADVANCE_STAR_F_CH: STD_LOGIC;
	signal MC_FILE_ADDR_TRF_GATE_STAR_F_CH: STD_LOGIC;
	signal MC_SEEK_TEST_OP_STAR_F_CH_TO_1301: STD_LOGIC;
	signal MC_F_CH_RBCI_RESET_1405: STD_LOGIC;
	signal PS_F_CH_NO_TRANSFER_LATCH: STD_LOGIC;
	signal PS_F_CH_NO_STATUS_ON: STD_LOGIC;
	signal MS_F_CH_NO_TRANSFER_LATCH: STD_LOGIC;
	signal MY_MEM_AR_NOT_TTHP4B: STD_LOGIC;
	signal PS_ADDRESS_STOP: STD_LOGIC;
	signal PS_OPTIONAL_SYNC_COND_CE: STD_LOGIC;
	signal MC_UNIT_NU_0_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_SELECT_NO_0_TO_BUFFER: STD_LOGIC;
	signal MC_SEEK_STAR_E_CH_1405: STD_LOGIC;
	signal MC_UNIT_NU_1_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MS_E_CH_UNIT_NUMBER_1: STD_LOGIC;
	signal MC_SELECT_NO_1_TO_BUFFER: STD_LOGIC;
	signal MC_SINGLE_REC_STAR_E_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_2_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_SELECT_NO_2_TO_BUFFER: STD_LOGIC;
	signal MC_FULL_TRACK_WITHOUT_IA_STAR_1405_E_CH: STD_LOGIC;
	signal MC_UNIT_NU_3_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_SELECT_NO_3_TO_BUFFER: STD_LOGIC;
	signal MC_WRITE_CHECK_STAR_E_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_4_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_WRITE_ADDR_STAR_E_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_5_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_UNIT_NU_6_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_UNIT_NU_7_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_UNIT_NU_8_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MC_UNIT_NU_9_TO_TAU_STAR_E_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_0: STD_LOGIC;
	signal MC_UNIT_NU_0_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal PS_F_CH_UNIT_NUMBER_0: STD_LOGIC;
	signal MC_SEEK_STAR_F_CH_1405: STD_LOGIC;
	signal MC_UNIT_NU_1_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_1: STD_LOGIC;
	signal PS_F_CH_UNIT_NUMBER_1: STD_LOGIC;
	signal MC_SINGLE_REC_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_2_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_2: STD_LOGIC;
	signal MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_3: STD_LOGIC;
	signal MC_UNIT_NU_3_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_CHECK_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_4_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_ADDR_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_5_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_6_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_7_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_8_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_9_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC;
	signal PS_E_CH_INPUT_MODE: STD_LOGIC;
	signal MC_OUTPUT_MODE_TO_BUFFER: STD_LOGIC;
	signal MC_INPUT_MODE_TO_BUFFER: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1301_STAR_E_CH: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1405_STAR_E_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1405_STAR_E_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1301_STAR_E_CH: STD_LOGIC;
	signal MS_E_CH_MOVE_MODE: STD_LOGIC;
	signal MS_E_CH_LOAD_MODE: STD_LOGIC;
	signal MS_E_CH_INTERLOCK: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1301_STAR_E_CH: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1405_STAR_E_CH: STD_LOGIC;
	signal PS_SET_E2_REG: STD_LOGIC;
	signal PS_SET_E1_REG: STD_LOGIC;
	signal PS_F_CH_OUTPUT_MODE: STD_LOGIC;
	signal PS_F_CH_INPUT_MODE: STD_LOGIC;
	signal MS_INPUT_MODE_F_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1405_STAR_F_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1301_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_INPUT_MODE: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1405_STAR_F_CH: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1301_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_LOAD_MODE: STD_LOGIC;
	signal PS_F_CH_INTERLOCK: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1301_STAR_F_CH: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1405_STAR_F_CH: STD_LOGIC;
	signal PS_SET_F1_REG: STD_LOGIC;
	signal PS_SET_F2_REG: STD_LOGIC;
	signal TW_CPU_TO_F_CH_TAU_C_BIT: STD_LOGIC;
	signal MS_MASTER_ERROR: STD_LOGIC;
	signal MS_MASTER_ERROR_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_MASTER_ERROR: STD_LOGIC;
	signal PS_INTERRUPT_REQ_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_Y_OP_DOT_TEST_RESET: STD_LOGIC;
	signal PS_INTERRUPT_TEST_OP_CODE: STD_LOGIC;
	signal MS_I_OP_DOT_I_CYCLE_DOT_C: STD_LOGIC;
	signal PS_I_OP_DOT_I_CYCLE_DOT_E: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP0B_JRJ: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP1B_JRJ: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP2B_JRJ: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP8B_JRJ: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP4B_JRJ: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY00_09_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY00_09_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY10_19_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY10_19_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY20_29_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY20_29_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY30_39_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY30_39_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY40_49_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY40_49_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY50_59_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY50_59_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY60_60_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY60_69_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY70_79_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY70_79_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY80_89_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY80_89_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY90_99_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY90_99_B: STD_LOGIC;
	signal MY_MEM_AR_NOT_HP8B_Z: STD_LOGIC;
	signal MY_MEM_AR_NOT_HP4B_Z: STD_LOGIC;
	signal MY_MEM_AR_NOT_HP2B_Z: STD_LOGIC;
	signal MY_MEM_AR_NOT_HP1B_Z: STD_LOGIC;
	signal MY_MEM_AR_NOT_HP0B_Z: STD_LOGIC;
	signal MY_GATE_Y_LSMS_00_09XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_00_09XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_10_19XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_10_19XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_20_29XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_20_29XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_30_39XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_30_39XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_40_49XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_40_49XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_50_59XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_50_59XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_60_69XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_60_69XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_70_79XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_70_79XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_80_89XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_80_89XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_90_99XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_90_99XX_B: STD_LOGIC;
	signal MY_X_RD_1: STD_LOGIC;
	signal MY_B_DATA_REG_RESET: STD_LOGIC;
	signal PY_START_READ: STD_LOGIC;
	signal MY_X_WR_1: STD_LOGIC;
	signal PY_START_WRITE: STD_LOGIC;
	signal MY_LOAD_MEMORY_Z: STD_LOGIC;
	signal MY_REGEN_MEMORY_Z: STD_LOGIC;
	signal PY_1ST_CHECK_TEST_Z: STD_LOGIC;
	signal PY_2ND_CHECK_TEST_Z: STD_LOGIC;
	signal PY_COMPUTER_RESET: STD_LOGIC;
	signal PS_DENSITY_SW_556_OR_200_CH_1: STD_LOGIC;
	signal PS_DENSITY_SW_800_OR_556_CH_1: STD_LOGIC;
	signal PS_DENSITY_SW_556_OR_200_CH_2: STD_LOGIC;
	signal PS_DENSITY_SW_800_OR_556_CH_2: STD_LOGIC;
	signal MC_DISK_WRITE_NORMAL_STAR_F_CH: STD_LOGIC;
	signal MC_DISK_WRITE_NORMAL_STAR_E_CH: STD_LOGIC;
	signal MS_CONSOLE_INHIBIT_AR_RO: STD_LOGIC;
	signal PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC;
	signal PS_CONS_CLOCK_3_POS_1: STD_LOGIC;
	signal MS_CONSOLE_CHECK_STROBE: STD_LOGIC;
	signal PW_UPPER_CASE_SHIFT_SOLENOID: STD_LOGIC;
	signal PW_LOWER_CASE_SHIFT_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_R1_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_R2A_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_R2_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_R5_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_T1_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_T2_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_CHK_SOLENOID: STD_LOGIC;
	signal PW_BACKSPACE_SOLENOID: STD_LOGIC;
	signal PW_CARRIAGE_RETURN_SOLENOID: STD_LOGIC;
	signal PW_SPACE_SOLENOID: STD_LOGIC;
	signal MW_KEYBOARD_LOCK_SOLENOID: STD_LOGIC;
	signal LAMP_15A1K24: STD_LOGIC;
	signal LAMP_15A1A16: STD_LOGIC;
	signal LAMP_15A1C16: STD_LOGIC;
	signal LAMP_15A1E16: STD_LOGIC;
	signal LAMP_15A1F16: STD_LOGIC;
	signal LAMP_15A1K23: STD_LOGIC;
	signal LAMP_15A1H14: STD_LOGIC;
	signal LAMP_15A1K14: STD_LOGIC;
	signal LAMP_15A1H16: STD_LOGIC;
	signal LAMP_15A1K15: STD_LOGIC;
	signal LAMP_15A1H15: STD_LOGIC;
	signal LAMP_15A1E17: STD_LOGIC;
	signal LAMP_15A1F17: STD_LOGIC;
	signal LAMP_15A1A17: STD_LOGIC;
	signal LAMP_15A1C17: STD_LOGIC;
	signal LAMP_15A1H17: STD_LOGIC;
	signal LAMP_15A1B14: STD_LOGIC;
	signal LAMP_15A1K16: STD_LOGIC;
	signal LAMP_15A1C15: STD_LOGIC;
	signal LAMP_15A1K17: STD_LOGIC;
	signal LAMP_15A1E21: STD_LOGIC;
	signal LAMP_11C8K07: STD_LOGIC;
	signal LAMP_11C8J07: STD_LOGIC;
	signal LAMP_11C8H07: STD_LOGIC;
	signal LAMP_11C8G07: STD_LOGIC;
	signal LAMP_11C8F07: STD_LOGIC;
	signal LAMP_11C8A02: STD_LOGIC;
	signal LAMP_11C8B02: STD_LOGIC;
	signal LAMP_11C8A01: STD_LOGIC;
	signal LAMP_11C8B01: STD_LOGIC;
	signal LAMP_15A1K20: STD_LOGIC;
	signal LAMP_11C8C14: STD_LOGIC;
	signal LAMP_11C8D14: STD_LOGIC;
	signal LAMP_11C8E14: STD_LOGIC;
	signal LAMP_11C8F14: STD_LOGIC;
	signal LAMP_15A1E14: STD_LOGIC;
	signal LAMP_15A1F14: STD_LOGIC;
	signal LAMP_15A1A14: STD_LOGIC;
	signal LAMP_15A1E15: STD_LOGIC;
	signal LAMP_15A1F15: STD_LOGIC;
	signal LAMP_15A1A15: STD_LOGIC;
	signal LAMP_15A1C11: STD_LOGIC;
	signal LAMP_15A1K12: STD_LOGIC;
	signal LAMP_15A1F11: STD_LOGIC;
	signal LAMP_15A1E11: STD_LOGIC;
	signal LAMP_15A1A11: STD_LOGIC;
	signal LAMP_15A1G08: STD_LOGIC;
	signal LAMP_15A1H08: STD_LOGIC;
	signal LAMP_15A1J08: STD_LOGIC;
	signal LAMP_15A1K08: STD_LOGIC;
	signal LAMP_15A1H12: STD_LOGIC;
	signal LAMP_15A1F12: STD_LOGIC;
	signal LAMP_15A1A12: STD_LOGIC;
	signal LAMP_15A1E12: STD_LOGIC;
	signal LAMP_15A1C12: STD_LOGIC;
	signal LAMP_11C8A12: STD_LOGIC;
	signal LAMP_15A1A19: STD_LOGIC;
	signal LAMP_11C8A13: STD_LOGIC;
	signal LAMP_15A1C19: STD_LOGIC;
	signal LAMP_15A1B19: STD_LOGIC;
	signal LAMP_11C8A10: STD_LOGIC;
	signal LAMP_15A1H20: STD_LOGIC;
	signal LAMP_15A1H19: STD_LOGIC;
	signal LAMP_15A1F19: STD_LOGIC;
	signal LAMP_11C8A07: STD_LOGIC;
	signal LAMP_15A1E20: STD_LOGIC;
	signal LAMP_15A1F20: STD_LOGIC;
	signal LAMP_15A1C20: STD_LOGIC;
	signal LAMP_15A1V01: STD_LOGIC;
	signal LAMP_15A1B15: STD_LOGIC;
	signal LAMP_15A1W01: STD_LOGIC;
	signal LAMP_15A1W04: STD_LOGIC;
	signal LAMP_15A2K03: STD_LOGIC;
	signal LAMP_15A2K05: STD_LOGIC;
	signal LAMP_15A1K22: STD_LOGIC;
	signal LAMP_15A1K21: STD_LOGIC;
	signal LAMP_11C8A04: STD_LOGIC;
	signal LAMP_11C8B05: STD_LOGIC;
	signal LAMP_11C8B04: STD_LOGIC;
	signal LAMP_11C8A05: STD_LOGIC;
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0);
	signal PS_OP_MOD_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_OP_MOD_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_MEM_AR_NOT_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_TTHP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PS_A_CH_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_E_CH_UNIT_STAR_1301_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_E_CH_U_SEL_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_E_CH_U_SEL_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_F_CH_UNIT_STAR_1301_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_F_CH_U_SEL_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_F_CH_U_SEL_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_E2_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_E_CH_TAU_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_I_O_SYNC_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_E_CH_1301_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_E_CH_1405_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_F2_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MS_F2_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_F_CH_TAU_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_F_CH_1301_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MC_CPU_TO_F_CH_1405_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PV_X_LSMS_DRV_IN_BUS: STD_LOGIC_VECTOR (15 downTo 0);
	signal PV_Y_LSMS_DRV_IN_BUS: STD_LOGIC_VECTOR (15 downTo 0);
	signal MV_INH_CHAR_0_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_0_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_1_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_1_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_2_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_2_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_3_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_3_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_ASSEMBLY_CH_Z_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_LOGIC_GATE_RING: STD_LOGIC_VECTOR (10 downTo 1);
	signal LAMPS_IRING: STD_LOGIC_VECTOR (12 downTo 0);
	signal LAMPS_CYCLE_CE: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_CYCLE_CONSOLE: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_SCAN: STD_LOGIC_VECTOR (3 downTo 0);
	signal LAMPS_OPREG_CE: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_OPMOD_CE: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_MAR_UP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_TP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_HP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_THP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_TTHP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_ARING: STD_LOGIC_VECTOR (6 downTo 1);
	signal LAMPS_B_CH: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_A_CH: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_ASSM_CH_NOT: STD_LOGIC_VECTOR (7 downTo 0);
	signal LAMPS_ASSM_CH: STD_LOGIC_VECTOR (7 downTo 0);
		
   constant LAMP_VECTOR_BITS: integer := 203;   
	
	signal LAMP_VECTOR: STD_LOGIC_VECTOR (LAMP_VECTOR_BITS-1 downTo 0);
	signal LAMP_TRANSMITTER_UART_OUTPUT_GRANT: STD_LOGIC;
	signal LAMP_TRANSMITTER_UART_OUTPUT_REQUEST: STD_LOGIC;
	signal LAMP_TRANSMITTER_UART_OUTPUT_DATA: STD_LOGIC_VECTOR (7 downto 0);	
	signal LAMP_TRANSMITTER_REQUESTER_FLUSH: STD_LOGIC;
	signal LAMP_SUPPRESSION: STD_LOGIC := '0';
	
	constant SWITCH_VECTOR_BITS: integer := 280;
	
   -- Switch vector constants
   
	constant SWITCH_ALT_PRIORITY_PL1_INDEX: integer := 275;	-- 19.10.01.1
	constant SWITCH_ALT_PRIORITY_PL2_INDEX: integer := 274;	-- 19.10.01.1
	constant SWITCH_MOM_1ST_TST_SW_PL1_INDEX: integer := 273;	-- 18.14.10.1
	constant SWITCH_MOM_2ND_TST_SW_PL1_INDEX: integer := 272;	-- 18.14.10.1
	constant SWITCH_MOM_3RD_TST_SW_PL1_INDEX: integer := 271;	-- 18.14.10.1
	constant SWITCH_MOM_ADDR_DISP_INDEX: integer := 270;	-- 14.71.30.1
	constant SWITCH_MOM_CE_CPR_RST_INDEX: integer := 269;	-- 12.65.01.1
	constant SWITCH_MOM_CE_START_INDEX: integer := 268;	-- 12.15.02.1
	constant SWITCH_MOM_CE_STOP_SW_PL1_INDEX: integer := 267;	-- 12.15.03.1
	constant SWITCH_MOM_CO_CPR_RST_INDEX: integer := 266;	-- 12.65.01.1
	constant SWITCH_MOM_CONS_START_INDEX: integer := 265;	-- 12.15.02.1
	constant SWITCH_MOM_CONS_STOP_PL1_INDEX: integer := 264;	-- 12.15.03.1
	constant SWITCH_MOM_IO_CHK_RST_PL1_INDEX: integer := 263;	-- 13.65.01.1
	constant SWITCH_MOM_PROG_RESET_INDEX: integer := 262;	-- 12.65.01.1
	constant SWITCH_MOM_STARTPRINT_INDEX: integer := 261;	-- 44.10.01.1
	constant SWITCH_REL_PWR_ON_RST_INDEX: integer := 260;	-- 12.65.01.1
	constant SWITCH_REL_RTC_BUSY_INDEX: integer := 259;	-- 14.15.23.1
	constant SWITCH_ROT_ADDR_ENTRY_DK1_INDEX: integer := 246;	-- 40.10.03.1
	constant SWITCH_ROT_ADDR_ENTRY_DK1_LEN: integer := 13;	-- 40.10.03.1
	constant SWITCH_ROT_ADDR_SEL_DK1_INDEX: integer := 233;	-- 14.71.30.1
	constant SWITCH_ROT_ADDR_SEL_DK1_LEN: integer := 13;	-- 14.71.30.1
	constant SWITCH_ROT_CHECK_CTRL_DK1_INDEX: integer := 220;	-- 40.10.03.1
	constant SWITCH_ROT_CHECK_CTRL_DK1_LEN: integer := 13;	-- 40.10.03.1
	constant SWITCH_ROT_CYCLE_CTRL_DK1_INDEX: integer := 207;	-- 40.10.03.1
	constant SWITCH_ROT_CYCLE_CTRL_DK1_LEN: integer := 13;	-- 40.10.03.1
	constant SWITCH_ROT_HRTC_012_CC_INDEX: integer := 194;	-- 14.15.20.1
	constant SWITCH_ROT_HRTC_012_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_HRTC_01234_CC_INDEX: integer := 181;	-- 14.15.20.1
	constant SWITCH_ROT_HRTC_01234_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_HRTC_56789_CC_INDEX: integer := 168;	-- 14.15.20.1
	constant SWITCH_ROT_HRTC_56789_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_HUNDS_SYNC_DK1_INDEX: integer := 155;	-- 14.17.19.1
	constant SWITCH_ROT_HUNDS_SYNC_DK1_LEN: integer := 13;	-- 14.17.19.1
	constant SWITCH_ROT_I_O_UNIT_DK1_INDEX: integer := 149;	-- 19.10.01.1
	constant SWITCH_ROT_I_O_UNIT_DK1_LEN: integer := 6;	-- 19.10.01.1
	constant SWITCH_ROT_M_RTC_023_CC_INDEX: integer := 136;	-- 14.15.20.1
	constant SWITCH_ROT_M_RTC_023_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_M_RTC_578_CC_INDEX: integer := 123;	-- 14.15.20.1
	constant SWITCH_ROT_M_RTC_578_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_MODE_SW_DK_INDEX: integer := 110;	-- 40.10.01.1
	constant SWITCH_ROT_MODE_SW_DK_LEN: integer := 13;	-- 40.10.01.1
	constant SWITCH_ROT_MRTC_01234_CC_INDEX: integer := 97;	-- 14.15.20.1
	constant SWITCH_ROT_MRTC_01234_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_MRTC_56789_CC_INDEX: integer := 84;	-- 14.15.20.1
	constant SWITCH_ROT_MRTC_56789_CC_LEN: integer := 13;	-- 14.15.20.1
	constant SWITCH_ROT_SCAN_GATE_DK1_INDEX: integer := 71;	-- 14.17.18.1
	constant SWITCH_ROT_SCAN_GATE_DK1_LEN: integer := 13;	-- 14.17.18.1
	constant SWITCH_ROT_STOR_SCAN_DK1_INDEX: integer := 58;	-- 40.10.03.1
	constant SWITCH_ROT_STOR_SCAN_DK1_LEN: integer := 13;	-- 40.10.03.1
	constant SWITCH_ROT_TENS_SYNC_DK1_INDEX: integer := 45;	-- 14.17.17.1
	constant SWITCH_ROT_TENS_SYNC_DK1_LEN: integer := 13;	-- 14.17.17.1
	constant SWITCH_ROT_THOUS_SYNC_DK1_INDEX: integer := 32;	-- 14.17.19.1
	constant SWITCH_ROT_THOUS_SYNC_DK1_LEN: integer := 13;	-- 14.17.19.1
	constant SWITCH_ROT_UNITS_SYNC_DK1_INDEX: integer := 19;	-- 14.17.17.1
	constant SWITCH_ROT_UNITS_SYNC_DK1_LEN: integer := 13;	-- 14.17.17.1
	constant SWITCH_TOG_1401_MODE_PL1_INDEX: integer := 18;	-- 12.65.10.1
	constant SWITCH_TOG_ADDR_STOP_PL1_INDEX: integer := 17;	-- 12.15.04.1
	constant SWITCH_TOG_ASTERISK_PL1_INDEX: integer := 16;	-- 40.10.03.1
	constant SWITCH_TOG_ASTERISK_PL2_INDEX: integer := 15;	-- 15.49.06.1
	constant SWITCH_TOG_AUTO_START_PL1_INDEX: integer := 14;	-- 40.10.03.1
	constant SWITCH_TOG_CH_1_INDEX: integer := 13;	-- 40.10.02.1
	constant SWITCH_TOG_CH_2_INDEX: integer := 12;	-- 40.10.02.1
	constant SWITCH_TOG_INHIBIT_PO_PL1_INDEX: integer := 11;	-- 40.10.03.1
	constant SWITCH_TOG_INHIBIT_PO_PL2_INDEX: integer := 10;	-- 44.10.01.1
	constant SWITCH_TOG_I_O_CHK_ST_PL1_INDEX: integer := 9;	-- 12.15.04.1
	constant SWITCH_TOG_SENSE_SW_1_PL1_INDEX: integer := 8;	-- 15.60.01.1
	constant SWITCH_TOG_SENSE_SW_2_PL1_INDEX: integer := 7;	-- 15.60.02.1
	constant SWITCH_TOG_SENSE_SW_4_PL1_INDEX: integer := 6;	-- 15.60.03.1
	constant SWITCH_TOG_SENSE_SW_8_PL1_INDEX: integer := 5;	-- 15.60.04.1
	constant SWITCH_TOG_SENSE_SW_A_PL1_INDEX: integer := 4;	-- 15.60.05.1
	constant SWITCH_TOG_SENSE_SW_B_PL1_INDEX: integer := 3;	-- 15.60.06.1
	constant SWITCH_TOG_SENSE_SW_C_PL1_INDEX: integer := 2;	-- 15.60.07.1
	constant SWITCH_TOG_SENSE_SW_W_PL1_INDEX: integer := 1;	-- 15.60.08.1
	constant SWITCH_TOG_WR_INHIBIT_PL1_INDEX: integer := 0;	-- 40.10.03.1
	
	-- Initial switch vector (TODO: may need a copy of this to reset switches when we first power up)
	
	signal SWITCH_VECTOR: STD_LOGIC_VECTOR (SWITCH_VECTOR_BITS-1 downTo 0) := (others => '0');	
   signal SWITCH_VECTOR_INIT: STD_LOGIC_VECTOR (SWITCH_VECTOR_BITS-1 downTo 0) := (
      SWITCH_ROT_MODE_SW_DK_INDEX+7 => '1', SWITCH_ROT_ADDR_ENTRY_DK1_INDEX+5 => '1', 
      SWITCH_ROT_CHECK_CTRL_DK1_INDEX+2 => '1', SWITCH_ROT_CYCLE_CTRL_DK1_INDEX+2 => '1',
      SWITCH_ROT_STOR_SCAN_DK1_INDEX+3 => '1', SWITCH_MOM_STARTPRINT_INDEX => '1',
      SWITCH_TOG_ASTERISK_PL2_INDEX => '1',
      others => '0');
   signal SWITCHES_DEBUG_VECTOR: STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
   
   -- Debounced hardware START switch
   
   signal BUTTON_START_CENTER_DEBOUNCED: STD_LOGIC;
   signal BUTTON_UP_TOP_DEBOUNCED: STD_LOGIC;

   -- UART Subsystem Interface Signals
   
   signal UART_RESET: STD_LOGIC;
   signal UART_SWITCH_RESET: STD_LOGIC;
   
   signal UART_OUTPUT_REQUESTER_STROBES: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_0: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_1: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_2: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_3: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_4: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_5: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_6: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_REQUEST_DATA_7: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_ARBITER_REQUESTS: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_ARBITER_GRANTS: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_OUTPUT_TX_DATA: STD_LOGIC;
   
   -- Number of UART/UDP input FIFOs
   
   constant UART_INPUT_FIFO_COUNT: integer := 8;
   
   -- UDP/UART Input FIFO index assignments
   
   constant INPUT_SUBSYSTEM_SWITCHES_INDEX:      integer := 0;
   constant INPUT_SUBSYSTEM_CONSOLE_INDEX:       integer := 1;
   constant INPUT_SUBSYSTEM_MEMORY_LOADER_INDEX: integer := 2;
   constant INPUT_SUBSYSTEM_TAU_CH_1_INDEX:      integer := 4;
   constant INPUT_SUBSYSTEM_TAU_CH_2_INDEX:      integer := 3;
   
   -- UART input FIFO interface signals   
    
   signal UART_RCV_DATA_VALID: STD_LOGIC := '0';
   signal UART_RCV_DATA: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UART_INPUT_FIFO_WRITE_ENABLES: STD_LOGIC_VECTOR (UART_INPUT_FIFO_COUNT-1 downto 0) := (others => '0');
   signal UART_INPUT_FIFO_WRITE_DATA: STD_LOGIC_VECTOR(7 downto 0);
   signal UART_INPUT_CURRENT_STREAM: STD_LOGIC_VECTOR(7 downto 0);
      
   -- UART Interface Signals

   signal IBM1410_CONSOLE_XMT_CHAR: STD_LOGIC_VECTOR(7 downto 0);
   signal IBM1410_CONSOLE_XMT_STROBE: STD_LOGIC;
   signal IBM1410_CONSOLE_LOCK_XMT_CHAR: STD_LOGIC_VECTOR(7 downto 0);
   signal IBM1410_CONSOLE_LOCK_XMT_STROBE: STD_LOGIC;
   
   -- Tape adapter UART output signals 
   
   signal IBM1410_TAU_XMT_UART_DATA: STD_LOGIC_VECTOR(7 downto 0) := "00000000";
   signal IBM1410_TAU_XMT_UART_REQUEST: STD_LOGIC := '0';
   signal IBM1410_TAU_XMT_UART_GRANT: STD_LOGIC := '0'; 
   signal IBM1410_TAU_XMT_UDP_FLUSH:  STD_LOGIC := '0';   
   signal IBM1410_TAU_XMT_UART_DATA_F_CH: STD_LOGIC_VECTOR(7 downto 0) := "00000000";
   signal IBM1410_TAU_XMT_UART_REQUEST_F_CH: STD_LOGIC := '0';
   signal IBM1410_TAU_XMT_UART_GRANT_F_CH: STD_LOGIC := '0';              
   signal IBM1410_TAU_XMT_UDP_FLUSH_F_CH:  STD_LOGIC := '0';   
   
   signal w_TX_SERIAL: STD_LOGIC;
   signal w_TX_Active: STD_LOGIC;
   signal w_TX_DONE: STD_LOGIC;
   signal r_TX_BYTE: STD_LOGIC_VECTOR (7 downto 0); 
   
   -- signal i_TX_DV: STD_LOGIC;
   
   signal SLOW_TYPING: STD_LOGIC := '1';  -- 1 for normal selectric speeds

   -- signals for the MII to RMII Ethernet interface
   
   signal mac2rmii_tx_en: STD_LOGIC;
   signal mac2rmii_txd: STD_LOGIC_VECTOR(3 DOWNTO 0);
   signal mac2rmii_tx_er: STD_LOGIC;
   signal rmii2mac_tx_clk: STD_LOGIC;
   signal rmii2mac_rx_clk: STD_LOGIC;
   signal rmii2mac_col: STD_LOGIC;
   signal rmii2mac_crs: STD_LOGIC;
   signal rmii2mac_rx_dv: STD_LOGIC;
   signal rmii2mac_rx_er: STD_LOGIC := '0';
   signal rmii2mac_rxd: STD_LOGIC_VECTOR(3 DOWNTO 0);
   signal mmcm_locked: STD_LOGIC;

   signal udp_local_mac:   STD_LOGIC_VECTOR(47 downto 0) := X"020001040A00";
   signal udp_local_ip:    STD_LOGIC_VECTOR(31 downto 0) := X"C0A82AFE";  -- 192.168.42.254
   signal udp_gateway_ip:  STD_LOGIC_VECTOR(31 downto 0) := X"C0A82A01";  -- 192.168.42.1
   signal udp_subnet_mask: STD_LOGIC_VECTOR(31 downto 0) := X"FFFFFF00";  -- 255.255.255.000
   signal udp_remote_ip:   STD_LOGIC_VECTOR(31 downto 0) := X"C0A82A3C";  -- 192.168.42.60
   signal udp_remote_port: STD_LOGIC_VECTOR(15 downto 0) := X"0400";
   
   -- Signals for UDP Input from the Network
   
   signal rx_udp_hdr_ready:       STD_LOGIC := '0';
   signal rx_udp_hdr_valid:       STD_LOGIC;
   signal rx_match_cond:          STD_LOGIC := '0';
   
   signal rx_udp_ip_source_ip:    STD_LOGIC_VECTOR(31 downto 0) := X"00000000";
   signal rx_udp_ip_dest_ip:      STD_LOGIC_VECTOR(31 downto 0) := X"00000000";
   signal rx_udp_source_port:     STD_LOGIC_VECTOR(15 downto 0) := X"0000";
   signal rx_udp_dest_port:       STD_LOGIC_VECTOR(15 downto 0) := X"0000";
   signal rx_udp_length:          STD_LOGIC_VECTOR(15 downto 0) := X"0000";
   
   signal rx_udp_payload_axis_tready: STD_LOGIC := '0';
   signal rx_udp_payload_axis_tvalid: STD_LOGIC;
   signal rx_udp_payload_axis_tlast:  STD_LOGIC;
   signal rx_udp_payload_axis_tdata:  STD_LOGIC_VECTOR(7 downto 0) := X"00";

   -- Signals for providing a UART like interface to UDP

   signal UDP_UART_TX_DATA_VALID:     std_logic := '0';
   signal UDP_UART_TX_FLUSH:          std_logic := '0';
   signal UDP_UART_TX_BYTE:           std_logic_vector (7 downto 0) := X"00";
   signal UDP_UART_TX_ACTIVE:         std_logic := '0';
   signal UDP_DUMMY_SERIAL_OUTPUT:    std_logic := '0';  -- Used for testing ONLY
   
   signal UDP_UART_RX_DATA_READY:     std_logic := '0';
   signal UDP_UART_RX_DATA_VALID:     std_logic := '0';
   signal UDP_UART_RX_BYTE:           std_logic_vector (7 downto 0) := X"00";
   signal UDP_UART_RX_PACKET_END:     std_logic := '0';

   -- UDP Input FIFOs Interface Signals

   constant UDP_INPUT_FIFO_COUNT: integer := 8;

   signal UDP_INPUT_FIFO_WRITE_ENABLES: STD_LOGIC_VECTOR (UDP_INPUT_FIFO_COUNT-1 downto 0) 
      := (others => '0');
   signal UDP_INPUT_FIFO_WRITE_DATA: STD_LOGIC_VECTOR(7 downto 0);
   signal UDP_INPUT_CURRENT_STREAM: STD_LOGIC_VECTOR(7 downto 0);
   
   
   -- Signals for UDP output TO the network
   
   signal tx_udp_ip_source_ip:        STD_LOGIC_VECTOR(31 downto 0) := X"00000000";
   signal tx_udp_ip_dest_ip:          STD_LOGIC_VECTOR(31 downto 0) := X"00000000";
   signal tx_udp_source_port:         STD_LOGIC_VECTOR(15 downto 0) := X"0000";
   signal tx_udp_dest_port:           STD_LOGIC_VECTOR(15 downto 0) := X"0000";
   
   signal tx_udp_hdr_ready:           STD_LOGIC := '0';
   signal tx_udp_hdr_valid:           STD_LOGIC := '0';
   
   signal tx_udp_payload_axis_tready: STD_LOGIC := '0';
   signal tx_udp_payload_axis_tdata:  STD_LOGIC_VECTOR(7 downto 0) := X"00";
   signal tx_udp_payload_axis_tvalid: STD_LOGIC := '0';
   signal tx_udp_payload_axis_tlast:  STD_LOGIC := '0';

   -- Signals for UDP based 1410 output subsystem
   
   constant UDP_UART_MAX_PACKET:      integer := 512;  -- 1450 later
   
   
   -- The Ethernet PHY has some special erset considerations...
      
   signal UDP_RESET:         STD_LOGIC := '0';
   signal UDP_RESETn:        STD_LOGIC := '1';
   signal phy_reset:         STD_LOGIC := '0';
   signal phy_resetn:        STD_LOGIC := '1';
   
   type resetStateType is (RESET_INIT, RESET_IDLE, RESET_COUNTING);
   SIGNAL resetState: resetStateType := RESET_INIT;
   SIGNAL nextResetState: resetStateType := RESET_INIT;
   SIGNAL resetCounter: STD_LOGIC_VECTOR(15 downto 0) := X"0000";
      
   signal phy_ref_clk_50Mhz: STD_LOGIC;
   signal udp_debug_leds:    STD_LOGIC_VECTOR(7 downto 0);
   
   signal UDP_OUTPUT_REQUESTER_STROBES: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUESTER_FLUSHES: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_0: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_1: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_2: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_3: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_4: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_5: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_6: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_REQUEST_DATA_7:  STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_ARBITER_REQUESTS : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
   signal UDP_OUTPUT_ARBITER_GRANTS: STD_LOGIC_VECTOR (7 downto 0) := "00000000";
      
   -- signals for direct memory access from PC console support program
   
   
    signal IBM1410_DIRECT_MEMORY_ADDRESS:      STD_LOGIC_VECTOR(13 downto 0);
    signal IBM1410_DIRECT_MEMORY_ENABLE:       STD_LOGIC_VECTOR(3 downto 0);
    signal IBM1410_DIRECT_MEMORY_WRITE_ENABLE: STD_LOGIC_VECTOR(3 downto 0);
    signal IBM1410_DIRECT_MEMORY_WRITE_DATA:   STD_LOGIC_VECTOR(7 downto 0);
    signal IBM1410_DIRECT_MEMORY_READ_DATA_0:  STD_LOGIC_VECTOR(7 downto 0);
    signal IBM1410_DIRECT_MEMORY_READ_DATA_1:  STD_LOGIC_VECTOR(7 downto 0);
    signal IBM1410_DIRECT_MEMORY_READ_DATA_2:  STD_LOGIC_VECTOR(7 downto 0);
    signal IBM1410_DIRECT_MEMORY_READ_DATA_3:  STD_LOGIC_VECTOR(7 downto 0);
    signal IBM1410_MEMORY_LOADER_DEBUG_VECTOR: STD_LOGIC_VECTOR(4 downto 0);
  
   
-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;
   
   -- Run the console at 115200 bps
   
   constant c_CLKS_PER_BIT : integer := 100000000 / 115200;
   
   -- LAMP vector transmission constants

   constant CLOCKPERIOD: integer := 10;  -- nanoseconds per FPGA clock cycle
   constant REFRESH_TIME: integer := 50 * 1000 * 1000;  -- nanoseconds between lamp refreshes

   -- TEMPORARY signals for testing UDP from this level
   
   type txUartTestStateType is(TX_UART_TEST_IDLE, TX_UART_TEST_FILL, TX_UART_TEST_DONE);
   signal txUartTestState: txUartTestStateType := TX_UART_TEST_IDLE;
   
   signal tx_fill_counter:            integer range 0 to 63;
   
   type outputSubsystemTestStateType is (outputSubsystemTestIdle,
      outputSubsystemTest1a, outputSubsystemTest1b,
      outputSubsystemTest2a, outputSubsystemTest2b,
      outputSubsystemTest3a, outputSubsystemTest3b ,outputSubsystemTest3c,
      outputSubsystemTest4a, outputSubsystemTest4b, outputSubsystemTest4c,
      outputSubsystemTest4d, outputSubsystemTest4e,
      outputSubsystemTestButtonWait);
   signal outputSubsystemTestState: outputSubsystemTestStateType := outputSubsystemTestIdle;
   
   
   type rxTestStateType is (RX_IDLE, RX_MATCH, RX_VALID, RX_DONE);
   signal rxTestState: rxTestStateType := RX_IDLE;
   
   signal rx_first_byte:              STD_LOGIC_VECTOR(7 downto 0);
   signal rx_last_byte:               STD_LOGIC_VECTOR(7 downto 0);
   signal rx_byte_count:              integer range 0 to 4095 := 0;
   signal rx_delay_counter:           integer range 0 to 100 := 0;
      

--procedure check1(
--    checked: in STD_LOGIC;
--    val: in STD_LOGIC;
--    testname: in string;
--    test: in string) is
--    begin    
--    assert checked = val report testname & " (" & test & ") failed." severity failure;
--    end procedure;
      

--   -- Your test bench declarations go here

   signal initSystem: STD_LOGIC := '1';
   signal notInitSystem: STD_LOGIC;

   constant TMR_CNTR_MAX : std_logic_vector(26 downto 0) := "101111101011110000100000000"; --100,000,000 = clk cycles per second
   constant TMR_CNTR_100 : std_logic_vector(26 downto 0) := "000000000011000011010100000"; -- 1ms reset start time
   constant TMR_CNTR_200 : std_logic_vector(26 downto 0) := "000000000100100100111110000"; -- 1.5ms reset end time (0.5ms reset)
   signal tmrCntr : std_logic_vector(26 downto 0) := (others => '0');

   signal LOCAL_MY_MEM_AR_NOT_TTHP_BUS: STD_LOGIC_VECTOR(4 downto 0);
   
   signal debugMCReady: STD_LOGIC := '1';
   signal debugMCBusy: STD_LOGIC := '1';
   signal debugMCSelAtLP: STD_LOGIC := '1';
   signal debugMCSelRewind: STD_LOGIC := '1';
   signal debugECHReady: STD_LOGIC := '0';
   signal debugMCRewindCall: STD_LOGIC := '1';
         
---- END USER TEST BENCH DECLARATIONS
   

	begin
	
	-- Instantiate the 1411 CPU

	IntegrationTest4FPGA: IntegrationTest4 port map(
		FPGA_CLK => CLK,
		PP_SPECIAL_OR_12V_POWER_FOR_OSC => PP_SPECIAL_OR_12V_POWER_FOR_OSC,
		MV_36_VOLTS => MV_36_VOLTS,
		-- GROUND => GROUND,
		PS_INSTRUCTION_CHECK_GATE_STAR_1311 => PS_INSTRUCTION_CHECK_GATE_STAR_1311,
		MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR => MS_FORMS_STACK_GO_F_CH_STAR_1414_STAR,
		PS_COMP_DISABLE_CYCLE_STAR_1412_19 => PS_COMP_DISABLE_CYCLE_STAR_1412_19,
		PS_START_AUTO_STARTMODE_STAR_AUTS_STAR => PS_START_AUTO_STARTMODE_STAR_AUTS_STAR,
		PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR => PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR,
		M36_VOLTS => M36_VOLTS,
		PS_BRANCH_TO_A_COND_STAR_1412_19 => PS_BRANCH_TO_A_COND_STAR_1412_19,
		PS_SET_NO_SCAN_CTRL_STAR_1412_19 => PS_SET_NO_SCAN_CTRL_STAR_1412_19,
		PS_SET_B_CYCLE_CTRL_STAR_1412_19 => PS_SET_B_CYCLE_CTRL_STAR_1412_19,
		PS_NO_BRANCH_COND_STAR_1412_19 => PS_NO_BRANCH_COND_STAR_1412_19,
		PS_LAST_EXECUTE_CYCLE_STAR_1412_19 => PS_LAST_EXECUTE_CYCLE_STAR_1412_19,
		MC_BUFFER_INQ_REQUEST => MC_BUFFER_INQ_REQUEST,
		MC_BUFFER_OUTQUIRY_PULSE => MC_BUFFER_OUTQUIRY_PULSE,
		PS_SPEC_BRANCH_LATCH_STAR_1414_STAR => PS_SPEC_BRANCH_LATCH_STAR_1414_STAR,
		MC_PRINTER_CHANNEL_9 => MC_PRINTER_CHANNEL_9,
		MC_PRINTER_CHANNEL_12 => MC_PRINTER_CHANNEL_12,
		MC_FORMS_BUSY_STATUS_TO_CPU => MC_FORMS_BUSY_STATUS_TO_CPU,
		MC_READ_COLUMN_BINARY => MC_READ_COLUMN_BINARY,
		MC_1301_READY_E_CH => MC_1301_READY_E_CH,
		MC_1405_READY_E_CH => MC_1405_READY_E_CH,
		MC_BUFFER_READY => MC_BUFFER_READY,
		PS_E_CH_READY_BUS_STAR_SIF => PS_E_CH_READY_BUS_STAR_SIF,
		PS_E_CH_READY_BUS_STAR_1412_19 => PS_E_CH_READY_BUS_STAR_1412_19,
		MC_TAPE_READY => MC_TAPE_READY,
		MC_TAPE_READY_F_CH_JRJ => MC_TAPE_READY_F_CH_JRJ,
		MC_BUFFER_READY_JRJ => MC_BUFFER_READY_JRJ,
		MC_SELECT_AND_REWIND_STAR_E_CH => MC_SELECT_AND_REWIND_STAR_E_CH,
		MC_1301_BUSY_E_CH => MC_1301_BUSY_E_CH,
		PS_E_CH_BUSY_BUS_STAR_1412_19 => PS_E_CH_BUSY_BUS_STAR_1412_19,
		MC_1405_BUSY_E_CH => MC_1405_BUSY_E_CH,
		MC_BUFFER_BUSY => MC_BUFFER_BUSY,
		MC_BUFFER_BUSY_JRJ => MC_BUFFER_BUSY_JRJ,
		MC_TAPE_BUSY => MC_TAPE_BUSY,
		MC_TAPE_BUSY_F_CH_JRJ => MC_TAPE_BUSY_F_CH_JRJ,
		MC_1301_ERROR_E_CH => MC_1301_ERROR_E_CH,
		MC_1405_ERROR_E_CH => MC_1405_ERROR_E_CH,
		MC_BUFFER_ERROR => MC_BUFFER_ERROR,
		MC_BUFFER_ERROR_JRJ => MC_BUFFER_ERROR_JRJ,
		PS_E_CH_CHECK_BUS_STAR_SIF => PS_E_CH_CHECK_BUS_STAR_SIF,
		PS_E_CH_CHECK_BUS_STAR_1412_19 => PS_E_CH_CHECK_BUS_STAR_1412_19,
		MC_TAPE_ERROR => MC_TAPE_ERROR,
		MC_TAPE_ERROR_F_CH_JRJ => MC_TAPE_ERROR_F_CH_JRJ,
		MC_1301_E_CH_CONDITION => MC_1301_E_CH_CONDITION,
		MC_1405_CONDITION_E_CH => MC_1405_CONDITION_E_CH,
		MC_BUFFER_CONDITION => MC_BUFFER_CONDITION,
		MC_BUFFER_CONDITION_JRJ => MC_BUFFER_CONDITION_JRJ,
		MC_SEL_OR_TAPE_IND_ON_CH_1 => MC_SEL_OR_TAPE_IND_ON_CH_1,
		MC_RBC_ERROR_1405_E_CH => MC_RBC_ERROR_1405_E_CH,
		PS_E_CH_COND_LATCH_STAR_SIF => PS_E_CH_COND_LATCH_STAR_SIF,
		MV_CONSOLE_PWR_SUPPLY_36_VOLTS => MV_CONSOLE_PWR_SUPPLY_36_VOLTS,
		PS_OP_MOD_SYM_IO_STATUS_STAR_1414_STAR => PS_OP_MOD_SYM_IO_STATUS_STAR_1414_STAR,
		PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF => PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF,
		PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF_JRJ => PS_R_OR_DOLL_SGN_OP_MOD_STAR_SIF_JRJ,
		PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF => PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF,
		PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF_JRJ => PS_W_OR_X_SYMBOL_OP_MOD_STAR_SIF_JRJ,
		MS_I_OR_O_OP_CODES_STAR_12_19 => MS_I_OR_O_OP_CODES_STAR_12_19,
		MS_E_CH_2_CHAR_OP_CODES_STAR_1414_STAR => MS_E_CH_2_CHAR_OP_CODES_STAR_1414_STAR,
		PS_P_OR_Q_2_CHAR_OP_1412_19 => PS_P_OR_Q_2_CHAR_OP_1412_19,
		MC_1301_END_ADDR_TRF_E_CH => MC_1301_END_ADDR_TRF_E_CH,
		MC_BUFFER_END_OF_TRANSFER => MC_BUFFER_END_OF_TRANSFER,
		PS_E_CH_EXT_END_OF_TRF_STAR_1311 => PS_E_CH_EXT_END_OF_TRF_STAR_1311,
		PS_E_CH_EXT_END_OF_TRF_STAR_SIF => PS_E_CH_EXT_END_OF_TRF_STAR_SIF,
		PS_E_CH_EXT_END_OF_TRF_STAR_1412_19 => PS_E_CH_EXT_END_OF_TRF_STAR_1412_19,
		MC_1405_END_OF_OP_STAR_E_CH => MC_1405_END_OF_OP_STAR_E_CH,
		UNNAMED_26_DOT_00_DOT_01_DOT_0 => UNNAMED_26_DOT_00_DOT_01_DOT_0,
		MC_TAPE_IN_PROCESS => MC_TAPE_IN_PROCESS,
		MC_TAPE_IN_PROCESS_F_CH_JRJ => MC_TAPE_IN_PROCESS_F_CH_JRJ,
		MC_1301_END_OF_OP_STAR_E_CH => MC_1301_END_OF_OP_STAR_E_CH,
		PS_GATE_OFF_E_CH_EXT_END_OF_TRF => PS_GATE_OFF_E_CH_EXT_END_OF_TRF,
		MS_E_CH_SEL_ODD_PARITY_STAR_1412_19 => MS_E_CH_SEL_ODD_PARITY_STAR_1412_19,
		PS_E_CH_SELECT_7_BIT_UNIT_STAR_SIF => PS_E_CH_SELECT_7_BIT_UNIT_STAR_SIF,
		PS_END_OF_RECORD_STAR_1311 => PS_END_OF_RECORD_STAR_1311,
		PS_E_CH_SIF_SENSE_OR_CONTROL => PS_E_CH_SIF_SENSE_OR_CONTROL,
		PS_INT_END_OF_XFER_STAR_1311 => PS_INT_END_OF_XFER_STAR_1311,
		PS_F_CH_RESET_STAR_1414 => PS_F_CH_RESET_STAR_1414,
		PS_F_CH_SELECT_ODD_PARITY_STAR_1414 => PS_F_CH_SELECT_ODD_PARITY_STAR_1414,
		PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_SIF => PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_SIF,
		PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_2_9 => PS_F_CH_SEL_ODD_PARITY_UNIT_STAR_2_9,
		PS_F_CH_SELECT_7_BIT_UNIT_STAR_SIF => PS_F_CH_SELECT_7_BIT_UNIT_STAR_SIF,
		PS_F_CH_SELECT_7_BIT_UNIT_STAR_1414 => PS_F_CH_SELECT_7_BIT_UNIT_STAR_1414,
		MC_FILE_INVALID_ADDRESS_1405 => MC_FILE_INVALID_ADDRESS_1405,
		MS_E_CH_U_SEL_K_DOT_S_OP_MOD => MS_E_CH_U_SEL_K_DOT_S_OP_MOD,
		MS_F_CH_U_SEL_K_DOT_S_OP_MOD => MS_F_CH_U_SEL_K_DOT_S_OP_MOD,
		MS_RECOVER_LATCH_STAR_1311 => MS_RECOVER_LATCH_STAR_1311,
		PS_GT_OFF_E_CH_ST_SPL_DLY => PS_GT_OFF_E_CH_ST_SPL_DLY,
		PS_BLOCK_IO_LAST_EXECUTE => PS_BLOCK_IO_LAST_EXECUTE,
		MS_F_CH_CON_LAT_SET_STAR_1414_STAR => MS_F_CH_CON_LAT_SET_STAR_1414_STAR,
		MC_1301_ERROR_F_CH => MC_1301_ERROR_F_CH,
		MC_1405_ERROR_F_CH => MC_1405_ERROR_F_CH,
		PS_F_CH_CHECK_STAR_SIF => PS_F_CH_CHECK_STAR_SIF,
		PS_F_CH_CHECK_BUS_STAR_1414_STAR => PS_F_CH_CHECK_BUS_STAR_1414_STAR,
		MC_RBC_ERROR_1405_F_CH => MC_RBC_ERROR_1405_F_CH,
		PS_F_CH_CHECK_STAR_1412_19 => PS_F_CH_CHECK_STAR_1412_19,
		MS_F_CH_COND_LATCH_STAR_SIF => MS_F_CH_COND_LATCH_STAR_SIF,
		TW_RBC_ERROR_1405_F_CH => TW_RBC_ERROR_1405_F_CH,
		MC_1301_F_CH_CONDITION => MC_1301_F_CH_CONDITION,
		MC_1405_CONDITION_F_CH => MC_1405_CONDITION_F_CH,
		MC_SEL_OR_TI_ON_CH_2 => MC_SEL_OR_TI_ON_CH_2,
		PS_F_CH_COND_BUS_STAR_1414_STAR => PS_F_CH_COND_BUS_STAR_1414_STAR,
		MS_SET_F_CH_CON_LATCH_STAR_1414_STAR => MS_SET_F_CH_CON_LATCH_STAR_1414_STAR,
		PS_F_CH_SIF_SENSE_OR_CONTROL => PS_F_CH_SIF_SENSE_OR_CONTROL,
		MC_1301_READY_F_CH => MC_1301_READY_F_CH,
		MC_1405_READY_F_CH => MC_1405_READY_F_CH,
		PS_F_CH_READY_BUS_STAR_1414_STAR => PS_F_CH_READY_BUS_STAR_1414_STAR,
		PS_F_CH_READY_BUS_STAR_1412_19 => PS_F_CH_READY_BUS_STAR_1412_19,
		PS_F_CH_READY_BUS_STAR_SIF => PS_F_CH_READY_BUS_STAR_SIF,
		MC_SELECT_AND_REWIND_STAR_F_CH => MC_SELECT_AND_REWIND_STAR_F_CH,
		PS_F_CH_BUSY_BUS_STAR_1414_STAR => PS_F_CH_BUSY_BUS_STAR_1414_STAR,
		PS_F_CH_BUSY_BUS_STAR_1412_19 => PS_F_CH_BUSY_BUS_STAR_1412_19,
		MC_1301_BUSY_F_CH => MC_1301_BUSY_F_CH,
		MC_1405_BUSY_F_CH => MC_1405_BUSY_F_CH,
		PS_F_CH_CLR_LATCH_STAR_1414_STAR => PS_F_CH_CLR_LATCH_STAR_1414_STAR,
		PS_RESET_F_CH_CLR_LAT_STAR_1414_STAR => PS_RESET_F_CH_CLR_LAT_STAR_1414_STAR,
		MC_SELECT_AT_LOAD_POINT_STAR_F_CH => MC_SELECT_AT_LOAD_POINT_STAR_F_CH,
		MC_WRITE_CONDITION_STAR_F_CH => MC_WRITE_CONDITION_STAR_F_CH,
		PS_ASSEMBLY_TO_F_CH_STAR_1414_STAR => PS_ASSEMBLY_TO_F_CH_STAR_1414_STAR,
		PS_GATE_F_CH_ST_SAMPLE_A_STAR_1414_STAR => PS_GATE_F_CH_ST_SAMPLE_A_STAR_1414_STAR,
		MC_1301_END_ADDR_TRF_F_CH => MC_1301_END_ADDR_TRF_F_CH,
		PS_SET_F_CH_EXT_END_TRF_STAR_SIF => PS_SET_F_CH_EXT_END_TRF_STAR_SIF,
		PS_F_CH_EXT_END_OF_TRF_BUS_STAR_1414 => PS_F_CH_EXT_END_OF_TRF_BUS_STAR_1414,
		PS_SET_F_CH_EXT_END_TRF_STAR_1412_19 => PS_SET_F_CH_EXT_END_TRF_STAR_1412_19,
		MC_1301_END_OF_OP_STAR_F_CH => MC_1301_END_OF_OP_STAR_F_CH,
		MC_1405_END_OF_OP_STAR_F_CH => MC_1405_END_OF_OP_STAR_F_CH,
		MC_1403_PRINT_BUFFER_BUSY => MC_1403_PRINT_BUFFER_BUSY,
		MC_I_O_PRINTER_READY => MC_I_O_PRINTER_READY,
		MC_SELECT_AT_LOAD_POINT_STAR_E_CH => MC_SELECT_AT_LOAD_POINT_STAR_E_CH,
		MC_WRITE_CONDITION_STAR_E_CH => MC_WRITE_CONDITION_STAR_E_CH,
		PS_GATE_ON_E_CH_END_ADDR_TRF => PS_GATE_ON_E_CH_END_ADDR_TRF,
		PS_WR_INHIBIT_STAR_7631_STAR_E_CH => PS_WR_INHIBIT_STAR_7631_STAR_E_CH,
		PS_SET_E_CH_NO_TRANS_LAT_STAR_SIF => PS_SET_E_CH_NO_TRANS_LAT_STAR_SIF,
		PS_SET_E_CH_NO_TRANS_LAT_STAR_12_19 => PS_SET_E_CH_NO_TRANS_LAT_STAR_12_19,
		MC_BUFFER_NO_TRANS_COND => MC_BUFFER_NO_TRANS_COND,
		MC_BUFFER_NO_TRANS_COND_JRJ => MC_BUFFER_NO_TRANS_COND_JRJ,
		MC_ADDR_COMP_TRUE_F_CH => MC_ADDR_COMP_TRUE_F_CH,
		MC_FAST_FILE_ON_LINE_F_CH => MC_FAST_FILE_ON_LINE_F_CH,
		MS_1311_F_CH_END_ADDR_TRF => MS_1311_F_CH_END_ADDR_TRF,
		PS_WR_INHIBIT_STAR_7631_STAR_F_CH => PS_WR_INHIBIT_STAR_7631_STAR_F_CH,
		PS_F_CH_NO_TRF_LATCH_STAR_SIF => PS_F_CH_NO_TRF_LATCH_STAR_SIF,
		PS_SET_F_CH_NO_TRANS_LAT_STAR_1414_STAR => PS_SET_F_CH_NO_TRANS_LAT_STAR_1414_STAR,
		PS_F_CH_NO_TRANS_LAT_STAR_12_19 => PS_F_CH_NO_TRANS_LAT_STAR_12_19,
		MC_E_CH_FILE_DIGIT_RING_7 => MC_E_CH_FILE_DIGIT_RING_7,
		MC_F_CH_FILE_DIGIT_RING_7 => MC_F_CH_FILE_DIGIT_RING_7,
		MINUS_36_VOLTS => MINUS_36_VOLTS,
		PS_OPTIONAL_SYNC_COND_STAR_CE => PS_OPTIONAL_SYNC_COND_STAR_CE,
		MS_OPTIONAL_SYNC_COND_A => MS_OPTIONAL_SYNC_COND_A,
		MS_OPTIONAL_SYNC_COND_B => MS_OPTIONAL_SYNC_COND_B,
		PS_BLOCK_ADDR_MOD_OR_1_STAR_1412_19 => PS_BLOCK_ADDR_MOD_OR_1_STAR_1412_19,
		PS_ADDR_MOD_SET_TO_1_STAR_1412_19 => PS_ADDR_MOD_SET_TO_1_STAR_1412_19,
		PS_1311_SET_AAR => PS_1311_SET_AAR,
		PS_1311_SET_DAR_STAR_1401 => PS_1311_SET_DAR_STAR_1401,
		PS_1311_RESET_AAR => PS_1311_RESET_AAR,
		MS_1311_RESET_DAR_STAR_1401 => MS_1311_RESET_DAR_STAR_1401,
		MS_SCAN_RESTART_LATCH_STAR_1311 => MS_SCAN_RESTART_LATCH_STAR_1311,
		PS_BLOCK_BAR_RO_E_CH_STAR_1311 => PS_BLOCK_BAR_RO_E_CH_STAR_1311,
		PS_BLOCK_BAR_RO_F_CH_STAR_1311 => PS_BLOCK_BAR_RO_F_CH_STAR_1311,
		PS_1311_RO_DAR_STAR_1401 => PS_1311_RO_DAR_STAR_1401,
		PS_E2_FULL_LATCH_STAR_SIF => PS_E2_FULL_LATCH_STAR_SIF,
		MS_F_CH_OUTPUT_WM_CYCLE_STAR_1414_STAR => MS_F_CH_OUTPUT_WM_CYCLE_STAR_1414_STAR,
		PS_OUTPUT_FIELD_CYCLE_STAR_1414_STAR => PS_OUTPUT_FIELD_CYCLE_STAR_1414_STAR,
		PS_ASM_CH_A_BIT_STAR_STERLING => PS_ASM_CH_A_BIT_STAR_STERLING,
		MS_SET_F_U_SEL_REG_2_BIT_STAR_1414_STAR => MS_SET_F_U_SEL_REG_2_BIT_STAR_1414_STAR,
		MS_SET_F_U_SEL_REG_1_BIT_STAR_1414_STAR => MS_SET_F_U_SEL_REG_1_BIT_STAR_1414_STAR,
		MV_CONSOLE_C_INPUT_STAR_CHK_OP => MV_CONSOLE_C_INPUT_STAR_CHK_OP,
		MC_BUFFER_STROBE => MC_BUFFER_STROBE,
		MC_SET_ECH_STROB_TR_E_FR_FEATS => MC_SET_ECH_STROB_TR_E_FR_FEATS,
		TW_SET_ECH_STROB_TR_E_FR_FEATS => TW_SET_ECH_STROB_TR_E_FR_FEATS,
		MC_BUFFER_STROBE_JRJ => MC_BUFFER_STROBE_JRJ,
		MC_TAPE_WRITE_STROBE => MC_TAPE_WRITE_STROBE,
		MC_TAPE_WRITE_STROBE_F_CH_JRJ => MC_TAPE_WRITE_STROBE_F_CH_JRJ,
		MC_1301_STROBE_E_CH => MC_1301_STROBE_E_CH,
		MC_1405_STROBE_E_CH => MC_1405_STROBE_E_CH,
		MC_TAPE_READ_STROBE => MC_TAPE_READ_STROBE,		
		MC_TAPE_READ_STROBE_F_CH_JRJ => MC_TAPE_READ_STROBE_F_CH_JRJ,
		MS_F_CH_STK_SEL_OP_CODE_STAR_1414_STAR => MS_F_CH_STK_SEL_OP_CODE_STAR_1414_STAR,
		PS_F_CH_WRITE_LATCH_STAR_1414_STAR => PS_F_CH_WRITE_LATCH_STAR_1414_STAR,
		MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR => MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR,
		MC_1301_STROBE_F_CH => MC_1301_STROBE_F_CH,
		MC_SET_FCH_STROB_TR_E_FR_FEATS => MC_SET_FCH_STROB_TR_E_FR_FEATS,
		TW_SET_FCH_STROB_TR_E_FR_FEATS => TW_SET_FCH_STROB_TR_E_FR_FEATS,
		MC_1405_STROBE_F_CH => MC_1405_STROBE_F_CH,
		PS_GATE_SET_F1_REG_STAR_1414_STAR => PS_GATE_SET_F1_REG_STAR_1414_STAR,
		PS_GATE_RESET_F2_FULL_STAR_1414_STAR => PS_GATE_RESET_F2_FULL_STAR_1414_STAR,
		PS_RGEN_EXTN_CTRL_STAR_STERLING => PS_RGEN_EXTN_CTRL_STAR_STERLING,
		PS_PULL_OFF_CMP_HI_STAR_1311_SCAN => PS_PULL_OFF_CMP_HI_STAR_1311_SCAN,
		PS_PULL_OFF_CMP_LO_STAR_1311_SCAN => PS_PULL_OFF_CMP_LO_STAR_1311_SCAN,
		PS_SIMULATE_CMP_HI_STAR_1311_SCAN => PS_SIMULATE_CMP_HI_STAR_1311_SCAN,
		PS_SIMULATE_CMP_EQ_STAR_1311_SCAN => PS_SIMULATE_CMP_EQ_STAR_1311_SCAN,
		PS_SIMULATE_CMP_LO_STAR_1311_SCAN => PS_SIMULATE_CMP_LO_STAR_1311_SCAN,
		PS_CMP_MODE_B_CYCLE_STAR_1311 => PS_CMP_MODE_B_CYCLE_STAR_1311,
		M36_VOLTS_ON_CONSOLE => M36_VOLTS_ON_CONSOLE,
		PS_INTERLOCK_F_CH_STAR_1414_STAR => PS_INTERLOCK_F_CH_STAR_1414_STAR,
		MC_READER_BUSY => MC_READER_BUSY,
		MC_READER_BUSY_JRJ => MC_READER_BUSY_JRJ,
		MC_PUNCH_BUSY => MC_PUNCH_BUSY,
		MC_PUNCH_BUSY_JRJ => MC_PUNCH_BUSY_JRJ,
		MC_PAPER_TAPE_READER_BUSY => MC_PAPER_TAPE_READER_BUSY,
		MC_PAPER_TAPE_READY_BUSY_JRJ => MC_PAPER_TAPE_READY_BUSY_JRJ,
		MC_I_O_CLOCK_080_090_TIME => MC_I_O_CLOCK_080_090_TIME,
		MC_I_O_CLOCK_080_090_TIME_JRJ => MC_I_O_CLOCK_080_090_TIME_JRJ,
		PS_INTERRUPT_REQUEST_STAR_SIF => PS_INTERRUPT_REQUEST_STAR_SIF,
		PS_INTERRUPT_REQUEST_JRJ => PS_INTERRUPT_REQUEST_JRJ,
		PS_INTERRUPT_REQUEST_STAR_1414_STAR => PS_INTERRUPT_REQUEST_STAR_1414_STAR,
		PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR => PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR,
		MC_ANY_SEEK_COMP_STAR_E_CH_1405 => MC_ANY_SEEK_COMP_STAR_E_CH_1405,
		MC_ANY_SEEK_COMP_STAR_E_CH_1301 => MC_ANY_SEEK_COMP_STAR_E_CH_1301,
		MC_ANY_SEEK_COMP_STAR_F_CH_1301 => MC_ANY_SEEK_COMP_STAR_F_CH_1301,
		MC_ANY_SEEK_COMP_STAR_F_CH_1405 => MC_ANY_SEEK_COMP_STAR_F_CH_1405,
		PS_2ND_CND_A_BRANCH_STAR_SIF => PS_2ND_CND_A_BRANCH_STAR_SIF,
		PS_2ND_CND_A_BRANCH_STAR_SIF_JRJ => PS_2ND_CND_A_BRANCH_STAR_SIF_JRJ,
		PS_2ND_CND_A_BRANCH_STAR_1414_STAR => PS_2ND_CND_A_BRANCH_STAR_1414_STAR,
		PS_NO_BRANCH_CND_INTER_STAR_SIF => PS_NO_BRANCH_CND_INTER_STAR_SIF,
		PS_NO_BRANCH_CND_INTER_STAR_SIF_JRJ => PS_NO_BRANCH_CND_INTER_STAR_SIF_JRJ,
		PS_NO_BRANCH_CND_INTER_STAR_1414_STAR => PS_NO_BRANCH_CND_INTER_STAR_1414_STAR,
		M6_V => M6_V,
		MY_CHAR_SEL_ERROR_CHK_1_STAR_2_STAR => MY_CHAR_SEL_ERROR_CHK_1_STAR_2_STAR,
		MY_CHAR_SEL_ERROR_CHK_2_STAR_2_STAR => MY_CHAR_SEL_ERROR_CHK_2_STAR_2_STAR,
		CONS_36V => CONS_36V,
		MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO => MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO,
		PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC => PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC,
		MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO => MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO,
		MV_CONS_PRINTER_C2_CAM_NC => MV_CONS_PRINTER_C2_CAM_NC,
		MV_CONS_PRINTER_C2_CAM_NO => MV_CONS_PRINTER_C2_CAM_NO,
		MV_CONS_PRINTER_SPACE_NO => MV_CONS_PRINTER_SPACE_NO,
		MV_CONS_PRINTER_C1_CAM_NO => MV_CONS_PRINTER_C1_CAM_NO,
		MV_CONS_PRINTER_C1_CAM_NC => MV_CONS_PRINTER_C1_CAM_NC,
		MV_CONS_PRINTER_C3_OR_C4_NO => MV_CONS_PRINTER_C3_OR_C4_NO,
		MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC => MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC,
		MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO => MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO,
		MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO => MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO,
		MB_CONS_PRINTER_EVEN_BIT_CHECK => MB_CONS_PRINTER_EVEN_BIT_CHECK,
		MV_CONS_PRINTER_ODD_BIT_CHECK => MV_CONS_PRINTER_ODD_BIT_CHECK,
		MV_CONS_PRINTER_LAST_COLUMN_SET => MV_CONS_PRINTER_LAST_COLUMN_SET,
		MV_KEYBOARD_LOCK_MODE_STAR_NO => MV_KEYBOARD_LOCK_MODE_STAR_NO,
		MV_KEYBOARD_UNLOCK_MODE => MV_KEYBOARD_UNLOCK_MODE,
		PS_E1_INPUT_STAR_SIF_BUS => PS_E1_INPUT_STAR_SIF_BUS,
		PS_E1_INPUT_STAR_1412_19_BUS => PS_E1_INPUT_STAR_1412_19_BUS,
		MC_E_CH_TAU_TO_CPU_BUS => MC_E_CH_TAU_TO_CPU_BUS,
		MC_I_O_SYNC_TO_CPU_BUS => MC_I_O_SYNC_TO_CPU_BUS,
		MC_E_CH_1301_TO_CPU_BUS => MC_E_CH_1301_TO_CPU_BUS,
		MC_E_CH_1405_TO_CPU_BUS => MC_E_CH_1405_TO_CPU_BUS,
		MV_CONS_PRTR_TO_CPU_BUS => MV_CONS_PRTR_TO_CPU_BUS,
		PS_F1_INPUT_STAR_SIF_BUS => PS_F1_INPUT_STAR_SIF_BUS,
		PS_F1_INPUT_STAR_1414_STAR_BUS => PS_F1_INPUT_STAR_1414_STAR_BUS,
		PS_F1_INPUT_STAR_1412_19_BUS => PS_F1_INPUT_STAR_1412_19_BUS,
		MC_F_CH_1301_TO_CPU_BUS => MC_F_CH_1301_TO_CPU_BUS,
		MC_F_CH_1405_TO_CPU_BUS => MC_F_CH_1405_TO_CPU_BUS,
		MC_F_CH_TAU_TO_CPU_BUS => MC_F_CH_TAU_TO_CPU_BUS,
		PV_SENSE_CHAR_0_B1_BUS => PV_SENSE_CHAR_0_B1_BUS,
		PV_SENSE_CHAR_0_B2_BUS => PV_SENSE_CHAR_0_B2_BUS,
		PV_SENSE_CHAR_0_D1_BUS => PV_SENSE_CHAR_0_D1_BUS,
		PV_SENSE_CHAR_0_D2_BUS => PV_SENSE_CHAR_0_D2_BUS,
		PV_SENSE_CHAR_1_B1_BUS => PV_SENSE_CHAR_1_B1_BUS,
		PV_SENSE_CHAR_1_B2_BUS => PV_SENSE_CHAR_1_B2_BUS,
		PV_SENSE_CHAR_1_D1_BUS => PV_SENSE_CHAR_1_D1_BUS,
		PV_SENSE_CHAR_1_D2_BUS => PV_SENSE_CHAR_1_D2_BUS,
		PV_SENSE_CHAR_2_B1_BUS => PV_SENSE_CHAR_2_B1_BUS,
		PV_SENSE_CHAR_2_B2_BUS => PV_SENSE_CHAR_2_B2_BUS,
		PV_SENSE_CHAR_2_D1_BUS => PV_SENSE_CHAR_2_D1_BUS,
		PV_SENSE_CHAR_2_D2_BUS => PV_SENSE_CHAR_2_D2_BUS,
		PV_SENSE_CHAR_3_B1_BUS => PV_SENSE_CHAR_3_B1_BUS,
		PV_SENSE_CHAR_3_D1_BUS => PV_SENSE_CHAR_3_D1_BUS,
		PV_SENSE_CHAR_3_D2_BUS => PV_SENSE_CHAR_3_D2_BUS,
		PV_SENSE_CHAR_3_B2_BUS => PV_SENSE_CHAR_3_B2_BUS,
		PS_B_DATA_REG_STAR_0_STAR_Z_BUS => PS_B_DATA_REG_STAR_0_STAR_Z_BUS,
		PS_B_DATA_REG_STAR_1_STAR_Z_BUS => PS_B_DATA_REG_STAR_1_STAR_Z_BUS,
		PS_B_DATA_REG_STAR_2_STAR_Z_BUS => PS_B_DATA_REG_STAR_2_STAR_Z_BUS,
		PS_B_DATA_REG_STAR_3_STAR_Z_BUS => PS_B_DATA_REG_STAR_3_STAR_Z_BUS,
		SWITCH_ROT_STOR_SCAN_DK6 => SWITCH_ROT_STOR_SCAN_DK6,
		SWITCH_MOM_CONS_START => SWITCH_MOM_CONS_START,
		SWITCH_MOM_CE_START => SWITCH_MOM_CE_START,
		SWITCH_MOM_CONS_STOP_PL1 => SWITCH_MOM_CONS_STOP_PL1,
		SWITCH_MOM_CE_STOP_SW_PL1 => SWITCH_MOM_CE_STOP_SW_PL1,
		SWITCH_TOG_I_O_CHK_ST_PL1 => SWITCH_TOG_I_O_CHK_ST_PL1,
		SWITCH_TOG_ADDR_STOP_PL1 => SWITCH_TOG_ADDR_STOP_PL1,
		SWITCH_REL_PWR_ON_RST => SWITCH_REL_PWR_ON_RST,
		SWITCH_MOM_CO_CPR_RST => SWITCH_MOM_CO_CPR_RST,
		SWITCH_MOM_CE_CPR_RST => SWITCH_MOM_CE_CPR_RST,
		SWITCH_MOM_PROG_RESET => SWITCH_MOM_PROG_RESET,
		SWITCH_TOG_1401_MODE_PL1 => SWITCH_TOG_1401_MODE_PL1,
		SWITCH_ROT_CHECK_CTRL_DK2 => SWITCH_ROT_CHECK_CTRL_DK2,
		SWITCH_MOM_IO_CHK_RST_PL1 => SWITCH_MOM_IO_CHK_RST_PL1,
		SWITCH_ROT_M_RTC_023_CC => SWITCH_ROT_M_RTC_023_CC,
		SWITCH_ROT_M_RTC_578_CC => SWITCH_ROT_M_RTC_578_CC,
		SWITCH_ROT_MRTC_01234_CC => SWITCH_ROT_MRTC_01234_CC,
		SWITCH_ROT_MRTC_56789_CC => SWITCH_ROT_MRTC_56789_CC,
		SWITCH_ROT_HRTC_01234_CC => SWITCH_ROT_HRTC_01234_CC,
		SWITCH_ROT_HRTC_56789_CC => SWITCH_ROT_HRTC_56789_CC,
		SWITCH_ROT_HRTC_012_CC => SWITCH_ROT_HRTC_012_CC,
		SWITCH_REL_RTC_BUSY => SWITCH_REL_RTC_BUSY,
		SWITCH_ROT_TENS_SYNC_DK2 => SWITCH_ROT_TENS_SYNC_DK2,
		SWITCH_ROT_TENS_SYNC_DK1 => SWITCH_ROT_TENS_SYNC_DK1,
		SWITCH_ROT_UNITS_SYNC_DK2 => SWITCH_ROT_UNITS_SYNC_DK2,
		SWITCH_ROT_UNITS_SYNC_DK1 => SWITCH_ROT_UNITS_SYNC_DK1,
		SWITCH_ROT_SCAN_GATE_DK1 => SWITCH_ROT_SCAN_GATE_DK1,
		SWITCH_ROT_THOUS_SYNC_DK2 => SWITCH_ROT_THOUS_SYNC_DK2,
		SWITCH_ROT_THOUS_SYNC_DK1 => SWITCH_ROT_THOUS_SYNC_DK1,
		SWITCH_ROT_HUNDS_SYNC_DK2 => SWITCH_ROT_HUNDS_SYNC_DK2,
		SWITCH_ROT_HUNDS_SYNC_DK1 => SWITCH_ROT_HUNDS_SYNC_DK1,
		SWITCH_ROT_ADDR_ENTRY_DK3 => SWITCH_ROT_ADDR_ENTRY_DK3,
		SWITCH_ROT_ADDR_SEL_DK1 => SWITCH_ROT_ADDR_SEL_DK1,
		SWITCH_MOM_ADDR_DISP => SWITCH_MOM_ADDR_DISP,
		SWITCH_ROT_STOR_SCAN_DK5 => SWITCH_ROT_STOR_SCAN_DK5,
		SWITCH_TOG_ASTERISK_PL2 => SWITCH_TOG_ASTERISK_PL2,
		SWITCH_TOG_SENSE_SW_1_PL1 => SWITCH_TOG_SENSE_SW_1_PL1,
		SWITCH_TOG_SENSE_SW_2_PL1 => SWITCH_TOG_SENSE_SW_2_PL1,
		SWITCH_TOG_SENSE_SW_4_PL1 => SWITCH_TOG_SENSE_SW_4_PL1,
		SWITCH_TOG_SENSE_SW_8_PL1 => SWITCH_TOG_SENSE_SW_8_PL1,
		SWITCH_TOG_SENSE_SW_A_PL1 => SWITCH_TOG_SENSE_SW_A_PL1,
		SWITCH_TOG_SENSE_SW_B_PL1 => SWITCH_TOG_SENSE_SW_B_PL1,
		SWITCH_TOG_SENSE_SW_C_PL1 => SWITCH_TOG_SENSE_SW_C_PL1,
		SWITCH_TOG_SENSE_SW_W_PL1 => SWITCH_TOG_SENSE_SW_W_PL1,
		SWITCH_MOM_1ST_TST_SW_PL1 => SWITCH_MOM_1ST_TST_SW_PL1,
		SWITCH_MOM_2ND_TST_SW_PL1 => SWITCH_MOM_2ND_TST_SW_PL1,
		SWITCH_MOM_3RD_TST_SW_PL1 => SWITCH_MOM_3RD_TST_SW_PL1,
		SWITCH_ALT_PRIORITY_PL1 => SWITCH_ALT_PRIORITY_PL1,
		SWITCH_ALT_PRIORITY_PL2 => SWITCH_ALT_PRIORITY_PL2,
		SWITCH_ROT_I_O_UNIT_DK1 => SWITCH_ROT_I_O_UNIT_DK1,
		SWITCH_ROT_MODE_SW_DK => SWITCH_ROT_MODE_SW_DK,
		SWITCH_ROT_MODE_SW_DK1 => SWITCH_ROT_MODE_SW_DK1,
		SWITCH_TOG_CH_1 => SWITCH_TOG_CH_1,
		SWITCH_TOG_CH_2 => SWITCH_TOG_CH_2,
		SWITCH_TOG_AUTO_START_PL1 => SWITCH_TOG_AUTO_START_PL1,
		SWITCH_ROT_ADDR_ENTRY_DK1 => SWITCH_ROT_ADDR_ENTRY_DK1,
		SWITCH_TOG_WR_INHIBIT_PL1 => SWITCH_TOG_WR_INHIBIT_PL1,
		SWITCH_ROT_STOR_SCAN_DK1 => SWITCH_ROT_STOR_SCAN_DK1,
		SWITCH_ROT_CYCLE_CTRL_DK1 => SWITCH_ROT_CYCLE_CTRL_DK1,
		SWITCH_ROT_ADDR_ENTRY_DKA => SWITCH_ROT_ADDR_ENTRY_DKA,
		SWITCH_ROT_CHECK_CTRL_DK1 => SWITCH_ROT_CHECK_CTRL_DK1,
		SWITCH_TOG_INHIBIT_PO_PL1 => SWITCH_TOG_INHIBIT_PO_PL1,
		SWITCH_ROT_STOR_SCAN_DK4 => SWITCH_ROT_STOR_SCAN_DK4,
		SWITCH_TOG_ASTERISK_PL1 => SWITCH_TOG_ASTERISK_PL1,
		SWITCH_ROT_STOR_SCAN_DK3 => SWITCH_ROT_STOR_SCAN_DK3,
		SWITCH_ROT_ADDR_ENTRY_DK2 => SWITCH_ROT_ADDR_ENTRY_DK2,
		SWITCH_TOG_INHIBIT_PO_PL2 => SWITCH_TOG_INHIBIT_PO_PL2,
		SWITCH_MOM_STARTPRINT => SWITCH_MOM_STARTPRINT,
		SWITCH_ROT_CYCLE_CTRL_DK2 => SWITCH_ROT_CYCLE_CTRL_DK2,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		PS_CLOCK_STOPPED_STAR_AUTS_STAR => PS_CLOCK_STOPPED_STAR_AUTS_STAR,
		PS_CLOCK_STOPPED => PS_CLOCK_STOPPED,
		MS_CLOCK_STOPPED => MS_CLOCK_STOPPED,
		MS_LOGIC_GATE_B_1 => MS_LOGIC_GATE_B_1,
		PS_LOGIC_GATE_C_1 => PS_LOGIC_GATE_C_1,
		MS_LOGIC_GATE_D_1 => MS_LOGIC_GATE_D_1,
		PS_LOGIC_GATE_D_1 => PS_LOGIC_GATE_D_1,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_LOGIC_GATE_B_OR_C => PS_LOGIC_GATE_B_OR_C,
		PS_LOGIC_GATE_D_OR_E_OR_F => PS_LOGIC_GATE_D_OR_E_OR_F,
		PS_LOGIC_GATE_EARLY_B => PS_LOGIC_GATE_EARLY_B,
		PS_LOGIC_GATE_EARLY_B_OR_S => PS_LOGIC_GATE_EARLY_B_OR_S,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		PS_I_CYCLE_DOT_NOT_CR_DISABLE => PS_I_CYCLE_DOT_NOT_CR_DISABLE,
		MS_F_CYCLE_DOT_ANY_LAST_GATE => MS_F_CYCLE_DOT_ANY_LAST_GATE,
		PS_E_CYCLE_CTRL => PS_E_CYCLE_CTRL,
		PS_E_CYCLE => PS_E_CYCLE,
		PS_E_CYCLE_CTRL_STAR_1311 => PS_E_CYCLE_CTRL_STAR_1311,
		PS_F_CYCLE_CTRL => PS_F_CYCLE_CTRL,
		PS_F_CYCLE => PS_F_CYCLE,
		PS_LAST_INSN_RO_CYCLE_2 => PS_LAST_INSN_RO_CYCLE_2,
		MS_START_KEY => MS_START_KEY,
		PS_RUN_OR_IE_MODE_STAR_AUTS_STAR => PS_RUN_OR_IE_MODE_STAR_AUTS_STAR,
		PS_BRANCH_TO_A_CONDITIONS => PS_BRANCH_TO_A_CONDITIONS,
		PS_E_CH_READY_BUS => PS_E_CH_READY_BUS,
		MS_E_CH_NOT_READY => MS_E_CH_NOT_READY,
		MS_COMPUTER_RESET_1 => MS_COMPUTER_RESET_1,
		MS_COMPUTER_RESET_2 => MS_COMPUTER_RESET_2,
		MC_COMP_RESET_TO_TAPE_STAR_E_CH => MC_COMP_RESET_TO_TAPE_STAR_E_CH,
		MC_E_CH_COMP_RESET_TO_1301 => MC_E_CH_COMP_RESET_TO_1301,
		MC_E_CH_COMP_RESET_TO_1405 => MC_E_CH_COMP_RESET_TO_1405,
		MC_COMP_RESET_TO_TAPE_STAR_F_CH => MC_COMP_RESET_TO_TAPE_STAR_F_CH,
		MC_F_CH_COMP_RESET_TO_1301 => MC_F_CH_COMP_RESET_TO_1301,
		MC_F_CH_COMP_RESET_TO_1405 => MC_F_CH_COMP_RESET_TO_1405,
		MC_COMP_RESET_TO_BUFFER => MC_COMP_RESET_TO_BUFFER,
		MS_PROGRAM_RESET_6 => MS_PROGRAM_RESET_6,
		MS_PROGRAM_RESET_2 => MS_PROGRAM_RESET_2,
		PS_1401_MODE => PS_1401_MODE,
		MS_1401_MODE => MS_1401_MODE,
		MC_1401_MODE_TO_1405 => MC_1401_MODE_TO_1405,
		PS_OP_REG_ARS_C_BIT => PS_OP_REG_ARS_C_BIT,
		PS_OP_REG_ARS_NOT_C_BIT => PS_OP_REG_ARS_NOT_C_BIT,
		PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B => PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B,
		PS_OP_DCDR_B_DOT_A_DOT_8_B => PS_OP_DCDR_B_DOT_A_DOT_8_B,
		PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B => PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B,
		PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B => PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B,
		PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_NOT_1_B => PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_NOT_1_B,
		PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_1_B => PS_OP_DCDR_NOT_4_DOT_NOT_2_DOT_1_B,
		PS_OP_DCDR_NOT_4_DOT_2_DOT_NOT_1_B => PS_OP_DCDR_NOT_4_DOT_2_DOT_NOT_1_B,
		PS_OP_DCDR_4_DOT_2_DOT_NOT_1_B => PS_OP_DCDR_4_DOT_2_DOT_NOT_1_B,
		PS_OP_DCDR_4_DOT_NOT_2_DOT_NOT_1_B => PS_OP_DCDR_4_DOT_NOT_2_DOT_NOT_1_B,
		PS_OP_DCDR_4_DOT_2_DOT_1_B => PS_OP_DCDR_4_DOT_2_DOT_1_B,
		PS_NOT_B_DOT_NOT_A_DOT_8_OP_MOD => PS_NOT_B_DOT_NOT_A_DOT_8_OP_MOD,
		PS_NOT_B_DOT_NOT_A_DOT_NOT_8_OP_MOD => PS_NOT_B_DOT_NOT_A_DOT_NOT_8_OP_MOD,
		PS_NOT_4_DOT_NOT_2_DOT_NOT_1_OP_MOD => PS_NOT_4_DOT_NOT_2_DOT_NOT_1_OP_MOD,
		PS_NOT_4_DOT_NOT_2_DOT_1_OP_MOD => PS_NOT_4_DOT_NOT_2_DOT_1_OP_MOD,
		PS_NOT_4_DOT_2_DOT_1_OP_MOD => PS_NOT_4_DOT_2_DOT_1_OP_MOD,
		PS_NOT_4_DOT_2_DOT_NOT_1_OP_MOD => PS_NOT_4_DOT_2_DOT_NOT_1_OP_MOD,
		PS_4_DOT_2_DOT_NOT_1_OP_MOD => PS_4_DOT_2_DOT_NOT_1_OP_MOD,
		PS_4_DOT_2_DOT_1_OP_MOD => PS_4_DOT_2_DOT_1_OP_MOD,
		PS_4_DOT_NOT_2_DOT_1_OP_MOD => PS_4_DOT_NOT_2_DOT_1_OP_MOD,
		PS_4_DOT_NOT_2_DOT_NOT_1_OP_MOD => PS_4_DOT_NOT_2_DOT_NOT_1_OP_MOD,
		PS_S_SYMBOL_OP_MODIFIER => PS_S_SYMBOL_OP_MODIFIER,
		PS_B_SYMBOL_OP_MODIFIER => PS_B_SYMBOL_OP_MODIFIER,
		PS_E_SYMBOL_OP_MODIFIER => PS_E_SYMBOL_OP_MODIFIER,
		PS_F_SYMBOL_OP_MODIFIER => PS_F_SYMBOL_OP_MODIFIER,
		PS_LOZ_SYMBOL_OP_MODIFIER => PS_LOZ_SYMBOL_OP_MODIFIER,
		PS_R_SYMBOL_OP_MODIFIER => PS_R_SYMBOL_OP_MODIFIER,
		PS_PERCENT_SIGN_OP_MODIFIER => PS_PERCENT_SIGN_OP_MODIFIER,
		PS_A_SYMBOL_OP_MODIFIER => PS_A_SYMBOL_OP_MODIFIER,
		PS_RECORD_MARK_OP_MODIFIER => PS_RECORD_MARK_OP_MODIFIER,
		PS_C_SYMBOL_OP_MODIFIER => PS_C_SYMBOL_OP_MODIFIER,
		PS_D_SYMBOL_OP_MODIFIER => PS_D_SYMBOL_OP_MODIFIER,
		PS_L_SYMBOL_OP_MODIFIER => PS_L_SYMBOL_OP_MODIFIER,
		PS_EXCLAM_MK_OP_MODIFIER => PS_EXCLAM_MK_OP_MODIFIER,
		PS_ONE_SYMBOL_OP_MODIFIER => PS_ONE_SYMBOL_OP_MODIFIER,
		PS_TWO_SYMBOL_OP_MODIFIER => PS_TWO_SYMBOL_OP_MODIFIER,
		PS_ASTERISK_OP_MODIFIER => PS_ASTERISK_OP_MODIFIER,
		MS_COND_TEST_BRANCH_OP_CODE => MS_COND_TEST_BRANCH_OP_CODE,
		MS_INTERRUPT_TEST_OP_CODE => MS_INTERRUPT_TEST_OP_CODE,
		PS_M_OR_L_OP_CODES => PS_M_OR_L_OP_CODES,
		MC_CPU_READY_TO_TID => MC_CPU_READY_TO_TID,
		PS_E_CH_DISCON_LATCH => PS_E_CH_DISCON_LATCH,
		PS_E_CH_DISCON_LATCH_JRJ => PS_E_CH_DISCON_LATCH_JRJ,
		MC_E_CH_DISCON_TO_1301 => MC_E_CH_DISCON_TO_1301,
		MC_E_CH_DISCON_TO_1405 => MC_E_CH_DISCON_TO_1405,
		MS_E_CH_EXT_END_OF_TRANSFER => MS_E_CH_EXT_END_OF_TRANSFER,
		PS_I_O_COML_AT_LATCH => PS_I_O_COML_AT_LATCH,
		PS_LOZENGE_OR_ASTERISK => PS_LOZENGE_OR_ASTERISK,
		PS_I_O_ASTERISK_LATCH => PS_I_O_ASTERISK_LATCH,
		MC_UNIT_1_SELECT_TO_I_O => MC_UNIT_1_SELECT_TO_I_O,
		MC_UNIT_2_SELECT_TO_I_O => MC_UNIT_2_SELECT_TO_I_O,
		MC_UNIT_4_SELECT_TO_I_O => MC_UNIT_4_SELECT_TO_I_O,
		MC_UNIT_8_SEL_TO_I_O => MC_UNIT_8_SEL_TO_I_O,
		MC_SELECT_UNIT_P => MC_SELECT_UNIT_P,
		MC_SELECT_UNIT_D => MC_SELECT_UNIT_D,
		MS_E_CH_SELECT_UNIT_K => MS_E_CH_SELECT_UNIT_K,
		MC_SELECT_UNIT_Q => MC_SELECT_UNIT_Q,
		MC_E_CH_SELECT_UNIT_R => MC_E_CH_SELECT_UNIT_R,
		MC_SELECT_UNIT_L => MC_SELECT_UNIT_L,
		MC_E_CH_SELECT_UNIT_M => MC_E_CH_SELECT_UNIT_M,
		MC_SELECT_UNIT_N => MC_SELECT_UNIT_N,
		PS_E_CH_SELECT_UNIT_F => PS_E_CH_SELECT_UNIT_F,
		MC_ODD_PARITY_TO_TAPE_STAR_E_CH => MC_ODD_PARITY_TO_TAPE_STAR_E_CH,
		MC_UNIT_SEL_F_STAR_E_CH_1301 => MC_UNIT_SEL_F_STAR_E_CH_1301,
		MC_UNIT_SEL_F_STAR_E_CH_1405 => MC_UNIT_SEL_F_STAR_E_CH_1405,
		PS_E_CH_UNOVLP_IN_PROCESS => PS_E_CH_UNOVLP_IN_PROCESS,
		PS_E_CH_IN_PROCESS => PS_E_CH_IN_PROCESS,
		MS_LOAD_CYCLE => MS_LOAD_CYCLE,
		PS_E_CH_INT_END_OF_TRANSFER => PS_E_CH_INT_END_OF_TRANSFER,
		MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_E_CH => MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_E_CH,
		MS_F_CH_RESET => MS_F_CH_RESET,
		MS_F_CH_RESET_1 => MS_F_CH_RESET_1,
		PS_F_CH_U_SEL_A_DOT_NOT_8_DOT_NOT_1 => PS_F_CH_U_SEL_A_DOT_NOT_8_DOT_NOT_1,
		MC_ODD_PARITY_TO_TAPE_STAR_F_CH => MC_ODD_PARITY_TO_TAPE_STAR_F_CH,
		PS_F_CH_SELECT_UNIT_F_LN_2 => PS_F_CH_SELECT_UNIT_F_LN_2,
		MC_UNIT_SEL_F_F_CH_1301 => MC_UNIT_SEL_F_F_CH_1301,
		MC_UNIT_SELECT_F_STAR_F_CH_1405 => MC_UNIT_SELECT_F_STAR_F_CH_1405,
		PS_F_CH_UNOVLP_IN_PROCESS => PS_F_CH_UNOVLP_IN_PROCESS,
		PS_F_CH_IN_PROCESS => PS_F_CH_IN_PROCESS,
		PS_E_CH_STATUS_SAMPLE_B => PS_E_CH_STATUS_SAMPLE_B,
		MS_E_CH_STATUS_SAMPLE_B_DELAY => MS_E_CH_STATUS_SAMPLE_B_DELAY,
		PS_E_CH_SECOND_SAMPLE_B => PS_E_CH_SECOND_SAMPLE_B,
		MS_E_CH_STATUS_SAMPLE_B => MS_E_CH_STATUS_SAMPLE_B,
		PS_E_CH_STATUS_SAMPLE_B_DELAY => PS_E_CH_STATUS_SAMPLE_B_DELAY,
		PS_E_CH_STATUS_SAMPLE_A => PS_E_CH_STATUS_SAMPLE_A,
		PS_E_CH_STATUS_SAMPLE_A_DELAY => PS_E_CH_STATUS_SAMPLE_A_DELAY,
		PS_F_CH_CONDITION => PS_F_CH_CONDITION,
		MS_F_CH_CHECK => MS_F_CH_CHECK,
		MS_F_CH_END_OF_RECORD_LATCH => MS_F_CH_END_OF_RECORD_LATCH,
		PS_F_CH_INT_END_OF_TRANSFER => PS_F_CH_INT_END_OF_TRANSFER,
		PS_F_CH_READY_BUS => PS_F_CH_READY_BUS,
		MS_F_CH_NOT_READY => MS_F_CH_NOT_READY,
		MS_F_CH_BUSY => MS_F_CH_BUSY,
		MS_F_CH_WRONG_LENGTH_RECORD => MS_F_CH_WRONG_LENGTH_RECORD,
		MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_F_CH => MC_W_DOT_L_DOT_R_DOT_TO_FILE_STAR_F_CH,
		MC_READ_TAPE_CALL_STAR_F_CH => MC_READ_TAPE_CALL_STAR_F_CH,
		MC_WRITE_TAPE_CALL_STAR_F_CH => MC_WRITE_TAPE_CALL_STAR_F_CH,
		MC_WRITE_TAPE_MK_CALL_STAR_F_CH => MC_WRITE_TAPE_MK_CALL_STAR_F_CH,
		MC_ERASE_CALL_STAR_F_CH => MC_ERASE_CALL_STAR_F_CH,
		MC_REWIND_UNLOAD_STAR_F_CH => MC_REWIND_UNLOAD_STAR_F_CH,
		MC_REWIND_CALL_STAR_F_CH => MC_REWIND_CALL_STAR_F_CH,
		MC_BACKSPACE_CALL_STAR_F_CH => MC_BACKSPACE_CALL_STAR_F_CH,
		MC_DISCONNECT_CALL_STAR_F_CH => MC_DISCONNECT_CALL_STAR_F_CH,
		MC_TURN_OFF_TI_STAR_F_CH => MC_TURN_OFF_TI_STAR_F_CH,
		MC_RESET_TAPE_SEL_REG_STAR_CH_F => MC_RESET_TAPE_SEL_REG_STAR_CH_F,
		MC_SET_TAPE_SEL_REG_STAR_CH_F => MC_SET_TAPE_SEL_REG_STAR_CH_F,
		PS_F_CH_STATUS_SAMPLE_A_DELAY => PS_F_CH_STATUS_SAMPLE_A_DELAY,
		PS_F_CH_STATUS_SAMPLE_A => PS_F_CH_STATUS_SAMPLE_A,
		PS_F_CH_STATUS_SAMPLE_B => PS_F_CH_STATUS_SAMPLE_B,
		PS_F_CH_SECOND_SAMPLE_B => PS_F_CH_SECOND_SAMPLE_B,
		PS_F_CH_STATUS_SAMPLE_B_1 => PS_F_CH_STATUS_SAMPLE_B_1,
		MS_F_CH_INT_END_OF_XFER_DELAYED => MS_F_CH_INT_END_OF_XFER_DELAYED,
		PS_F_CH_STATUS_SAMPLE_B_DELAY => PS_F_CH_STATUS_SAMPLE_B_DELAY,
		PS_F_CH_DISCON_LATCH => PS_F_CH_DISCON_LATCH,
		MC_F_CH_DISCON_TO_1301 => MC_F_CH_DISCON_TO_1301,
		MC_F_CH_DISCON_TO_1405 => MC_F_CH_DISCON_TO_1405,
		MS_F_CH_EXT_END_OF_TRANSFER => MS_F_CH_EXT_END_OF_TRANSFER,
		MS_1401_I_O_END => MS_1401_I_O_END,
		MC_CORRECT_TRANS_TO_BUFFER => MC_CORRECT_TRANS_TO_BUFFER,
		MC_RESET_SELECT_BUFFER_LATCHES => MC_RESET_SELECT_BUFFER_LATCHES,
		MC_READY_TO_BUFFER => MC_READY_TO_BUFFER,
		MC_1401_MODE_TO_BUFFER => MC_1401_MODE_TO_BUFFER,
		MC_STACK_SELECT_TO_BUFFER => MC_STACK_SELECT_TO_BUFFER,
		MC_FORMS_CTRL_TO_BUFFER => MC_FORMS_CTRL_TO_BUFFER,
		MC_FORMS_STACKER_GO => MC_FORMS_STACKER_GO,
		MC_TURN_OFF_TAPE_IND_STAR_E_CH => MC_TURN_OFF_TAPE_IND_STAR_E_CH,
		MC_RESET_TAPE_SEL_REG_STAR_E_CH => MC_RESET_TAPE_SEL_REG_STAR_E_CH,
		MC_SET_TAPE_SEL_REG_STAR_E_CH => MC_SET_TAPE_SEL_REG_STAR_E_CH,
		MC_DISCONNECT_CALL_STAR_E_CH => MC_DISCONNECT_CALL_STAR_E_CH,
		MC_READ_TAPE_CALL_STAR_E_CH => MC_READ_TAPE_CALL_STAR_E_CH,
		MC_WRITE_TAPE_CALL_STAR_E_CH => MC_WRITE_TAPE_CALL_STAR_E_CH,
		MC_WRITE_TAPE_MK_CALL_STAR_E_CH => MC_WRITE_TAPE_MK_CALL_STAR_E_CH,
		MC_ERASE_CALL_STAR_E_CH => MC_ERASE_CALL_STAR_E_CH,
		MC_REWIND_UNLOAD_STAR_E_CH => MC_REWIND_UNLOAD_STAR_E_CH,
		MC_REWIND_CALL_STAR_E_CH => MC_REWIND_CALL_STAR_E_CH,
		MC_BACKSPACE_CALL_STAR_E_CH => MC_BACKSPACE_CALL_STAR_E_CH,
		PS_E_CH_2ND_ADDR_TRF => PS_E_CH_2ND_ADDR_TRF,
		MS_E_CH_END_OF_2ND_ADDR_TRF => MS_E_CH_END_OF_2ND_ADDR_TRF,
		MC_1405_START_GATE_STAR_E_CH => MC_1405_START_GATE_STAR_E_CH,
		MC_1301_START_GATE_STAR_E_CH => MC_1301_START_GATE_STAR_E_CH,
		MC_SEEK_TEST_OP_STAR_E_CH_TO_1405 => MC_SEEK_TEST_OP_STAR_E_CH_TO_1405,
		MC_SEEK_TEST_OP_STAR_E_CH_TO_1301 => MC_SEEK_TEST_OP_STAR_E_CH_TO_1301,
		MC_FILE_STROBE_1ST_ADDR_STAR_E_CH => MC_FILE_STROBE_1ST_ADDR_STAR_E_CH,
		MC_FILE_STROBE_2ND_ADDR_STAR_E_CH => MC_FILE_STROBE_2ND_ADDR_STAR_E_CH,
		MC_FILE_DIGIT_ADVANCE_STAR_E_CH => MC_FILE_DIGIT_ADVANCE_STAR_E_CH,
		MC_FILE_ADDR_TRF_GATE_STAR_E_CH => MC_FILE_ADDR_TRF_GATE_STAR_E_CH,
		MC_E_CH_RBCI_RESET_1405 => MC_E_CH_RBCI_RESET_1405,
		PS_E_CH_NO_STATUS_ON => PS_E_CH_NO_STATUS_ON,
		PS_F_CH_2ND_ADDR_TRF => PS_F_CH_2ND_ADDR_TRF,
		PS_F_CH_END_OF_2ND_ADDR_TRF => PS_F_CH_END_OF_2ND_ADDR_TRF,
		MC_1301_START_GATE_STAR_F_CH => MC_1301_START_GATE_STAR_F_CH,
		MC_1405_START_GATE_STAR_F_CH => MC_1405_START_GATE_STAR_F_CH,
		MC_SEEK_TEST_OP_STAR_F_CH_TO_1405 => MC_SEEK_TEST_OP_STAR_F_CH_TO_1405,
		MC_FILE_STROBE_1ST_ADDR_STAR_F_CH => MC_FILE_STROBE_1ST_ADDR_STAR_F_CH,
		MC_FILE_STROBE_2ND_ADDR_STAR_F_CH => MC_FILE_STROBE_2ND_ADDR_STAR_F_CH,
		MC_FILE_DIGIT_ADVANCE_STAR_F_CH => MC_FILE_DIGIT_ADVANCE_STAR_F_CH,
		MC_FILE_ADDR_TRF_GATE_STAR_F_CH => MC_FILE_ADDR_TRF_GATE_STAR_F_CH,
		MC_SEEK_TEST_OP_STAR_F_CH_TO_1301 => MC_SEEK_TEST_OP_STAR_F_CH_TO_1301,
		MC_F_CH_RBCI_RESET_1405 => MC_F_CH_RBCI_RESET_1405,
		PS_F_CH_NO_TRANSFER_LATCH => PS_F_CH_NO_TRANSFER_LATCH,
		PS_F_CH_NO_STATUS_ON => PS_F_CH_NO_STATUS_ON,
		MS_F_CH_NO_TRANSFER_LATCH => MS_F_CH_NO_TRANSFER_LATCH,
		MY_MEM_AR_NOT_TTHP4B => MY_MEM_AR_NOT_TTHP4B,
		PS_ADDRESS_STOP => PS_ADDRESS_STOP,
		PS_OPTIONAL_SYNC_COND_CE => PS_OPTIONAL_SYNC_COND_CE,
		MC_UNIT_NU_0_TO_TAU_STAR_E_CH => MC_UNIT_NU_0_TO_TAU_STAR_E_CH,
		MC_SELECT_NO_0_TO_BUFFER => MC_SELECT_NO_0_TO_BUFFER,
		MC_SEEK_STAR_E_CH_1405 => MC_SEEK_STAR_E_CH_1405,
		MC_UNIT_NU_1_TO_TAU_STAR_E_CH => MC_UNIT_NU_1_TO_TAU_STAR_E_CH,
		MS_E_CH_UNIT_NUMBER_1 => MS_E_CH_UNIT_NUMBER_1,
		MC_SELECT_NO_1_TO_BUFFER => MC_SELECT_NO_1_TO_BUFFER,
		MC_SINGLE_REC_STAR_E_CH_TO_1405 => MC_SINGLE_REC_STAR_E_CH_TO_1405,
		MC_UNIT_NU_2_TO_TAU_STAR_E_CH => MC_UNIT_NU_2_TO_TAU_STAR_E_CH,
		MC_SELECT_NO_2_TO_BUFFER => MC_SELECT_NO_2_TO_BUFFER,
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_E_CH => MC_FULL_TRACK_WITHOUT_IA_STAR_1405_E_CH,
		MC_UNIT_NU_3_TO_TAU_STAR_E_CH => MC_UNIT_NU_3_TO_TAU_STAR_E_CH,
		MC_SELECT_NO_3_TO_BUFFER => MC_SELECT_NO_3_TO_BUFFER,
		MC_WRITE_CHECK_STAR_E_CH_TO_1405 => MC_WRITE_CHECK_STAR_E_CH_TO_1405,
		MC_UNIT_NU_4_TO_TAU_STAR_E_CH => MC_UNIT_NU_4_TO_TAU_STAR_E_CH,
		MC_WRITE_ADDR_STAR_E_CH_TO_1405 => MC_WRITE_ADDR_STAR_E_CH_TO_1405,
		MC_UNIT_NU_5_TO_TAU_STAR_E_CH => MC_UNIT_NU_5_TO_TAU_STAR_E_CH,
		MC_UNIT_NU_6_TO_TAU_STAR_E_CH => MC_UNIT_NU_6_TO_TAU_STAR_E_CH,
		MC_UNIT_NU_7_TO_TAU_STAR_E_CH => MC_UNIT_NU_7_TO_TAU_STAR_E_CH,
		MC_UNIT_NU_8_TO_TAU_STAR_E_CH => MC_UNIT_NU_8_TO_TAU_STAR_E_CH,
		MC_UNIT_NU_9_TO_TAU_STAR_E_CH => MC_UNIT_NU_9_TO_TAU_STAR_E_CH,
		MS_F_CH_UNIT_NUMBER_0 => MS_F_CH_UNIT_NUMBER_0,
		MC_UNIT_NU_0_TO_TAU_STAR_F_CH => MC_UNIT_NU_0_TO_TAU_STAR_F_CH,
		PS_F_CH_UNIT_NUMBER_0 => PS_F_CH_UNIT_NUMBER_0,
		MC_SEEK_STAR_F_CH_1405 => MC_SEEK_STAR_F_CH_1405,
		MC_UNIT_NU_1_TO_TAU_STAR_F_CH => MC_UNIT_NU_1_TO_TAU_STAR_F_CH,
		MS_F_CH_UNIT_NUMBER_1 => MS_F_CH_UNIT_NUMBER_1,
		PS_F_CH_UNIT_NUMBER_1 => PS_F_CH_UNIT_NUMBER_1,
		MC_SINGLE_REC_STAR_F_CH_TO_1405 => MC_SINGLE_REC_STAR_F_CH_TO_1405,
		MC_UNIT_NU_2_TO_TAU_STAR_F_CH => MC_UNIT_NU_2_TO_TAU_STAR_F_CH,
		MS_F_CH_UNIT_NUMBER_2 => MS_F_CH_UNIT_NUMBER_2,
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH => MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,
		MS_F_CH_UNIT_NUMBER_3 => MS_F_CH_UNIT_NUMBER_3,
		MC_UNIT_NU_3_TO_TAU_STAR_F_CH => MC_UNIT_NU_3_TO_TAU_STAR_F_CH,
		MC_WRITE_CHECK_STAR_F_CH_TO_1405 => MC_WRITE_CHECK_STAR_F_CH_TO_1405,
		MC_UNIT_NU_4_TO_TAU_STAR_F_CH => MC_UNIT_NU_4_TO_TAU_STAR_F_CH,
		MC_WRITE_ADDR_STAR_F_CH_TO_1405 => MC_WRITE_ADDR_STAR_F_CH_TO_1405,
		MC_UNIT_NU_5_TO_TAU_STAR_F_CH => MC_UNIT_NU_5_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_6_TO_TAU_STAR_F_CH => MC_UNIT_NU_6_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_7_TO_TAU_STAR_F_CH => MC_UNIT_NU_7_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_8_TO_TAU_STAR_F_CH => MC_UNIT_NU_8_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_9_TO_TAU_STAR_F_CH => MC_UNIT_NU_9_TO_TAU_STAR_F_CH,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		MC_OUTPUT_MODE_TO_BUFFER => MC_OUTPUT_MODE_TO_BUFFER,
		MC_INPUT_MODE_TO_BUFFER => MC_INPUT_MODE_TO_BUFFER,
		MC_OUTPUT_OP_TO_1301_STAR_E_CH => MC_OUTPUT_OP_TO_1301_STAR_E_CH,
		MC_OUTPUT_OP_TO_1405_STAR_E_CH => MC_OUTPUT_OP_TO_1405_STAR_E_CH,
		MC_INPUT_OP_TO_1405_STAR_E_CH => MC_INPUT_OP_TO_1405_STAR_E_CH,
		MC_INPUT_OP_TO_1301_STAR_E_CH => MC_INPUT_OP_TO_1301_STAR_E_CH,
		MS_E_CH_MOVE_MODE => MS_E_CH_MOVE_MODE,
		MS_E_CH_LOAD_MODE => MS_E_CH_LOAD_MODE,
		MS_E_CH_INTERLOCK => MS_E_CH_INTERLOCK,
		MC_LOAD_MODE_TO_1301_STAR_E_CH => MC_LOAD_MODE_TO_1301_STAR_E_CH,
		MC_LOAD_MODE_TO_1405_STAR_E_CH => MC_LOAD_MODE_TO_1405_STAR_E_CH,
		PS_SET_E2_REG => PS_SET_E2_REG,
		PS_SET_E1_REG => PS_SET_E1_REG,
		PS_F_CH_OUTPUT_MODE => PS_F_CH_OUTPUT_MODE,
		PS_F_CH_INPUT_MODE => PS_F_CH_INPUT_MODE,
		MS_INPUT_MODE_F_CH => MS_INPUT_MODE_F_CH,
		MC_INPUT_OP_TO_1405_STAR_F_CH => MC_INPUT_OP_TO_1405_STAR_F_CH,
		MC_INPUT_OP_TO_1301_STAR_F_CH => MC_INPUT_OP_TO_1301_STAR_F_CH,
		MS_F_CH_INPUT_MODE => MS_F_CH_INPUT_MODE,
		MC_OUTPUT_OP_TO_1405_STAR_F_CH => MC_OUTPUT_OP_TO_1405_STAR_F_CH,
		MC_OUTPUT_OP_TO_1301_STAR_F_CH => MC_OUTPUT_OP_TO_1301_STAR_F_CH,
		MS_F_CH_LOAD_MODE => MS_F_CH_LOAD_MODE,
		PS_F_CH_INTERLOCK => PS_F_CH_INTERLOCK,
		MC_LOAD_MODE_TO_1301_STAR_F_CH => MC_LOAD_MODE_TO_1301_STAR_F_CH,
		MC_LOAD_MODE_TO_1405_STAR_F_CH => MC_LOAD_MODE_TO_1405_STAR_F_CH,
		PS_SET_F1_REG => PS_SET_F1_REG,
		PS_SET_F2_REG => PS_SET_F2_REG,
		TW_CPU_TO_F_CH_TAU_C_BIT => TW_CPU_TO_F_CH_TAU_C_BIT,
		MS_MASTER_ERROR => MS_MASTER_ERROR,
		MS_MASTER_ERROR_STAR_AUTS_STAR => MS_MASTER_ERROR_STAR_AUTS_STAR,
		PS_MASTER_ERROR => PS_MASTER_ERROR,
		PS_INTERRUPT_REQ_STAR_AUTS_STAR => PS_INTERRUPT_REQ_STAR_AUTS_STAR,
		PS_Y_OP_DOT_TEST_RESET => PS_Y_OP_DOT_TEST_RESET,
		PS_INTERRUPT_TEST_OP_CODE => PS_INTERRUPT_TEST_OP_CODE,
		MS_I_OP_DOT_I_CYCLE_DOT_C => MS_I_OP_DOT_I_CYCLE_DOT_C,
		PS_I_OP_DOT_I_CYCLE_DOT_E => PS_I_OP_DOT_I_CYCLE_DOT_E,
		MY_MEM_AR_NOT_TP0B_JRJ => MY_MEM_AR_NOT_TP0B_JRJ,
		MY_MEM_AR_NOT_TP1B_JRJ => MY_MEM_AR_NOT_TP1B_JRJ,
		MY_MEM_AR_NOT_TP2B_JRJ => MY_MEM_AR_NOT_TP2B_JRJ,
		MY_MEM_AR_NOT_TP8B_JRJ => MY_MEM_AR_NOT_TP8B_JRJ,
		MY_MEM_AR_NOT_TP4B_JRJ => MY_MEM_AR_NOT_TP4B_JRJ,
		MV_GATE_X_LSMS_YY00_09_A => MV_GATE_X_LSMS_YY00_09_A,
		MV_GATE_X_LSMS_YY00_09_B => MV_GATE_X_LSMS_YY00_09_B,
		MV_GATE_X_LSMS_YY10_19_A => MV_GATE_X_LSMS_YY10_19_A,
		MV_GATE_X_LSMS_YY10_19_B => MV_GATE_X_LSMS_YY10_19_B,
		MV_GATE_X_LSMS_YY20_29_A => MV_GATE_X_LSMS_YY20_29_A,
		MV_GATE_X_LSMS_YY20_29_B => MV_GATE_X_LSMS_YY20_29_B,
		MV_GATE_X_LSMS_YY30_39_A => MV_GATE_X_LSMS_YY30_39_A,
		MV_GATE_X_LSMS_YY30_39_B => MV_GATE_X_LSMS_YY30_39_B,
		MV_GATE_X_LSMS_YY40_49_A => MV_GATE_X_LSMS_YY40_49_A,
		MV_GATE_X_LSMS_YY40_49_B => MV_GATE_X_LSMS_YY40_49_B,
		MV_GATE_X_LSMS_YY50_59_A => MV_GATE_X_LSMS_YY50_59_A,
		MV_GATE_X_LSMS_YY50_59_B => MV_GATE_X_LSMS_YY50_59_B,
		MV_GATE_X_LSMS_YY60_60_A => MV_GATE_X_LSMS_YY60_60_A,
		MV_GATE_X_LSMS_YY60_69_B => MV_GATE_X_LSMS_YY60_69_B,
		MV_GATE_X_LSMS_YY70_79_A => MV_GATE_X_LSMS_YY70_79_A,
		MV_GATE_X_LSMS_YY70_79_B => MV_GATE_X_LSMS_YY70_79_B,
		MV_GATE_X_LSMS_YY80_89_A => MV_GATE_X_LSMS_YY80_89_A,
		MV_GATE_X_LSMS_YY80_89_B => MV_GATE_X_LSMS_YY80_89_B,
		MV_GATE_X_LSMS_YY90_99_A => MV_GATE_X_LSMS_YY90_99_A,
		MV_GATE_X_LSMS_YY90_99_B => MV_GATE_X_LSMS_YY90_99_B,
		MY_MEM_AR_NOT_HP8B_Z => MY_MEM_AR_NOT_HP8B_Z,
		MY_MEM_AR_NOT_HP4B_Z => MY_MEM_AR_NOT_HP4B_Z,
		MY_MEM_AR_NOT_HP2B_Z => MY_MEM_AR_NOT_HP2B_Z,
		MY_MEM_AR_NOT_HP1B_Z => MY_MEM_AR_NOT_HP1B_Z,
		MY_MEM_AR_NOT_HP0B_Z => MY_MEM_AR_NOT_HP0B_Z,
		MY_GATE_Y_LSMS_00_09XX_A => MY_GATE_Y_LSMS_00_09XX_A,
		MY_GATE_Y_LSMS_00_09XX_B => MY_GATE_Y_LSMS_00_09XX_B,
		MY_GATE_Y_LSMS_10_19XX_A => MY_GATE_Y_LSMS_10_19XX_A,
		MY_GATE_Y_LSMS_10_19XX_B => MY_GATE_Y_LSMS_10_19XX_B,
		MY_GATE_Y_LSMS_20_29XX_A => MY_GATE_Y_LSMS_20_29XX_A,
		MY_GATE_Y_LSMS_20_29XX_B => MY_GATE_Y_LSMS_20_29XX_B,
		MY_GATE_Y_LSMS_30_39XX_A => MY_GATE_Y_LSMS_30_39XX_A,
		MY_GATE_Y_LSMS_30_39XX_B => MY_GATE_Y_LSMS_30_39XX_B,
		MY_GATE_Y_LSMS_40_49XX_A => MY_GATE_Y_LSMS_40_49XX_A,
		MY_GATE_Y_LSMS_40_49XX_B => MY_GATE_Y_LSMS_40_49XX_B,
		MY_GATE_Y_LSMS_50_59XX_A => MY_GATE_Y_LSMS_50_59XX_A,
		MY_GATE_Y_LSMS_50_59XX_B => MY_GATE_Y_LSMS_50_59XX_B,
		MY_GATE_Y_LSMS_60_69XX_A => MY_GATE_Y_LSMS_60_69XX_A,
		MY_GATE_Y_LSMS_60_69XX_B => MY_GATE_Y_LSMS_60_69XX_B,
		MY_GATE_Y_LSMS_70_79XX_A => MY_GATE_Y_LSMS_70_79XX_A,
		MY_GATE_Y_LSMS_70_79XX_B => MY_GATE_Y_LSMS_70_79XX_B,
		MY_GATE_Y_LSMS_80_89XX_A => MY_GATE_Y_LSMS_80_89XX_A,
		MY_GATE_Y_LSMS_80_89XX_B => MY_GATE_Y_LSMS_80_89XX_B,
		MY_GATE_Y_LSMS_90_99XX_A => MY_GATE_Y_LSMS_90_99XX_A,
		MY_GATE_Y_LSMS_90_99XX_B => MY_GATE_Y_LSMS_90_99XX_B,
		MY_X_RD_1 => MY_X_RD_1,
		MY_B_DATA_REG_RESET => MY_B_DATA_REG_RESET,
		PY_START_READ => PY_START_READ,
		MY_X_WR_1 => MY_X_WR_1,
		PY_START_WRITE => PY_START_WRITE,
		MY_LOAD_MEMORY_Z => MY_LOAD_MEMORY_Z,
		MY_REGEN_MEMORY_Z => MY_REGEN_MEMORY_Z,
		PY_1ST_CHECK_TEST_Z => PY_1ST_CHECK_TEST_Z,
		PY_2ND_CHECK_TEST_Z => PY_2ND_CHECK_TEST_Z,
		PY_COMPUTER_RESET => PY_COMPUTER_RESET,
		PS_DENSITY_SW_556_OR_200_CH_1 => PS_DENSITY_SW_556_OR_200_CH_1,
		PS_DENSITY_SW_800_OR_556_CH_1 => PS_DENSITY_SW_800_OR_556_CH_1,
		PS_DENSITY_SW_556_OR_200_CH_2 => PS_DENSITY_SW_556_OR_200_CH_2,
		PS_DENSITY_SW_800_OR_556_CH_2 => PS_DENSITY_SW_800_OR_556_CH_2,
		MC_DISK_WRITE_NORMAL_STAR_F_CH => MC_DISK_WRITE_NORMAL_STAR_F_CH,
		MC_DISK_WRITE_NORMAL_STAR_E_CH => MC_DISK_WRITE_NORMAL_STAR_E_CH,
		MS_CONSOLE_INHIBIT_AR_RO => MS_CONSOLE_INHIBIT_AR_RO,
		PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR => PS_LOGIC_STEP_OR_IE_OR_STG_CY_STAR_AUTS_STAR,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		PS_CONS_CLOCK_3_POS_1 => PS_CONS_CLOCK_3_POS_1,
		MS_CONSOLE_CHECK_STROBE => MS_CONSOLE_CHECK_STROBE,
		PW_UPPER_CASE_SHIFT_SOLENOID => PW_UPPER_CASE_SHIFT_SOLENOID,
		PW_LOWER_CASE_SHIFT_SOLENOID => PW_LOWER_CASE_SHIFT_SOLENOID,
		PW_CONS_PRINTER_R1_SOLENOID => PW_CONS_PRINTER_R1_SOLENOID,
		PW_CONS_PRINTER_R2A_SOLENOID => PW_CONS_PRINTER_R2A_SOLENOID,
		PW_CONS_PRINTER_R2_SOLENOID => PW_CONS_PRINTER_R2_SOLENOID,
		PW_CONS_PRINTER_R5_SOLENOID => PW_CONS_PRINTER_R5_SOLENOID,
		PW_CONS_PRINTER_T1_SOLENOID => PW_CONS_PRINTER_T1_SOLENOID,
		PW_CONS_PRINTER_T2_SOLENOID => PW_CONS_PRINTER_T2_SOLENOID,
		PW_CONS_PRINTER_CHK_SOLENOID => PW_CONS_PRINTER_CHK_SOLENOID,
		PW_BACKSPACE_SOLENOID => PW_BACKSPACE_SOLENOID,
		PW_CARRIAGE_RETURN_SOLENOID => PW_CARRIAGE_RETURN_SOLENOID,
		PW_SPACE_SOLENOID => PW_SPACE_SOLENOID,
		MW_KEYBOARD_LOCK_SOLENOID => MW_KEYBOARD_LOCK_SOLENOID,
		LAMP_15A1K24 => LAMP_15A1K24,
		LAMP_15A1A16 => LAMP_15A1A16,
		LAMP_15A1C16 => LAMP_15A1C16,
		LAMP_15A1E16 => LAMP_15A1E16,
		LAMP_15A1F16 => LAMP_15A1F16,
		LAMP_15A1K23 => LAMP_15A1K23,
		LAMP_15A1H14 => LAMP_15A1H14,
		LAMP_15A1K14 => LAMP_15A1K14,
		LAMP_15A1H16 => LAMP_15A1H16,
		LAMP_15A1K15 => LAMP_15A1K15,
		LAMP_15A1H15 => LAMP_15A1H15,
		LAMP_15A1E17 => LAMP_15A1E17,
		LAMP_15A1F17 => LAMP_15A1F17,
		LAMP_15A1A17 => LAMP_15A1A17,
		LAMP_15A1C17 => LAMP_15A1C17,
		LAMP_15A1H17 => LAMP_15A1H17,
		LAMP_15A1B14 => LAMP_15A1B14,
		LAMP_15A1K16 => LAMP_15A1K16,
		LAMP_15A1C15 => LAMP_15A1C15,
		LAMP_15A1K17 => LAMP_15A1K17,
		LAMP_15A1E21 => LAMP_15A1E21,
		LAMP_11C8K07 => LAMP_11C8K07,
		LAMP_11C8J07 => LAMP_11C8J07,
		LAMP_11C8H07 => LAMP_11C8H07,
		LAMP_11C8G07 => LAMP_11C8G07,
		LAMP_11C8F07 => LAMP_11C8F07,
		LAMP_11C8A02 => LAMP_11C8A02,
		LAMP_11C8B02 => LAMP_11C8B02,
		LAMP_11C8A01 => LAMP_11C8A01,
		LAMP_11C8B01 => LAMP_11C8B01,
		LAMP_15A1K20 => LAMP_15A1K20,
		LAMP_11C8C14 => LAMP_11C8C14,
		LAMP_11C8D14 => LAMP_11C8D14,
		LAMP_11C8E14 => LAMP_11C8E14,
		LAMP_11C8F14 => LAMP_11C8F14,
		LAMP_15A1E14 => LAMP_15A1E14,
		LAMP_15A1F14 => LAMP_15A1F14,
		LAMP_15A1A14 => LAMP_15A1A14,
		LAMP_15A1E15 => LAMP_15A1E15,
		LAMP_15A1F15 => LAMP_15A1F15,
		LAMP_15A1A15 => LAMP_15A1A15,
		LAMP_15A1C11 => LAMP_15A1C11,
		LAMP_15A1K12 => LAMP_15A1K12,
		LAMP_15A1F11 => LAMP_15A1F11,
		LAMP_15A1E11 => LAMP_15A1E11,
		LAMP_15A1A11 => LAMP_15A1A11,
		LAMP_15A1G08 => LAMP_15A1G08,
		LAMP_15A1H08 => LAMP_15A1H08,
		LAMP_15A1J08 => LAMP_15A1J08,
		LAMP_15A1K08 => LAMP_15A1K08,
		LAMP_15A1H12 => LAMP_15A1H12,
		LAMP_15A1F12 => LAMP_15A1F12,
		LAMP_15A1A12 => LAMP_15A1A12,
		LAMP_15A1E12 => LAMP_15A1E12,
		LAMP_15A1C12 => LAMP_15A1C12,
		LAMP_11C8A12 => LAMP_11C8A12,
		LAMP_15A1A19 => LAMP_15A1A19,
		LAMP_11C8A13 => LAMP_11C8A13,
		LAMP_15A1C19 => LAMP_15A1C19,
		LAMP_15A1B19 => LAMP_15A1B19,
		LAMP_11C8A10 => LAMP_11C8A10,
		LAMP_15A1H20 => LAMP_15A1H20,
		LAMP_15A1H19 => LAMP_15A1H19,
		LAMP_15A1F19 => LAMP_15A1F19,
		LAMP_11C8A07 => LAMP_11C8A07,
		LAMP_15A1E20 => LAMP_15A1E20,
		LAMP_15A1F20 => LAMP_15A1F20,
		LAMP_15A1C20 => LAMP_15A1C20,
		LAMP_15A1V01 => LAMP_15A1V01,
		LAMP_15A1B15 => LAMP_15A1B15,
		LAMP_15A1W01 => LAMP_15A1W01,
		LAMP_15A1W04 => LAMP_15A1W04,
		LAMP_15A2K03 => LAMP_15A2K03,
		LAMP_15A2K05 => LAMP_15A2K05,
		LAMP_15A1K22 => LAMP_15A1K22,
		LAMP_15A1K21 => LAMP_15A1K21,
		LAMP_11C8A04 => LAMP_11C8A04,
		LAMP_11C8B05 => LAMP_11C8B05,
		LAMP_11C8B04 => LAMP_11C8B04,
		LAMP_11C8A05 => LAMP_11C8A05,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		PS_OP_MOD_REG_BUS => PS_OP_MOD_REG_BUS,
		PS_OP_MOD_REG_NOT_BUS => PS_OP_MOD_REG_NOT_BUS,
		MY_MEM_AR_NOT_UP_BUS => MY_MEM_AR_NOT_UP_BUS,
		MY_MEM_AR_UP_BUS => MY_MEM_AR_UP_BUS,
		MY_MEM_AR_NOT_TP_BUS => MY_MEM_AR_NOT_TP_BUS,
		MY_MEM_AR_TP_BUS => MY_MEM_AR_TP_BUS,
		MY_MEM_AR_NOT_HP_BUS => MY_MEM_AR_NOT_HP_BUS,
		MY_MEM_AR_HP_BUS => MY_MEM_AR_HP_BUS,
		MY_MEM_AR_NOT_THP_BUS => MY_MEM_AR_NOT_THP_BUS,
		MY_MEM_AR_THP_BUS => MY_MEM_AR_THP_BUS,
		MY_MEM_AR_TTHP_BUS => MY_MEM_AR_TTHP_BUS,
		PS_A_CH_NOT_BUS => PS_A_CH_NOT_BUS,
		MY_ASSEMBLY_CH_BUS => MY_ASSEMBLY_CH_BUS,
		MC_E_CH_UNIT_STAR_1301_STAR_BUS => MC_E_CH_UNIT_STAR_1301_STAR_BUS,
		PS_E_CH_U_SEL_REG_NOT_BUS => PS_E_CH_U_SEL_REG_NOT_BUS,
		PS_E_CH_U_SEL_REG_BUS => PS_E_CH_U_SEL_REG_BUS,
		MC_F_CH_UNIT_STAR_1301_STAR_BUS => MC_F_CH_UNIT_STAR_1301_STAR_BUS,
		PS_F_CH_U_SEL_REG_NOT_BUS => PS_F_CH_U_SEL_REG_NOT_BUS,
		PS_F_CH_U_SEL_REG_BUS => PS_F_CH_U_SEL_REG_BUS,
		PS_E2_REG_BUS => PS_E2_REG_BUS,
		MC_CPU_TO_E_CH_TAU_BUS => MC_CPU_TO_E_CH_TAU_BUS,
		MC_CPU_TO_I_O_SYNC_BUS => MC_CPU_TO_I_O_SYNC_BUS,
		MC_CPU_TO_E_CH_1301_BUS => MC_CPU_TO_E_CH_1301_BUS,
		MC_CPU_TO_E_CH_1405_BUS => MC_CPU_TO_E_CH_1405_BUS,
		PS_F2_REG_BUS => PS_F2_REG_BUS,
		MS_F2_REG_BUS => MS_F2_REG_BUS,
		MC_CPU_TO_F_CH_TAU_BUS => MC_CPU_TO_F_CH_TAU_BUS,
		MC_CPU_TO_F_CH_1301_BUS => MC_CPU_TO_F_CH_1301_BUS,
		MC_CPU_TO_F_CH_1405_BUS => MC_CPU_TO_F_CH_1405_BUS,
		PV_X_LSMS_DRV_IN_BUS => PV_X_LSMS_DRV_IN_BUS,
		PV_Y_LSMS_DRV_IN_BUS => PV_Y_LSMS_DRV_IN_BUS,
		MV_INH_CHAR_0_D1_BUS => MV_INH_CHAR_0_D1_BUS,
		MV_INH_CHAR_0_B1_BUS => MV_INH_CHAR_0_B1_BUS,
		MV_INH_CHAR_1_D1_BUS => MV_INH_CHAR_1_D1_BUS,
		MV_INH_CHAR_1_B1_BUS => MV_INH_CHAR_1_B1_BUS,
		MV_INH_CHAR_2_D1_BUS => MV_INH_CHAR_2_D1_BUS,
		MV_INH_CHAR_2_B1_BUS => MV_INH_CHAR_2_B1_BUS,
		MV_INH_CHAR_3_D1_BUS => MV_INH_CHAR_3_D1_BUS,
		MV_INH_CHAR_3_B1_BUS => MV_INH_CHAR_3_B1_BUS,
		MY_ASSEMBLY_CH_Z_BUS => MY_ASSEMBLY_CH_Z_BUS,
		LAMPS_LOGIC_GATE_RING => LAMPS_LOGIC_GATE_RING,
		LAMPS_IRING => LAMPS_IRING,
		LAMPS_CYCLE_CE => LAMPS_CYCLE_CE,
		LAMPS_CYCLE_CONSOLE => LAMPS_CYCLE_CONSOLE,
		LAMPS_SCAN => LAMPS_SCAN,
		LAMPS_OPREG_CE => LAMPS_OPREG_CE,
		LAMPS_OPMOD_CE => LAMPS_OPMOD_CE,
		LAMPS_MAR_UP => LAMPS_MAR_UP,
		LAMPS_MAR_TP => LAMPS_MAR_TP,
		LAMPS_MAR_HP => LAMPS_MAR_HP,
		LAMPS_MAR_THP => LAMPS_MAR_THP,
		LAMPS_MAR_TTHP => LAMPS_MAR_TTHP,
		LAMPS_ARING => LAMPS_ARING,
		LAMPS_B_CH => LAMPS_B_CH,
		LAMPS_A_CH => LAMPS_A_CH,
		LAMPS_ASSM_CH_NOT => LAMPS_ASSM_CH_NOT,
		LAMPS_ASSM_CH => LAMPS_ASSM_CH);		
				
startButton: debounce port map(
            clk => FPGA_CLK,
            reset_n => notInitSystem,
            button => btnC,
            result => BUTTON_START_CENTER_DEBOUNCED);

upButton: debounce 
   port map(
      clk => FPGA_CLK,
      reset_n => notInitSystem,
      button => btnU,
      result => BUTTON_UP_TOP_DEBOUNCED);
    
-- Instantiate Memory

memory: IBM1410Memory 
   Port map(
      FPGA_CLK => FPGA_CLK,
      MY_X_RD_1 => MY_X_RD_1,
      MY_X_WR_1 => MY_X_WR_1, 
      -- MY_X_WR_1 => '1',  -- disable writes for now
      MY_MEM_AR_NOT_UP_BUS => MY_MEM_AR_NOT_UP_BUS,
      MY_MEM_AR_NOT_TP_BUS => MY_MEM_AR_NOT_TP_BUS,
      MY_MEM_AR_NOT_HP_BUS => MY_MEM_AR_NOT_HP_BUS,
      MY_MEM_AR_NOT_THP_BUS => MY_MEM_AR_NOT_THP_BUS,
      MY_MEM_AR_NOT_TTHP_BUS => LOCAL_MY_MEM_AR_NOT_TTHP_BUS,
      MV_INH_CHAR_0_B1_BUS => MV_INH_CHAR_0_B1_BUS,
      MV_INH_CHAR_0_D1_BUS => MV_INH_CHAR_0_D1_BUS,
      MV_INH_CHAR_1_B1_BUS => MV_INH_CHAR_1_B1_BUS,
      MV_INH_CHAR_1_D1_BUS => MV_INH_CHAR_1_D1_BUS,
      MV_INH_CHAR_2_B1_BUS => MV_INH_CHAR_2_B1_BUS,
      MV_INH_CHAR_2_D1_BUS => MV_INH_CHAR_2_D1_BUS,
      MV_INH_CHAR_3_B1_BUS => MV_INH_CHAR_3_B1_BUS,
      MV_INH_CHAR_3_D1_BUS => MV_INH_CHAR_3_D1_BUS,
      PV_SENSE_CHAR_0_BUS => PV_SENSE_CHAR_0_B1_BUS,
      PV_SENSE_CHAR_1_BUS => PV_SENSE_CHAR_1_B1_BUS,
      PV_SENSE_CHAR_2_BUS => PV_SENSE_CHAR_2_B1_BUS,
      PV_SENSE_CHAR_3_BUS => PV_SENSE_CHAR_3_B1_BUS,

      IBM1410_DIRECT_MEMORY_ADDRESS      => IBM1410_DIRECT_MEMORY_ADDRESS,
      IBM1410_DIRECT_MEMORY_ENABLE       => IBM1410_DIRECT_MEMORY_ENABLE,  
      IBM1410_DIRECT_MEMORY_WRITE_ENABLE => IBM1410_DIRECT_MEMORY_WRITE_ENABLE,
      IBM1410_DIRECT_MEMORY_WRITE_DATA   => IBM1410_DIRECT_MEMORY_WRITE_DATA,
      IBM1410_DIRECT_MEMORY_READ_DATA_0  => IBM1410_DIRECT_MEMORY_READ_DATA_0,
      IBM1410_DIRECT_MEMORY_READ_DATA_1  => IBM1410_DIRECT_MEMORY_READ_DATA_1,
      IBM1410_DIRECT_MEMORY_READ_DATA_2  => IBM1410_DIRECT_MEMORY_READ_DATA_2,
      IBM1410_DIRECT_MEMORY_READ_DATA_3  => IBM1410_DIRECT_MEMORY_READ_DATA_3 );

-- Instantiate the console typewriter

   ConsoleTypewriter: IBM1410ConsoleTypewriter
   generic map(FAST_MULTIPLIER => 100,    -- 100x speed, so 10us == 1ms
               SLOW_MULTIPLIER => 10000)  -- normal speed 
   port map(
      FPGA_CLK => FPGA_CLK,
      UART_RESET => UART_RESET,
      SLOW_TYPING => SLOW_TYPING,
      
      PW_CONS_PRINTER_R1_SOLENOID => PW_CONS_PRINTER_R1_SOLENOID,      
      PW_CONS_PRINTER_R2_SOLENOID => PW_CONS_PRINTER_R2_SOLENOID,
      PW_CONS_PRINTER_R2A_SOLENOID => PW_CONS_PRINTER_R2A_SOLENOID,
      PW_CONS_PRINTER_R5_SOLENOID => PW_CONS_PRINTER_R5_SOLENOID,
      PW_CONS_PRINTER_T1_SOLENOID => PW_CONS_PRINTER_T1_SOLENOID,
      PW_CONS_PRINTER_T2_SOLENOID => PW_CONS_PRINTER_T2_SOLENOID,

      PW_UPPER_CASE_SHIFT_SOLENOID => PW_UPPER_CASE_SHIFT_SOLENOID,
      PW_LOWER_CASE_SHIFT_SOLENOID => PW_LOWER_CASE_SHIFT_SOLENOID,
      PW_BACKSPACE_SOLENOID => PW_BACKSPACE_SOLENOID,
      PW_SPACE_SOLENOID => PW_SPACE_SOLENOID,
      PW_CARRIAGE_RETURN_SOLENOID => PW_CARRIAGE_RETURN_SOLENOID,      

      MW_KEYBOARD_LOCK_SOLENOID => MW_KEYBOARD_LOCK_SOLENOID,
      PW_CONS_PRINTER_CHK_SOLENOID => PW_CONS_PRINTER_CHK_SOLENOID,
      
      MV_CONS_PRINTER_C1_CAM_NO => MV_CONS_PRINTER_C1_CAM_NO,
      MV_CONS_PRINTER_C1_CAM_NC => MV_CONS_PRINTER_C1_CAM_NC,
      MV_CONS_PRINTER_C2_CAM_NC => MV_CONS_PRINTER_C2_CAM_NC,
      MV_CONS_PRINTER_C2_CAM_NO => MV_CONS_PRINTER_C2_CAM_NO,
      MV_CONS_PRINTER_C3_OR_C4_NO => MV_CONS_PRINTER_C3_OR_C4_NO,

      MV_CONS_PRINTER_SPACE_NO => MV_CONS_PRINTER_SPACE_NO,
      
      MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC => MV_CONS_PRINTER_UPPER_CASE_STAR_S1NC,
      MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO => MV_CONS_PRINTER_LOWER_CASE_STAR_S1NO,
      MB_CONS_PRINTER_EVEN_BIT_CHECK => MB_CONS_PRINTER_EVEN_BIT_CHECK,
      MV_CONS_PRINTER_ODD_BIT_CHECK => MV_CONS_PRINTER_ODD_BIT_CHECK, 
      MV_KEYBOARD_LOCK_MODE_STAR_NO => MV_KEYBOARD_LOCK_MODE_STAR_NO, 
      MV_KEYBOARD_UNLOCK_MODE => MV_KEYBOARD_UNLOCK_MODE,
      
      MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO => MV_CONS_INQUIRY_REQUEST_KEY_STAR_NO,
      MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO => MV_CONS_INQUIRY_RELEASE_KEY_STAR_NO,
      PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC => PV_CONS_INQUIRY_CANCEL_KEY_STAR_NC,
      MV_CONS_PRINTER_LAST_COLUMN_SET => MV_CONS_PRINTER_LAST_COLUMN_SET,
      
      MV_CONS_PRTR_TO_CPU_BUS => MV_CONS_PRTR_TO_CPU_BUS,
      MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO => MB_CONS_PRTR_WM_INPUT_STAR_WM_T_NO,
      MV_CONSOLE_C_INPUT_STAR_CHK_OP => MV_CONSOLE_C_INPUT_STAR_CHK_OP,
      IBM1410_CONSOLE_XMT_CHAR => IBM1410_CONSOLE_XMT_CHAR,
      IBM1410_CONSOLE_XMT_STROBE => IBM1410_CONSOLE_XMT_STROBE,
      IBM1410_CONSOLE_LOCK_XMT_CHAR => IBM1410_CONSOLE_LOCK_XMT_CHAR,
      IBM1410_CONSOLE_LOCK_XMT_STROBE => IBM1410_CONSOLE_LOCK_XMT_STROBE,
      
      IBM1410_CONSOLE_INPUT_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_CONSOLE_INDEX),
      IBM1410_CONSOLE_INPUT_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA      
      );

-- Instantiate the Channel 1 TAU Adapter - try shorter time for cycle length....

   TAU_CHANNEL_1: IBM1410TapeAdapterUnit
   generic map (
       CHANNEL_STROBE_LENGTH => CHANNEL_STROBE_LENGTH,   -- Generic at top  
       CHANNEL_CYCLE_LENGTH => CHANNEL_CYCLE_LENGTH,     -- Generic at top
       TAU_IRG_DELAY => TAU_IRG_DELAY,                   -- Generic at top
       TAU_WRITE_RBC_DELAY => TAU_WRITE_RBC_DELAY,       -- Generic at top
       TAU_OUTPUT_FIFO_SIZE => 80)     -- Test with a really small internal FIFO
   port map (
       FPGA_CLK => FPGA_CLK,
       MC_COMP_RESET_TO_TAPE => MC_COMP_RESET_TO_TAPE_STAR_E_CH,
        
       -- TAU Input Signals From CPU
       
       MC_CPU_TO_TAU_BUS => MC_CPU_TO_E_CH_TAU_BUS,       
       
       MC_WRITE_TAPE_CALL => MC_WRITE_TAPE_CALL_STAR_E_CH,
       MC_WRITE_TAPE_MK_CALL => MC_WRITE_TAPE_MK_CALL_STAR_E_CH,
       MC_ERASE_CALL => MC_ERASE_CALL_STAR_E_CH,
       MC_REWIND_UNLOAD => MC_REWIND_UNLOAD_STAR_E_CH,
       MC_REWIND_CALL => MC_REWIND_CALL_STAR_E_CH,
       MC_BACKSPACE_CALL => MC_BACKSPACE_CALL_STAR_E_CH,
       MC_TURN_OFF_TAPE_IND => MC_TURN_OFF_TAPE_IND_STAR_E_CH,
       MC_RESET_TAPE_SEL_REG => MC_RESET_TAPE_SEL_REG_STAR_E_CH,
       MC_SET_TAPE_SEL_REG => MC_SET_TAPE_SEL_REG_STAR_E_CH,
       MC_DISCONNECT_CALL => MC_DISCONNECT_CALL_STAR_E_CH,
       MC_READ_TAPE_CALL => MC_READ_TAPE_CALL_STAR_E_CH,
       MC_ODD_PARITY_TO_TAPE => MC_ODD_PARITY_TO_TAPE_STAR_E_CH,
       
       MC_UNIT_NU_0_TO_TAU => MC_UNIT_NU_0_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_1_TO_TAU => MC_UNIT_NU_1_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_2_TO_TAU => MC_UNIT_NU_2_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_3_TO_TAU => MC_UNIT_NU_3_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_4_TO_TAU => MC_UNIT_NU_4_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_5_TO_TAU => MC_UNIT_NU_5_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_6_TO_TAU => MC_UNIT_NU_6_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_7_TO_TAU => MC_UNIT_NU_7_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_8_TO_TAU => MC_UNIT_NU_8_TO_TAU_STAR_E_CH, 
       MC_UNIT_NU_9_TO_TAU => MC_UNIT_NU_9_TO_TAU_STAR_E_CH, 
            
       -- TAU Output Signals to CPU
       
       MC_TAU_TO_CPU_BUS => MC_E_CH_TAU_TO_CPU_BUS,

       MC_WRITE_CONDITION => MC_WRITE_CONDITION_STAR_E_CH,
       MC_SELECT_AND_REWIND => MC_SELECT_AND_REWIND_STAR_E_CH,
       MC_SELECT_AT_LOAD_POINT => MC_SELECT_AT_LOAD_POINT_STAR_E_CH,
       MC_SEL_OR_TAPE_IND_ON => MC_SEL_OR_TAPE_IND_ON_CH_1,
       
       MC_TAPE_READ_STROBE => MC_TAPE_READ_STROBE,
       MC_TAPE_BUSY => MC_TAPE_BUSY,
       MC_TAPE_ERROR => MC_TAPE_ERROR, 
       MC_TAPE_READY => MC_TAPE_READY,
       MC_TAPE_WRITE_STROBE => MC_TAPE_WRITE_STROBE,
       MC_TAPE_IN_PROCESS => MC_TAPE_IN_PROCESS,
      
       -- TAU to PC Support System
       
       IBM1410_TAU_XMT_UART_DATA => IBM1410_TAU_XMT_UART_DATA,
       IBM1410_TAU_XMT_UART_REQUEST => IBM1410_TAU_XMT_UART_REQUEST,
       IBM1410_TAU_XMT_UART_GRANT => IBM1410_TAU_XMT_UART_GRANT,
       IBM1410_TAU_XMT_UDP_FLUSH =>  IBM1410_TAU_XMT_UDP_FLUSH,
              
       -- PC Support System to TAU 
       
--       IBM1410_TAU_INPUT_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_TAU_CH_1_INDEX),
--       IBM1410_TAU_INPUT_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA

       IBM1410_TAU_INPUT_FIFO_WRITE_ENABLE => UDP_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_TAU_CH_1_INDEX),
       IBM1410_TAU_INPUT_FIFO_WRITE_DATA => UDP_INPUT_FIFO_WRITE_DATA

   );

-- Instantiate the Channel 2 TAU Adapter - try shorter time for cycle length....

   TAU_CHANNEL_2: IBM1410TapeAdapterUnit
   generic map (
       CHANNEL_STROBE_LENGTH => CHANNEL_STROBE_LENGTH,  -- Reduced from default of 100 (1us => 250ns)  
       CHANNEL_CYCLE_LENGTH => CHANNEL_CYCLE_LENGTH,    -- Wait time between chars for channel
       TAU_IRG_DELAY => TAU_IRG_DELAY,                  -- Tape drive startup delay
       TAU_WRITE_RBC_DELAY => TAU_WRITE_RBC_DELAY,      -- Tape driver read back check delay
       TAU_OUTPUT_FIFO_SIZE => 80)     -- Test with a really small internal FIFO       
   port map (
       FPGA_CLK => FPGA_CLK,
       MC_COMP_RESET_TO_TAPE => MC_COMP_RESET_TO_TAPE_STAR_F_CH,
        
       -- TAU Input Signals From CPU
       
       MC_CPU_TO_TAU_BUS => MC_CPU_TO_F_CH_TAU_BUS,       
       
       MC_WRITE_TAPE_CALL => MC_WRITE_TAPE_CALL_STAR_F_CH,
       MC_WRITE_TAPE_MK_CALL => MC_WRITE_TAPE_MK_CALL_STAR_F_CH,
       MC_ERASE_CALL => MC_ERASE_CALL_STAR_F_CH,
       MC_REWIND_UNLOAD => MC_REWIND_UNLOAD_STAR_F_CH,
       MC_REWIND_CALL => MC_REWIND_CALL_STAR_F_CH,
       MC_BACKSPACE_CALL => MC_BACKSPACE_CALL_STAR_F_CH,
       MC_TURN_OFF_TAPE_IND => MC_TURN_OFF_TI_STAR_F_CH,
       MC_RESET_TAPE_SEL_REG => MC_RESET_TAPE_SEL_REG_STAR_CH_F,
       MC_SET_TAPE_SEL_REG => MC_SET_TAPE_SEL_REG_STAR_CH_F,
       MC_DISCONNECT_CALL => MC_DISCONNECT_CALL_STAR_F_CH,
       MC_READ_TAPE_CALL => MC_READ_TAPE_CALL_STAR_F_CH,
       MC_ODD_PARITY_TO_TAPE => MC_ODD_PARITY_TO_TAPE_STAR_F_CH,
       
       MC_UNIT_NU_0_TO_TAU => MC_UNIT_NU_0_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_1_TO_TAU => MC_UNIT_NU_1_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_2_TO_TAU => MC_UNIT_NU_2_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_3_TO_TAU => MC_UNIT_NU_3_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_4_TO_TAU => MC_UNIT_NU_4_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_5_TO_TAU => MC_UNIT_NU_5_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_6_TO_TAU => MC_UNIT_NU_6_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_7_TO_TAU => MC_UNIT_NU_7_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_8_TO_TAU => MC_UNIT_NU_8_TO_TAU_STAR_F_CH, 
       MC_UNIT_NU_9_TO_TAU => MC_UNIT_NU_9_TO_TAU_STAR_F_CH, 
            
       -- TAU Output Signals to CPU
       
       MC_TAU_TO_CPU_BUS => MC_F_CH_TAU_TO_CPU_BUS,

       MC_WRITE_CONDITION => MC_WRITE_CONDITION_STAR_F_CH,
       MC_SELECT_AND_REWIND => MC_SELECT_AND_REWIND_STAR_F_CH,
       MC_SELECT_AT_LOAD_POINT => MC_SELECT_AT_LOAD_POINT_STAR_F_CH,
       MC_SEL_OR_TAPE_IND_ON => MC_SEL_OR_TI_ON_CH_2,
       
       MC_TAPE_READ_STROBE => MC_TAPE_READ_STROBE_F_CH_JRJ,
       MC_TAPE_BUSY => MC_TAPE_BUSY_F_CH_JRJ,
       MC_TAPE_ERROR => MC_TAPE_ERROR_F_CH_JRJ, 
       MC_TAPE_READY => MC_TAPE_READY_F_CH_JRJ,
       MC_TAPE_WRITE_STROBE => MC_TAPE_WRITE_STROBE_F_CH_JRJ,
       MC_TAPE_IN_PROCESS => MC_TAPE_IN_PROCESS_F_CH_JRJ,
      
       -- TAU to PC Support System
       
       IBM1410_TAU_XMT_UART_DATA => IBM1410_TAU_XMT_UART_DATA_F_CH,
       IBM1410_TAU_XMT_UART_REQUEST => IBM1410_TAU_XMT_UART_REQUEST_F_CH, 
       IBM1410_TAU_XMT_UART_GRANT => IBM1410_TAU_XMT_UART_GRANT_F_CH,
       IBM1410_TAU_XMT_UDP_FLUSH  => IBM1410_TAU_XMT_UDP_FLUSH_F_CH,       
              
       -- PC Support System to TAU 
       
--       IBM1410_TAU_INPUT_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_TAU_CH_2_INDEX),
--       IBM1410_TAU_INPUT_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA

       IBM1410_TAU_INPUT_FIFO_WRITE_ENABLE => UDP_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_TAU_CH_2_INDEX),
       IBM1410_TAU_INPUT_FIFO_WRITE_DATA => UDP_INPUT_FIFO_WRITE_DATA
   );


   -- Instantiate the LAMP transmission module
   
   CONSOLE_LAMPS_TRANSMITTER: IBM1410_CONSOLE_LAMPS_TRANSMITTER
   generic map(
      LAMP_VECTOR_BITS => LAMP_VECTOR_BITS,
      REFRESH_TIME => REFRESH_TIME,
      CLOCKPERIOD => CLOCKPERIOD
      )
   port map(
      FPGA_CLK => FPGA_CLK,
      RESET => UART_RESET,
      LAMP_SUPPRESSION => LAMP_SUPPRESSION,
      LAMP_VECTOR => LAMP_VECTOR,
      UART_OUTPUT_GRANT => LAMP_TRANSMITTER_UART_OUTPUT_GRANT,
      UDP_OUTPUT_FLUSH => LAMP_TRANSMITTER_REQUESTER_FLUSH,
      UART_OUTPUT_REQUEST => LAMP_TRANSMITTER_UART_OUTPUT_REQUEST,
      UART_OUTPUT_REQUEST_DATA => LAMP_TRANSMITTER_UART_OUTPUT_DATA
      );
   
   
   -- Instantiate the UART Output Subsystem

   UART_OUTPUT_SUBSYSTEM: IBM1410_UART_OUTPUT_SUBSYSTEM
    Generic map (UART_OUTPUT_CLKS_PER_BIT => 100000000 / 115200)
    Port map( 
       FPGA_CLK => FPGA_CLK,
       UART_RESET => UART_RESET,
       UART_OUTPUT_REQUESTER_STROBES => UART_OUTPUT_REQUESTER_STROBES,
       UART_OUTPUT_REQUEST_DATA_0 => UART_OUTPUT_REQUEST_DATA_0,
       UART_OUTPUT_REQUEST_DATA_1 => UART_OUTPUT_REQUEST_DATA_1,
       UART_OUTPUT_REQUEST_DATA_2 => UART_OUTPUT_REQUEST_DATA_2,
       UART_OUTPUT_REQUEST_DATA_3 => UART_OUTPUT_REQUEST_DATA_3,
       UART_OUTPUT_REQUEST_DATA_4 => UART_OUTPUT_REQUEST_DATA_4,
       UART_OUTPUT_REQUEST_DATA_5 => UART_OUTPUT_REQUEST_DATA_5,
       UART_OUTPUT_REQUEST_DATA_6 => UART_OUTPUT_REQUEST_DATA_6,
       UART_OUTPUT_REQUEST_DATA_7 => UART_OUTPUT_REQUEST_DATA_7,
       UART_OUTPUT_ARBITER_REQUESTS => UART_OUTPUT_ARBITER_REQUESTS,
       UART_OUTPUT_ARBITER_GRANTS => UART_OUTPUT_ARBITER_GRANTS,
       UART_OUTPUT_TX_DATA => UART_OUTPUT_TX_DATA);

   -- Instantiate the UART Input subsystem
   
   UART_INPUT_SUBSYSTEM: IBM1410_UART_INPUT_SUBSYSTEM
    GENERIC MAP (
       CLOCKS_PER_BIT => C_CLKS_PER_BIT,
       UART_INPUT_FIFO_COUNT => UART_INPUT_FIFO_COUNT
       )
    Port Map ( 
       FPGA_CLK => FPGA_CLK,
       RESET => UART_SWITCH_RESET,
       UART_RX_DATA => RsRx,
       UART_INPUT_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES,
       UART_INPUT_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA,
       UART_INPUT_CURRENT_STREAM => UART_INPUT_CURRENT_STREAM 
       );


   -- Instantiate the Xilinx provided IP to translate between the mii interface
   -- used by the UDP logic, and the rmii interface used by the PHY Ethernet
   -- on the NEXYS4 development board.

mii_to_rmii_interface: mii_to_rmii_0
   PORT MAP (
     rst_n             => phy_resetn, -- FPGA_RESETn,
     ref_clk           => phy_ref_clk_50Mhz,
    
     mac2rmii_tx_en    => mac2rmii_tx_en,
     mac2rmii_txd      => mac2rmii_txd,
     mac2rmii_tx_er    => mac2rmii_tx_er,
    
     rmii2mac_tx_clk   => rmii2mac_tx_clk,
     rmii2mac_rx_clk   => rmii2mac_rx_clk,
     rmii2mac_col      => rmii2mac_col,
     rmii2mac_crs      => rmii2mac_crs,
     rmii2mac_rx_dv    => rmii2mac_rx_dv,
     rmii2mac_rx_er    => rmii2mac_rx_er,
     rmii2mac_rxd      => rmii2mac_rxd,
    
     phy2rmii_crs_dv   => PhyCrs,
     phy2rmii_rx_er    => PhyRxErr,
     phy2rmii_rxd      => PhyRxd,
     rmii2phy_txd      => PhyTxd,
     rmii2phy_tx_en    => PhyTxEn
   );
   
-- Instantiate the UART-like interfaces to  the UDP Core

udp_uart_tx_interface: IBM1410_UDP_OUTPUT_UART_TX
   GENERIC MAP (
      MAX_UDP_PACKET_SIZE => UDP_UART_MAX_PACKET
   )
   PORT MAP (
      FPGA_CLOCK => FPGA_CLK,
      UDP_UART_RESET => UDP_RESET,
      -- UDP Core side
      tx_udp_hdr_ready => tx_udp_hdr_ready,
      tx_udp_payload_axis_tready => tx_udp_payload_axis_tready,
      tx_udp_hdr_valid => tx_udp_hdr_valid,
      tx_udp_payload_axis_tvalid => tx_udp_payload_axis_tvalid,
      tx_udp_payload_axis_tdata => tx_udp_payload_axis_tdata,
      tx_udp_payload_axis_tlast => tx_udp_payload_axis_tlast,
      -- UART-like interface side
      UDP_UART_TX_DATA_VALID => UDP_UART_TX_DATA_VALID,
      UDP_UART_TX_FLUSH => UDP_UART_TX_FLUSH, 
      UDP_UART_TX_BYTE => UDP_UART_TX_BYTE,
      UDP_UART_TX_ACTIVE => UDP_UART_TX_ACTIVE
   );      
   
udp_uart_rx_interface: IBM1410_UDP_INPUT_UART_RX
    Port Map (FPGA_CLOCK => FPGA_CLK,
          UDP_UART_RESET => UDP_RESET,
          -- UDP Side Interface 
          rx_match_cond => rx_match_cond,
          rx_udp_hdr_ready => rx_udp_hdr_ready,
          rx_udp_hdr_valid => rx_udp_hdr_valid,
          rx_udp_payload_axis_tready => rx_udp_payload_axis_tready,
          rx_udp_payload_axis_tvalid => rx_udp_payload_axis_tvalid,
          rx_udp_payload_axis_tdata => rx_udp_payload_axis_tdata,
          rx_udp_payload_axis_tlast => rx_udp_payload_axis_tlast,
          -- UART-like Interface
          UDP_UART_RX_DATA_READY => UDP_UART_RX_DATA_READY,
          UDP_UART_RX_DATA_VALID => UDP_UART_RX_DATA_VALID,
          UDP_UART_RX_BYTE => UDP_UART_RX_BYTE, 
          UDP_UART_RX_PACKET_END => UDP_UART_RX_PACKET_END
    );

-- Instantiate the IBM1410 UDP based input subsystem

UDP_INPUT_SUBSYSTEM: IBM1410_UDP_INPUT_SUBSYSTEM

    GENERIC MAP (
       UDP_INPUT_FIFO_COUNT => UDP_INPUT_FIFO_COUNT
       )
    Port Map ( 
       FPGA_CLK => FPGA_CLK,
       RESET =>    UDP_RESET,
       -- Interface to UART-LIKE UDP INTERFACE
       UDP_UART_RX_DATA_READY => UDP_UART_RX_DATA_READY,  -- Indicates this component ready for data
       UDP_UART_RX_DATA_VALID => UDP_UART_RX_DATA_VALID,  -- Indicates a byte of UDP data available
       UDP_UART_RX_BYTE       => UDP_UART_RX_BYTE,        -- A byte of UDP data
       UDP_UART_RX_PACKET_END => UDP_UART_RX_PACKET_END,  -- Indicates end of packet (not currently used)
       -- Interface to the IBM 1410 FPGA I/O components.  They are required to have FIFOs
       -- large enough that this component does NOT need to wait for them
       UDP_INPUT_FIFO_WRITE_ENABLE => UDP_INPUT_FIFO_WRITE_ENABLES,
       UDP_INPUT_FIFO_WRITE_DATA   => UDP_INPUT_FIFO_WRITE_DATA,
       UDP_INPUT_CURRENT_STREAM    => UDP_INPUT_CURRENT_STREAM
       );


-- Instantiate the IBM 1410 UDP based output subsystem

UDP_OUTPUT_SUBSYSTEM: IBM1410_UDP_OUTPUT_SUBSYSTEM
    Generic map (
       SIMULATED_UART => 0
    )
    Port map (
       FPGA_CLK => FPGA_CLK,
       UDP_RESET => UDP_RESET,
       UDP_OUTPUT_REQUESTER_STROBES => UDP_OUTPUT_REQUESTER_STROBES,
       UDP_OUTPUT_REQUESTER_FLUSHES => UDP_OUTPUT_REQUESTER_FLUSHES,
       UDP_OUTPUT_REQUEST_DATA_0    => UDP_OUTPUT_REQUEST_DATA_0,
       UDP_OUTPUT_REQUEST_DATA_1    => UDP_OUTPUT_REQUEST_DATA_1,
       UDP_OUTPUT_REQUEST_DATA_2    => UDP_OUTPUT_REQUEST_DATA_2,
       UDP_OUTPUT_REQUEST_DATA_3    => UDP_OUTPUT_REQUEST_DATA_3,
       UDP_OUTPUT_REQUEST_DATA_4    => UDP_OUTPUT_REQUEST_DATA_4,
       UDP_OUTPUT_REQUEST_DATA_5    => UDP_OUTPUT_REQUEST_DATA_5,
       UDP_OUTPUT_REQUEST_DATA_6    => UDP_OUTPUT_REQUEST_DATA_6,
       UDP_OUTPUT_REQUEST_DATA_7    => UDP_OUTPUT_REQUEST_DATA_7,   
       UDP_OUTPUT_ARBITER_REQUESTS  => UDP_OUTPUT_ARBITER_REQUESTS,
       UDP_OUTPUT_ARBITER_GRANTS    => UDP_OUTPUT_ARBITER_GRANTS,
       UDP_UART_TX_ACTIVE           => UDP_UART_TX_ACTIVE,
       UDP_UART_TX_DATA_VALID       => UDP_UART_TX_DATA_VALID,
       UDP_UART_TX_BYTE             => UDP_UART_TX_BYTE,
       UDP_UART_TX_FLUSH            => UDP_UART_TX_FLUSH,
       SERIAL_OUTPUT_TX_DATA        => UDP_DUMMY_SERIAL_OUTPUT  -- Not used if SIMULATED_UART is 0
    );
   
---------------------------------------------------------------------------
-- Instantiate UDP Core
---------------------------------------------------------------------------

UDP: udp_fpga
   PORT MAP (
      clk              => FPGA_CLK,
      reset_n          => UDP_RESETn,
      mmcm_locked      => mmcm_locked,

      -- TODO  LED Test Vector
      debug_leds         => udp_debug_leds,

      -- 100Base-T MII
      phy_ref_clk      => phy_ref_clk_50Mhz,
      phy_rx_clk       => rmii2mac_rx_clk,
      phy_rxd          => rmii2mac_rxd,
      phy_rx_dv        => rmii2mac_rx_dv,
      phy_rx_er        => rmii2mac_rx_er,
      phy_tx_clk       => rmii2mac_tx_clk,
      phy_txd          => mac2rmii_txd,
      phy_tx_en        => mac2rmii_tx_en,
      phy_col          => rmii2mac_col,
      phy_crs          => rmii2mac_crs,
      phy_reset_n      => OPEN,  -- The code there doesn't meet our needs (yet, anyway)
      
      -- Ethernet configuration inputs
      
      local_mac        => udp_local_mac,
      
      -- IP Configuration inputs
      
      local_ip         => udp_local_ip,
      gateway_ip       => udp_gateway_ip,
      subnet_mask      => udp_subnet_mask,
      remote_ip        => udp_remote_ip,
      
      -- UDP In From Network
      
      rx_udp_hdr_ready => rx_udp_hdr_ready,
      rx_udp_hdr_valid => rx_udp_hdr_valid,
      rx_match_cond    => rx_match_cond,
      
      rx_udp_ip_source_ip => rx_udp_ip_source_ip,
      rx_udp_ip_dest_ip   => rx_udp_ip_dest_ip,
      rx_udp_source_port  => rx_udp_source_port,
      rx_udp_dest_port    => rx_udp_dest_port,
      rx_udp_length       => rx_udp_length,
      
      rx_udp_payload_axis_tready => rx_udp_payload_axis_tready,
      rx_udp_payload_axis_tvalid => rx_udp_payload_axis_tvalid,
      rx_udp_payload_axis_tlast  => rx_udp_payload_axis_tlast,
      rx_udp_payload_axis_tdata  => rx_udp_payload_axis_tdata,
      
      -- UDP Out To Network
      
      tx_udp_ip_source_ip        => tx_udp_ip_source_ip,
      tx_udp_ip_dest_ip          => tx_udp_ip_dest_ip,
      tx_udp_source_port         => tx_udp_source_port,
      tx_udp_dest_port           => tx_udp_dest_port,
      
      tx_udp_hdr_ready           => tx_udp_hdr_ready,
      tx_udp_hdr_valid           => tx_udp_hdr_valid,
      
      tx_udp_payload_axis_tready => tx_udp_payload_axis_tready,
      tx_udp_payload_axis_tdata  => tx_udp_payload_axis_tdata,
      tx_udp_payload_axis_tvalid => tx_udp_payload_axis_tvalid,
      tx_udp_payload_axis_tlast  => tx_udp_payload_axis_tlast      
      
   );   
   
   -- Instantiate the Console Switches
   
   CONSOLE_SWITCHES_RECEIVER: IBM1410_CONSOLE_SWITCHES_RECEIVER 
    GENERIC MAP(
       SWITCH_VECTOR_BITS => SWITCH_VECTOR_BITS
       )
    Port Map ( FPGA_CLK => FPGA_CLK,
           -- RESET => UART_SWITCH_RESET,
           DEBUG_VECTOR => SWITCHES_DEBUG_VECTOR,
		     RESET => UDP_RESET,
           SWITCH_VECTOR_INIT => SWITCH_VECTOR_INIT,
           -- SWITCH_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_SWITCHES_INDEX),
           -- SWITCH_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA,
           SWITCH_FIFO_WRITE_ENABLE => UDP_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_SWITCHES_INDEX),
           SWITCH_FIFO_WRITE_DATA => UDP_INPUT_FIFO_WRITE_DATA,
           SWITCH_VECTOR => SWITCH_VECTOR
    );
    
    -- Instantiate the direct memory load module
    
    MEMORY_LOADER_RECEIVER: IBM1410_MEMORY_LOADER_RECEIVER
       Port MAP ( 
          FPGA_CLK => FPGA_CLK,
--          RESET => UART_SWITCH_RESET,
--          LOADER_FIFO_WRITE_ENABLE => UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_MEMORY_LOADER_INDEX),
--          LOADER_FIFO_WRITE_DATA => UART_INPUT_FIFO_WRITE_DATA,
          RESET => UDP_RESET,
          LOADER_FIFO_WRITE_ENABLE => UDP_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_MEMORY_LOADER_INDEX),
          LOADER_FIFO_WRITE_DATA => UDP_INPUT_FIFO_WRITE_DATA,          
          IBM1410_DIRECT_MEMORY_ADDRESS => IBM1410_DIRECT_MEMORY_ADDRESS,
          IBM1410_LOADER_DIRECT_MEMORY_ENABLE => IBM1410_DIRECT_MEMORY_ENABLE,
          IBM1410_LOADER_DIRECT_MEMORY_WRITE_ENABLE => IBM1410_DIRECT_MEMORY_WRITE_ENABLE,
          IBM1410_DIRECT_MEMORY_WRITE_DATA => IBM1410_DIRECT_MEMORY_WRITE_DATA,
          IBM1410_MEMORY_LOADER_DEBUG_VECTOR => IBM1410_MEMORY_LOADER_DEBUG_VECTOR
       );
    
    -- Instantiate the rotary switch decoders
    
    -- CONSOLE_MODE_SWITCH: IBM1410_SWITCH_DECODER_LONG
    --  Port Map (SWITCH_VECTOR_IN => SWITCH_VECTOR(122 downto 110),
    --        SWITCH_VECTOR_OUT => SWITCH_ROT_MODE_SW_DK);
   
   
-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
---- End of TestBenchFPGAClock.vhdl

-- Initial reset

--
-- It turns out, at least for now, that initSystem and the power on reset
-- relay are doing essentially the same sort of thing: holding the system
-- reset while things are set up (on the real hardware, while the supply
-- voltages stabilize and logic resets).

IBM1410_PowerOn_Reset_process: process (CLK, initSystem) 
begin
    if(initSystem = '1') then
        if(rising_edge(CLK)) then
--            if(SWITCH_REL_PWR_ON_RST = '0') then
--                if(tmrCntr = TMR_CNTR_100) then
--                    SWITCH_REL_PWR_ON_RST <= '1';
--                end if;
--            else
--                if(tmrCntr = TMR_CNTR_200) then
--                    SWITCH_REL_PWR_ON_RST <= '0';
--                    initSystem <= '0';
--                end if;
--            end if;
            if(SWITCH_REL_PWR_ON_RST = '1') then
               if(tmrCntr = TMR_CNTR_200) then
                  SWITCH_REL_PWR_ON_RST <= '0';
                  initSystem <= '0';
               end if;
            end if;
            tmrCntr <= tmrCntr + 1;            
        end if;
    end if;
end process;


-- Process to handle special reset requrements for the Ethernet PHY interface

resets: process(FPGA_CLK, resetCounter, btnCpuReset, resetState, mmcm_locked)
   begin
      if FPGA_CLK'event and FPGA_CLK = '1' then      
         case resetState is
         when RESET_INIT =>
            --  Initial reset state after power on waits for the PLL to lock,
            --  then starts automatically.  This is a ONE TIME initial reaset
            if mmcm_locked = '1' then
               resetCounter <= X"0000";
               -- phy_resetn <= '0';
               resetState <= RESET_COUNTING;
            else
               resetState <= RESET_INIT;
            end if;
            
         when RESET_IDLE =>
         -- IF PLL is locked and reset button pressed - start a reset
            if (mmcm_locked = '1') and (btnCpuReset = '0') then
               resetCounter <= X"0000";
               -- phy_resetn <= '0';
               resetState <= RESET_COUNTING;
            else
               -- phy_resetn <= '1';               
               resetState <= RESET_IDLE;
            end if;
            
         when RESET_COUNTING =>
            -- Reset in progress, and in the process of counting.
            -- when we reach all 1 buts, de-assert reset
            if resetCounter = X"FFFF" then
               -- phy_resetn <= '1';
               resetState <= RESET_IDLE;
            else
               resetState <= RESET_COUNTING;
               resetCounter <= resetCounter + 1;
            end if;
         end case;
      end if;
   end process;

-- Process to sample some signals at a certain point in time and put them in LEDs.

debugLEDProcess: process(
   CLK,
   PS_E_CH_STATUS_SAMPLE_A,
   MC_TAPE_READY,
   MC_TAPE_BUSY,
   MC_SELECT_AT_LOAD_POINT_STAR_E_CH,
   MC_SELECT_AND_REWIND_STAR_E_CH,
   MC_REWIND_CALL_STAR_E_CH,
   PS_E_CH_READY_BUS)
   begin
   
   -- Sample and remember various signals to put into the LEDs
   
   if CLK'EVENT and CLK = '1' then -- and PS_E_CH_STATUS_SAMPLE_A = '1' then
      debugMCReady <= MC_TAPE_READY;
      debugMCBusy <= MC_TAPE_BUSY;
      debugMCSelAtLP <= MC_SELECT_AT_LOAD_POINT_STAR_E_CH;
      debugMCSelRewind <= MC_SELECT_AND_REWIND_STAR_E_CH;
      debugECHReady <= PS_E_CH_READY_BUS;
      debugMCRewindCall <= MC_REWIND_CALL_STAR_E_CH;
   end if;
   
end process;   

outputSubsystemOutput: if USE_UDP_OUTPUT_TEST = 1 generate

   txOutputSubsystemTest: process(FPGA_CLK,outputSubsystemTestState,BUTTON_UP_TOP_DEBOUNCED,
      UDP_OUTPUT_REQUESTER_STROBES, UDP_OUTPUT_ARBITER_REQUESTS,
      UDP_OUTPUT_ARBITER_GRANTS)
      
      begin
      if FPGA_CLK'event and FPGA_CLK = '1' then
      
         -- Wait for a button to start the test
         case outputSubsystemTestState is
         
         when outputSubsystemTestIdle =>
            if BUTTON_UP_TOP_DEBOUNCED = '1' then
               outputSubsystemTestState <= outputSubsystemTest1a;
               tx_fill_counter <= 0;
            end if;
         
         -- Start of first test.  Make a request
         when outputSubsystemTest1a =>
            UDP_OUTPUT_REQUEST_DATA_7 <= "00110001";
            UDP_OUTPUT_REQUESTER_STROBES(7) <= '1';
            outputSubsystemTestState <= outputSubsystemTest1b;
            
         -- Wait for the grant to go true
         when outputSubsystemTest1b =>
            UDP_OUTPUT_REQUESTER_STROBES(7) <= '0';
            if UDP_OUTPUT_ARBITER_GRANTS(7) = '1' then
               outputSubsystemTestState <= outputSubsystemTest2a;
            else
               outputSubsystemTestState <= outputSubsystemTest1b;
            end if;

         -- Start of second test.  Make another request
         when outputSubsystemTest2a =>
            -- Have to wait for previous grant to go away. THEN strobe
            if UDP_OUTPUT_ARBITER_GRANTS(7) = '0' then
               UDP_OUTPUT_REQUEST_DATA_7 <= "00110010";
               UDP_OUTPUT_REQUESTER_STROBES(7) <= '1';
               outputSubsystemTestState <= outputSubsystemTest2b;
            else
               outputSubsystemtestState <= outputSubsystemTest2a;
            end if;
            
         -- Wait for the grant to go true
         when outputSubsystemTest2b =>
            UDP_OUTPUT_REQUESTER_STROBES(7) <= '0';
            if UDP_OUTPUT_ARBITER_GRANTS(7) = '1' then
               outputSubsystemTestState <= outputSubsystemTest3a;
            else
               outputSubsystemTestState <= outputSubsystemTest2b;
            end if;
            
         -- Start of third test:  simultaneous requests
         when outputSubsystemTest3a =>
            -- Previous Grant has to be gone first
            if UDP_OUTPUT_ARBITER_GRANTS(7) = '0' then        
               UDP_OUTPUT_REQUEST_DATA_7 <= "00110011";
               UDP_OUTPUT_REQUEST_DATA_6 <= "00110100";
               UDP_OUTPUT_REQUESTER_FLUSHES(6) <= '1';
               UDP_OUTPUT_REQUESTER_STROBES(7) <= '1';
               UDP_OUTPUT_REQUESTER_STROBES(6) <= '1';
               outputSubsystemTestState <= outputSubsystemTest3b;
            else
               outputSubsystemTestState <= outputSubsystemTest3a;
            end if;
            
         when outputSubsystemTest3b =>
            UDP_OUTPUT_REQUESTER_STROBES(7) <= '0';
            UDP_OUTPUT_REQUESTER_STROBES(6) <= '0';
            UDP_OUTPUT_REQUESTER_FLUSHES(6) <= '0';
            -- Grant 7 should come first
            if UDP_OUTPUT_ARBITER_GRANTS(7) = '1' then
               outputSubsystemTestState <= outputSubsystemTest3c;
            else
               outputSubsystemTestState <= outputSubsystemTest3b;
            end if;
            
         when outputSubsystemTest3c =>
            if UDP_OUTPUT_ARBITER_GRANTS(6) = '1' then
               outputSubsystemTestState <= outputSubsystemTest3c;
            else
               outputSubsystemTestState <= outputSubsystemTest4a;
            end if;             
         
         when outputSubsystemTest4a =>
            if UDP_OUTPUT_ARBITER_GRANTS(5) = '0' then
               UDP_OUTPUT_REQUEST_DATA_5 <=
                  std_logic_vector(to_unsigned(tx_fill_counter, UDP_OUTPUT_REQUEST_DATA_5'length));
               if tx_fill_counter = 63 then
                  UDP_OUTPUT_REQUESTER_FLUSHES(5) <= '1';
               else
                  UDP_OUTPUT_REQUESTER_FLUSHES(5) <= '0';
               end if;
               UDP_OUTPUT_REQUESTER_STROBES(5) <= '1';
               outputSubsystemTestState <= outputSubsystemTest4b;
            else
               outputSubsystemTestState <= outputSubsystemTest4a;
            end if; 
         
         when outputSubsystemTest4b =>
            UDP_OUTPUT_REQUESTER_STROBES(5) <= '0';
            if UDP_OUTPUT_ARBITER_GRANTS(5) = '0' then
               outputSubsystemTestState <= outputSubsystemTest4b;
            else
               if tx_fill_counter = 63 then
                  outputSubsystemTestState <= outputSubsystemTestButtonWait;
               else
                  tx_fill_counter <= tx_fill_counter + 1;
                  outputSubsystemTestState <= outputSubsystemTest4a;
               end if;
            end if;
         
         when outputSubsystemTestButtonWait =>
            if BUTTON_UP_TOP_DEBOUNCED = '0' and 
               UDP_OUTPUT_ARBITER_GRANTS = "00" then
               outputSubsystemTestState <= outputSubsystemTestIdle;
            else
               outputSubsystemTestState <= outputSubsystemTestButtonWait;
            end if;
            
            
         -- Dummy case for unused states.
         when others =>
            outputSubsystemTestState <= outputSubsystemTestButtonWait;
         
         end case;
      end if;
      
      end process;
      
-- rxUartTest: process(FPGA_CLK, UDP_RESET, 
--    UDP_UART_RX_DATA_VALID, UDP_UART_RX_BYTE, UDP_UART_RX_PACKET_END,
--    rxTestState)
--    begin
   
--    if UDP_RESET = '1' then
--       rxTestState <= RX_IDLE;
--       rx_first_byte <= X"FF";
--       rx_last_byte <= X"FF";
--       rx_byte_count <= 0;
--       rx_delay_counter <= 0;
      
--    elsif FPGA_CLK'event and FPGA_CLK = '1' then
      -- if UDP_UART_RX_DATA_READY = '1' then  --- This is ME being ready for data from UART
      --    if UDP_UART_RX_DATA_VALID = '1' then         
      --       if rx_byte_count = 0 then
      --          rx_first_byte <= UDP_UART_RX_BYTE;
      --       end if;
      --       rx_byte_count <= rx_byte_count + 1;
      --       if UDP_UART_RX_PACKET_END = '1' then
      --          rx_last_byte <= UDP_UART_RX_BYTE;
      --       end if;
      --    end if;
      -- end if;
      
	  -- 

      -- The following controls the UDP_UART_RX_DATA_READY so it is only
      -- true once every 5 cycles -- to test speed matching!
      -- UDP_UART_RX_DATA_READY is a combinatorial signal fed to
      -- the Uart interface.
      
      -- if rx_delay_counter =32 then
      --    rx_delay_counter <= 0;
	  -- else
      --    rx_delay_counter <= rx_delay_counter + 1;
      -- end if;
      
--    end if;
     
--    end process;
      
      
   end generate;

-- Assign lamp vector from lamps for transmission to PC host

	LAMP_VECTOR(202) <= LAMP_11C8A01;  -- TP B TAG 14.50.02.1
	LAMP_VECTOR(201) <= LAMP_11C8A02;  -- HP B TAG 14.50.01.1
	LAMP_VECTOR(200) <= LAMP_11C8A04;  -- MATRIX X1A 45.20.05.1
	LAMP_VECTOR(199) <= LAMP_11C8A05;  -- CONS HOME 45.30.01.1
	LAMP_VECTOR(198) <= LAMP_11C8A07;  -- ADDR CH VC 18.14.03.1
	LAMP_VECTOR(197) <= LAMP_11C8A10;  -- ASM CH ERR 18.13.03.1
	LAMP_VECTOR(196) <= LAMP_11C8A12;  -- A CH VC 18.11.03.1
	LAMP_VECTOR(195) <= LAMP_11C8A13;  -- B CH VC 18.12.03.1
	LAMP_VECTOR(194) <= LAMP_11C8B01;  -- TP A TAG 14.50.02.1
	LAMP_VECTOR(193) <= LAMP_11C8B02;  -- HP A TAG 14.50.01.1
	LAMP_VECTOR(192) <= LAMP_11C8B04;  -- MATRIX 33 45.20.09.1
	LAMP_VECTOR(191) <= LAMP_11C8B05;  -- MATRIX 32 45.20.09.1
	LAMP_VECTOR(190) <= LAMP_11C8C14;  -- CH SEL A 15.38.02.1
	LAMP_VECTOR(189) <= LAMP_11C8D14;  -- CH SEL D 15.38.02.1
	LAMP_VECTOR(188) <= LAMP_11C8E14;  -- E CH SEL 15.38.03.1
	LAMP_VECTOR(187) <= LAMP_11C8F07;  -- ADDR CH 8 14.45.05.1
	LAMP_VECTOR(186) <= LAMP_11C8F14;  -- F CH SEL 15.38.05.1
	LAMP_VECTOR(185) <= LAMP_11C8G07;  -- ADDR CH 4 14.45.04.1
	LAMP_VECTOR(184) <= LAMP_11C8H07;  -- ADDR CH 2 14.45.03.1
	LAMP_VECTOR(183) <= LAMP_11C8J07;  -- ADDR CH 1 14.45.02.1
	LAMP_VECTOR(182) <= LAMP_11C8K07;  -- ADDR CH 0 14.45.01.1
	LAMP_VECTOR(181) <= LAMP_15A1A11;  -- CARRY IN 16.20.21.1
	LAMP_VECTOR(180) <= LAMP_15A1A12;  -- B BIGGER 17.14.01.1
	LAMP_VECTOR(179) <= LAMP_15A1A14;  -- CH 1 INLK 15.62.02.1
	LAMP_VECTOR(178) <= LAMP_15A1A15;  -- CH 2 INLK 15.63.02.1
	LAMP_VECTOR(177) <= LAMP_15A1A16;  -- CH1 NO RDY 12.62.01.1
	LAMP_VECTOR(176) <= LAMP_15A1A17;  -- CH 2 N RDY 13.66.05.1
	LAMP_VECTOR(175) <= LAMP_15A1A19;  -- A CH VC 18.11.03.1
	LAMP_VECTOR(174) <= LAMP_15A1B14;  -- RBC ON 13.72.03.1
	LAMP_VECTOR(173) <= LAMP_15A1B15;  -- CHECK 18.14.11.1
	LAMP_VECTOR(172) <= LAMP_15A1B19;  -- ASM CH ERR 18.13.03.1
	LAMP_VECTOR(171) <= LAMP_15A1C11;  -- CARRY OUT 16.14.06.1
	LAMP_VECTOR(170) <= LAMP_15A1C12;  -- B EQUAL 17.14.03.1
	LAMP_VECTOR(169) <= LAMP_15A1C15;  -- RBC INTLK 13.73.03.1
	LAMP_VECTOR(168) <= LAMP_15A1C16;  -- CH 1 BUSY 12.62.02.1
	LAMP_VECTOR(167) <= LAMP_15A1C17;  -- CH 2 BUSY 13.66.05.1
	LAMP_VECTOR(166) <= LAMP_15A1C19;  -- B CHAN VC 18.12.03.1
	LAMP_VECTOR(165) <= LAMP_15A1C20;  -- B RES ERR 18.14.06.1
	LAMP_VECTOR(164) <= LAMP_15A1E11;  -- COMPL A 16.20.15.1
	LAMP_VECTOR(163) <= LAMP_15A1E12;  -- B SMALLER 17.14.02.1
	LAMP_VECTOR(162) <= LAMP_15A1E14;  -- CH 1 READ 15.62.01.1
	LAMP_VECTOR(161) <= LAMP_15A1E15;  -- CH 2 READ 15.63.01.1
	LAMP_VECTOR(160) <= LAMP_15A1E16;  -- CH 1 CHECK 12.62.04.1
	LAMP_VECTOR(159) <= LAMP_15A1E17;  -- CH 2 CHECK 13.66.01.1
	LAMP_VECTOR(158) <= LAMP_15A1E20;  -- OP ET ERR 18.14.04.1
	LAMP_VECTOR(157) <= LAMP_15A1E21;  -- RBCI CHECK 13.74.02.1
	LAMP_VECTOR(156) <= LAMP_15A1F11;  -- COMPL B 16.20.10.1
	LAMP_VECTOR(155) <= LAMP_15A1F12;  -- OVERFLOW 16.45.02.1
	LAMP_VECTOR(154) <= LAMP_15A1F14;  -- CH 1 WRITE 15.62.01.1
	LAMP_VECTOR(153) <= LAMP_15A1F15;  -- CH 2 WRITE 15.63.01.1
	LAMP_VECTOR(152) <= LAMP_15A1F16;  -- CH 1 COND 12.62.04.1
	LAMP_VECTOR(151) <= LAMP_15A1F17;  -- CH 2 COND 13.66.01.1
	LAMP_VECTOR(150) <= LAMP_15A1F19;  -- ADDR CH VC 18.14.03.1
	LAMP_VECTOR(149) <= LAMP_15A1F20;  -- MOD SET CK 18.14.05.1
	LAMP_VECTOR(148) <= LAMP_15A1G08;  -- UNITS 16.30.02.1
	LAMP_VECTOR(147) <= LAMP_15A1H08;  -- BODY 16.30.04.1
	LAMP_VECTOR(146) <= LAMP_15A1H12;  -- DIV OFLO 16.45.01.1
	LAMP_VECTOR(145) <= LAMP_15A1H14;  -- CH 1 OVLP 13.60.04.1
	LAMP_VECTOR(144) <= LAMP_15A1H15;  -- CH 2 OVLP 13.64.08.1
	LAMP_VECTOR(143) <= LAMP_15A1H16;  -- CH 1 WLR 13.63.03.1
	LAMP_VECTOR(142) <= LAMP_15A1H17;  -- CH 2 SLR 13.66.06.1
	LAMP_VECTOR(141) <= LAMP_15A1H19;  -- ADDR X VC 18.14.02.1
	LAMP_VECTOR(140) <= LAMP_15A1H20;  -- A CHAR SEL 18.14.01.1
	LAMP_VECTOR(139) <= LAMP_15A1J08;  -- EXTEN 16.30.06.1
	LAMP_VECTOR(138) <= LAMP_15A1K08;  -- MQ 16.30.07.1
	LAMP_VECTOR(137) <= LAMP_15A1K12;  -- ZERO BAL 16.14.12.1
	LAMP_VECTOR(136) <= LAMP_15A1K14;  -- CH1 UNOVLP 13.60.04.1
	LAMP_VECTOR(135) <= LAMP_15A1K15;  -- CH 2 UNVOL 13.64.08.1
	LAMP_VECTOR(134) <= LAMP_15A1K16;  -- NO TRF 13.72.04.1
	LAMP_VECTOR(133) <= LAMP_15A1K17;  -- CH2 NO TRF 13.73.04.1
	LAMP_VECTOR(132) <= LAMP_15A1K20;  -- B CHAR SEL 15.30.10.1
	LAMP_VECTOR(131) <= LAMP_15A1K21;  -- OFF-NORMAL 40.10.03.1
	LAMP_VECTOR(130) <= LAMP_15A1K22;  -- PRIORALERT 19.10.07.1
	LAMP_VECTOR(129) <= not LAMP_15A1K23;  -- 1401 MODE 12.65.10.1 NOTE: This is directly connected to a switch.
	LAMP_VECTOR(128) <= LAMP_15A1K24;  -- STOP 11.10.02.1
	LAMP_VECTOR(127) <= LAMP_15A1V01;  -- A SET ERR 18.14.07.1
	LAMP_VECTOR(126) <= LAMP_15A1W01;  -- CHECK 18.14.11.1
	LAMP_VECTOR(125) <= LAMP_15A1W04;  -- CHECK 18.14.11.1
	LAMP_VECTOR(124) <= not LAMP_15A2K03;  -- PRIO SW ON 19.10.01.1  Priority lamp directly connected to a switch
	LAMP_VECTOR(123) <= not LAMP_15A2K05;  -- PRIO SW ON 19.10.01.1  Priority lamp directly connected to a switch
	LAMP_VECTOR(122 downto 115) <= LAMPS_CYCLE_CE;  -- LAMPS CYCLE CE 
	LAMP_VECTOR(114 downto 107) <= LAMPS_CYCLE_CONSOLE;  -- LAMPS CYCLE CONSOLE 
	LAMP_VECTOR(106 downto 94) <= LAMPS_IRING;  -- LAMPS IRING 
	LAMP_VECTOR(93 downto 84) <= LAMPS_LOGIC_GATE_RING;  -- LAMPS LOGIC GATE RING 
	LAMP_VECTOR(83 downto 79) <= LAMPS_MAR_HP;  -- LAMPS MAR HP 
	LAMP_VECTOR(78 downto 74) <= LAMPS_MAR_THP;  -- LAMPS MAR THP 
	LAMP_VECTOR(73 downto 69) <= LAMPS_MAR_TP;  -- LAMPS MAR TP 
	LAMP_VECTOR(68 downto 64) <= LAMPS_MAR_TTHP;  -- LAMPS MAR TTHP 
	LAMP_VECTOR(63 downto 59) <= LAMPS_MAR_UP;  -- LAMPS MAR UP 
	LAMP_VECTOR(58 downto 51) <= LAMPS_OPMOD_CE;  -- LAMPS OPMOD CE 
	LAMP_VECTOR(50 downto 43) <= LAMPS_OPREG_CE;  -- LAMPS OPREG CE 
	LAMP_VECTOR(42 downto 39) <= LAMPS_SCAN;  -- LAMPS SCAN 
	LAMP_VECTOR(38 downto 31) <= LAMPS_A_CH;  -- LAMPS_A_CH 
	LAMP_VECTOR(30 downto 25) <= LAMPS_ARING;  -- LAMPS_ARING 
	LAMP_VECTOR(24 downto 17) <= LAMPS_ASSM_CH;  -- LAMPS_ASSM_CH 
	LAMP_VECTOR(16 downto 9) <= LAMPS_ASSM_CH_NOT;  -- LAMPS_ASSM_CH_NOT 
	LAMP_VECTOR(8 downto 1) <= LAMPS_B_CH;  -- LAMPS_B_CH 
	LAMP_VECTOR(0) <= '0';

	SWITCH_ALT_PRIORITY_PL1 <= SWITCH_VECTOR(SWITCH_ALT_PRIORITY_PL1_INDEX); -- 19.10.01.1
	SWITCH_ALT_PRIORITY_PL2 <= SWITCH_VECTOR(SWITCH_ALT_PRIORITY_PL2_INDEX); -- 19.10.01.1
	SWITCH_MOM_1ST_TST_SW_PL1 <= SWITCH_VECTOR(SWITCH_MOM_1ST_TST_SW_PL1_INDEX); -- 18.14.10.1
	SWITCH_MOM_2ND_TST_SW_PL1 <= SWITCH_VECTOR(SWITCH_MOM_2ND_TST_SW_PL1_INDEX); -- 18.14.10.1
	SWITCH_MOM_3RD_TST_SW_PL1 <= SWITCH_VECTOR(SWITCH_MOM_3RD_TST_SW_PL1_INDEX); -- 18.14.10.1
	SWITCH_MOM_ADDR_DISP <= SWITCH_VECTOR(SWITCH_MOM_ADDR_DISP_INDEX); -- 14.71.30.1
	SWITCH_MOM_CE_CPR_RST <= SWITCH_VECTOR(SWITCH_MOM_CE_CPR_RST_INDEX); -- 12.65.01.1
	SWITCH_MOM_CE_START <= SWITCH_VECTOR(SWITCH_MOM_CE_START_INDEX); -- 12.15.02.1
	SWITCH_MOM_CE_STOP_SW_PL1 <= SWITCH_VECTOR(SWITCH_MOM_CE_STOP_SW_PL1_INDEX); -- 12.15.03.1
	-- Permanent -- SWITCH_MOM_CO_CPR_RST <= SWITCH_VECTOR(SWITCH_MOM_CO_CPR_RST_INDEX); -- 12.65.01.1
	-- Permanent -- SWITCH_MOM_CONS_START <= SWITCH_VECTOR(SWITCH_MOM_CONS_START_INDEX); -- 12.15.02.1
	-- Permanent -- SWITCH_MOM_CONS_STOP_PL1 <= SWITCH_VECTOR(SWITCH_MOM_CONS_STOP_PL1_INDEX); -- 12.15.03.1
	SWITCH_MOM_IO_CHK_RST_PL1 <= SWITCH_VECTOR(SWITCH_MOM_IO_CHK_RST_PL1_INDEX); -- 13.65.01.1
	SWITCH_MOM_PROG_RESET <= SWITCH_VECTOR(SWITCH_MOM_PROG_RESET_INDEX); -- 12.65.01.1
	SWITCH_MOM_STARTPRINT <= SWITCH_VECTOR(SWITCH_MOM_STARTPRINT_INDEX); -- 44.10.01.1
	-- Permanent -- SWITCH_REL_PWR_ON_RST <= SWITCH_VECTOR(SWITCH_REL_PWR_ON_RST_INDEX); -- 12.65.01.1
	SWITCH_REL_RTC_BUSY <= SWITCH_VECTOR(SWITCH_REL_RTC_BUSY_INDEX); -- 14.15.23.1
	SWITCH_ROT_ADDR_ENTRY_DK1 <= SWITCH_VECTOR(SWITCH_ROT_ADDR_ENTRY_DK1_INDEX + SWITCH_ROT_ADDR_ENTRY_DK1_LEN - 1 downto SWITCH_ROT_ADDR_ENTRY_DK1_INDEX); -- 40.10.03.1
	SWITCH_ROT_ADDR_SEL_DK1 <= SWITCH_VECTOR(SWITCH_ROT_ADDR_SEL_DK1_INDEX + SWITCH_ROT_ADDR_SEL_DK1_LEN - 1 downto SWITCH_ROT_ADDR_SEL_DK1_INDEX); -- 14.71.30.1
	SWITCH_ROT_CHECK_CTRL_DK1 <= SWITCH_VECTOR(SWITCH_ROT_CHECK_CTRL_DK1_INDEX + SWITCH_ROT_CHECK_CTRL_DK1_LEN - 1 downto SWITCH_ROT_CHECK_CTRL_DK1_INDEX); -- 40.10.03.1
	SWITCH_ROT_CYCLE_CTRL_DK1 <= SWITCH_VECTOR(SWITCH_ROT_CYCLE_CTRL_DK1_INDEX + SWITCH_ROT_CYCLE_CTRL_DK1_LEN - 1 downto SWITCH_ROT_CYCLE_CTRL_DK1_INDEX); -- 40.10.03.1
	-- SWITCH_ROT_HRTC_012_CC <= SWITCH_VECTOR(SWITCH_ROT_HRTC_012_CC_INDEX + SWITCH_ROT_HRTC_012_CC_LEN - 1 downto SWITCH_ROT_HRTC_012_CC_INDEX); -- 14.15.20.1
	-- SWITCH_ROT_HRTC_01234_CC <= SWITCH_VECTOR(SWITCH_ROT_HRTC_01234_CC_INDEX + SWITCH_ROT_HRTC_01234_CC_LEN - 1 downto SWITCH_ROT_HRTC_01234_CC_INDEX); -- 14.15.20.1
	-- SWITCH_ROT_HRTC_56789_CC <= SWITCH_VECTOR(SWITCH_ROT_HRTC_56789_CC_INDEX + SWITCH_ROT_HRTC_56789_CC_LEN - 1 downto SWITCH_ROT_HRTC_56789_CC_INDEX); -- 14.15.20.1
	SWITCH_ROT_HUNDS_SYNC_DK1 <= SWITCH_VECTOR(SWITCH_ROT_HUNDS_SYNC_DK1_INDEX + SWITCH_ROT_HUNDS_SYNC_DK1_LEN - 1 downto SWITCH_ROT_HUNDS_SYNC_DK1_INDEX); -- 14.17.19.1
	SWITCH_ROT_I_O_UNIT_DK1 <= SWITCH_VECTOR(SWITCH_ROT_I_O_UNIT_DK1_INDEX + SWITCH_ROT_I_O_UNIT_DK1_LEN - 1 downto SWITCH_ROT_I_O_UNIT_DK1_INDEX); -- 19.10.01.1
	-- SWITCH_ROT_M_RTC_023_CC <= SWITCH_VECTOR(SWITCH_ROT_M_RTC_023_CC_INDEX + SWITCH_ROT_M_RTC_023_CC_LEN - 1 downto SWITCH_ROT_M_RTC_023_CC_INDEX); -- 14.15.20.1
	-- SWITCH_ROT_M_RTC_578_CC <= SWITCH_VECTOR(SWITCH_ROT_M_RTC_578_CC_INDEX + SWITCH_ROT_M_RTC_578_CC_LEN - 1 downto SWITCH_ROT_M_RTC_578_CC_INDEX); -- 14.15.20.1
	-- MOVED LOWER SWITCH_ROT_MODE_SW_DK <= SWITCH_VECTOR(SWITCH_ROT_MODE_SW_DK_INDEX + SWITCH_ROT_MODE_SW_DK_LEN - 1 downto SWITCH_ROT_MODE_SW_DK_INDEX); -- 40.10.01.1
	-- SWITCH_ROT_MRTC_01234_CC <= SWITCH_VECTOR(SWITCH_ROT_MRTC_01234_CC_INDEX + SWITCH_ROT_MRTC_01234_CC_LEN - 1 downto SWITCH_ROT_MRTC_01234_CC_INDEX); -- 14.15.20.1
	-- SWITCH_ROT_MRTC_56789_CC <= SWITCH_VECTOR(SWITCH_ROT_MRTC_56789_CC_INDEX + SWITCH_ROT_MRTC_56789_CC_INDEX - 1 downto SWITCH_ROT_MRTC_56789_CC_INDEX); -- 14.15.20.01
	-- The following switch is inverted.  On page 14.17.18.1 it says "NOTE: SCAN GATE SWITCH IS A CIRCUIT OPENING SWITCH"
	-- This way, with the inversion, the host program doesn't have to fuss with it.
	SWITCH_ROT_SCAN_GATE_DK1 <= not SWITCH_VECTOR(SWITCH_ROT_SCAN_GATE_DK1_INDEX + SWITCH_ROT_SCAN_GATE_DK1_LEN - 1 downto SWITCH_ROT_SCAN_GATE_DK1_INDEX); -- 14.17.18.1
	SWITCH_ROT_STOR_SCAN_DK1 <= SWITCH_VECTOR(SWITCH_ROT_STOR_SCAN_DK1_INDEX + SWITCH_ROT_STOR_SCAN_DK1_LEN - 1 downto SWITCH_ROT_STOR_SCAN_DK1_INDEX); -- 40.10.03.1
	SWITCH_ROT_TENS_SYNC_DK1 <= SWITCH_VECTOR(SWITCH_ROT_TENS_SYNC_DK1_INDEX + SWITCH_ROT_TENS_SYNC_DK1_LEN - 1 downto SWITCH_ROT_TENS_SYNC_DK1_INDEX); -- 14.17.17.1
	SWITCH_ROT_THOUS_SYNC_DK1 <= SWITCH_VECTOR(SWITCH_ROT_THOUS_SYNC_DK1_INDEX + SWITCH_ROT_THOUS_SYNC_DK1_LEN - 1 downto SWITCH_ROT_THOUS_SYNC_DK1_INDEX); -- 14.17.19.1
	SWITCH_ROT_UNITS_SYNC_DK1 <= SWITCH_VECTOR(SWITCH_ROT_UNITS_SYNC_DK1_INDEX + SWITCH_ROT_UNITS_SYNC_DK1_LEN - 1 downto SWITCH_ROT_UNITS_SYNC_DK1_INDEX); -- 14.17.17.1
	-- SWITCH_TOG_1401_MODE_PL1 <= SWITCH_VECTOR(SWITCH_TOG_1401_MODE_PL1_INDEX); -- 12.65.10.1
	SWITCH_TOG_ADDR_STOP_PL1 <= SWITCH_VECTOR(SWITCH_TOG_ADDR_STOP_PL1_INDEX); -- 12.15.04.1
	-- Permanent -- SWITCH_TOG_ASTERISK_PL1 <= SWITCH_VECTOR(SWITCH_TOG_ASTERISK_PL1_INDEX); -- 40.10.03.1
	SWITCH_TOG_ASTERISK_PL2 <= SWITCH_VECTOR(SWITCH_TOG_ASTERISK_PL2_INDEX); -- 15.49.06.1
	-- Permanent -- SWITCH_TOG_AUTO_START_PL1 <= SWITCH_VECTOR(SWITCH_TOG_AUTO_START_PL1_INDEX); -- 40.10.03.1
	SWITCH_TOG_CH_1 <= SWITCH_VECTOR(SWITCH_TOG_CH_1_INDEX); -- 40.10.02.1
	SWITCH_TOG_CH_2 <= SWITCH_VECTOR(SWITCH_TOG_CH_2_INDEX); -- 40.10.02.1
	SWITCH_TOG_INHIBIT_PO_PL1 <= SWITCH_VECTOR(SWITCH_TOG_INHIBIT_PO_PL1_INDEX); -- 40.10.03.1
	SWITCH_TOG_INHIBIT_PO_PL2 <= SWITCH_VECTOR(SWITCH_TOG_INHIBIT_PO_PL2_INDEX); -- 44.10.01.1
	SWITCH_TOG_I_O_CHK_ST_PL1 <= SWITCH_VECTOR(SWITCH_TOG_I_O_CHK_ST_PL1_INDEX); -- 12.15.04.1
	SWITCH_TOG_SENSE_SW_1_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_1_PL1_INDEX); -- 15.60.01.1
	SWITCH_TOG_SENSE_SW_2_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_2_PL1_INDEX); -- 15.60.02.1
	SWITCH_TOG_SENSE_SW_4_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_4_PL1_INDEX); -- 15.60.03.1
	SWITCH_TOG_SENSE_SW_8_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_8_PL1_INDEX); -- 15.60.04.1
	SWITCH_TOG_SENSE_SW_A_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_A_PL1_INDEX); -- 15.60.05.1
	SWITCH_TOG_SENSE_SW_B_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_B_PL1_INDEX); -- 15.60.06.1
	SWITCH_TOG_SENSE_SW_C_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_C_PL1_INDEX); -- 15.60.07.1
	SWITCH_TOG_SENSE_SW_W_PL1 <= SWITCH_VECTOR(SWITCH_TOG_SENSE_SW_W_PL1_INDEX); -- 15.60.08.1
	SWITCH_TOG_WR_INHIBIT_PL1 <= SWITCH_VECTOR(SWITCH_TOG_WR_INHIBIT_PL1_INDEX); -- 40.10.03.1

   notInitSystem <= not initSystem;

   LOCAL_MY_MEM_AR_NOT_TTHP_BUS <= not MY_MEM_AR_TTHP_BUS;
   
   -- RsTx <= w_TX_SERIAL;
   
   
   FPGA_CLK <= CLK;
   
   -- LED(9 downto 0) <= LAMPS_LOGIC_GATE_RING;
   -- LED(4 downto 0) <= MY_MEM_AR_UP_BUS;
   -- LED(4 downto 1) <= IBM1410_MEMORY_LOADER_DEBUG_VECTOR(4 downto 1);
   -- LED(0) <= UART_INPUT_FIFO_WRITE_ENABLES(INPUT_SUBSYSTEM_MEMORY_LOADER_INDEX);
   -- LED(4 downto 0) <= UART_INPUT_CURRENT_STREAM(4 downto 0);
   -- LED(3 downto 0) <= IBM1410_MEMORY_LOADER_DEBUG_VECTOR(4 downto 1);
   -- LED(4) <= '1' when UART_INPUT_CURRENT_STREAM = "00000010" else '0';
   
   -- LED(9) <= btnC;
   -- LED(9) <= SWITCH_MOM_CO_CPR_RST;
   -- LED(9) <= MW_KEYBOARD_LOCK_SOLENOID;
   -- LED(8) <= not btnCpuReset;
   -- LED(8) <= MV_KEYBOARD_LOCK_MODE_STAR_NO;
   -- LED(7) <= initSystem;
   -- LED(7) <= MV_KEYBOARD_UNLOCK_MODE;
   
--   LED(0) <= debugMCReady;
--   LED(1) <= debugMCBusy;
--   LED(2) <= debugMCSelAtLP;
--   LED(3) <= debugMCSelRewind;
--   LED(4) <= debugECHready;
--   led(5) <= debugMCRewindCall;
   
--   LED(6) <= SWITCH_REL_PWR_ON_RST;
   -- LED(5) <= IBM1410_CONSOLE_LOCK_XMT_STROBE;
   
--   LED(3 downto 0) <=
--      "0001" when outputSubsystemTestState = outputSubsystemTestIdle
--      else "0010" when outputSubsystemTestState = outputSubsystemTest1a
--      else "0011" when outputSubsystemTestState = outputSubsystemTest1b
--      else "0100" when outputSubsystemTestState = outputSubsystemTest2a
--      else "0101" when outputSubsystemTestState = outputSubsystemTest2b
--      else "0110" when outputSubsystemTestState = outputSubsystemTest3a
--      else "0111" when outputSubsystemTestState = outputSubsystemTest3b
--      else "1000" when outputSubsystemTestState = outputSubsystemTest3c
--      else "1001" when outputSubsystemTestState = outputSubsystemTest4a
--      else "1010" when outputSubsystemTestState = outputSubsystemTest4b
--      else "1011" when outputSubsystemTestState = outputSubsystemTestButtonWait
--      else "0000";
   
   -- LED(7 downto 0) <= rx_last_byte;
   -- LED(7 downto 0) <= SWITCHES_DEBUG_VECTOR;
   -- LED(7 downto 0) <= SWITCH_VECTOR(15 downto 8);
   -- LED(7 downto 0) <= SWITCH_VECTOR(
   --    to_integer(unsigned(SW(15 downto 8))) downto to_integer(unsigned(SW(15 downto 8))) -7);
   
   LED(15) <= LAMP_15A1K24; -- Stop
   
   -- A channel Validity, B Channel Validity, Assembly Channel Validity
   -- Address Channel validity, Address Exit Channel validity
   
   LED(14) <= LAMP_15A1A19 or LAMP_15A1C19 or LAMP_15A1B19 or 
      LAMP_15A1F19 or LAMP_15A1H19;
   
   -- Register Set checks
   
   LED(13) <= LAMP_15A1V01 or LAMP_15A1C20 or LAMP_15A1E20 or LAMP_15A1F20;
   
   -- Character Select Checks
   
   LED(12) <= LAMP_15A1H20 or LAMP_15A1K20;
   
   LED(11) <= LAMP_15A1W04; -- Instruction Check
   LED(10) <= LAMP_15A1B15; -- Address Check   
   
   -- Signal "copies"

   PV_SENSE_CHAR_0_B2_BUS <= PV_SENSE_CHAR_0_B1_BUS;
   PV_SENSE_CHAR_0_D1_BUS <= PV_SENSE_CHAR_0_B1_BUS;
   PV_SENSE_CHAR_0_D2_BUS <= PV_SENSE_CHAR_0_B1_BUS;

   PV_SENSE_CHAR_1_B2_BUS <= PV_SENSE_CHAR_1_B1_BUS;
   PV_SENSE_CHAR_1_D1_BUS <= PV_SENSE_CHAR_1_B1_BUS;
   PV_SENSE_CHAR_1_D2_BUS <= PV_SENSE_CHAR_1_B1_BUS;

   PV_SENSE_CHAR_2_B2_BUS <= PV_SENSE_CHAR_2_B1_BUS;
   PV_SENSE_CHAR_2_D1_BUS <= PV_SENSE_CHAR_2_B1_BUS;
   PV_SENSE_CHAR_2_D2_BUS <= PV_SENSE_CHAR_2_B1_BUS;

   PV_SENSE_CHAR_3_B2_BUS <= PV_SENSE_CHAR_3_B1_BUS;
   PV_SENSE_CHAR_3_D1_BUS <= PV_SENSE_CHAR_3_B1_BUS;
   PV_SENSE_CHAR_3_D2_BUS <= PV_SENSE_CHAR_3_B1_BUS;
      
   SWITCH_ROT_STOR_SCAN_DK3 <= SWITCH_ROT_STOR_SCAN_DK1;
   SWITCH_ROT_STOR_SCAN_DK4 <= SWITCH_ROT_STOR_SCAN_DK1;
   SWITCH_ROT_STOR_SCAN_DK5 <= SWITCH_ROT_STOR_SCAN_DK1;
   SWITCH_ROT_STOR_SCAN_DK6 <= SWITCH_ROT_STOR_SCAN_DK1(5 downto 0); -- Need to fix switch
   
   SWITCH_ROT_CYCLE_CTRL_DK2 <= SWITCH_ROT_CYCLE_CTRL_DK1(5 downto 0); -- Need to fix switch

   SWITCH_ROT_CHECK_CTRL_DK2 <= SWITCH_ROT_CHECK_CTRL_DK1(5 downto 0);
   
   SWITCH_ROT_ADDR_ENTRY_DK2 <= SWITCH_ROT_ADDR_ENTRY_DK1;
   SWITCH_ROT_ADDR_ENTRY_DK3 <= SWITCH_ROT_ADDR_ENTRY_DK1;
   SWITCH_ROT_ADDR_ENTRY_DKA <= SWITCH_ROT_ADDR_ENTRY_DK1;
   
   SWITCH_ROT_THOUS_SYNC_DK2 <= SWITCH_ROT_THOUS_SYNC_DK1;
   SWITCH_ROT_HUNDS_SYNC_DK2 <= SWITCH_ROT_HUNDS_SYNC_DK1;
   SWITCH_ROT_TENS_SYNC_DK2  <= SWITCH_ROT_TENS_SYNC_DK1;
   SWITCH_ROT_UNITS_SYNC_DK2 <= SWITCH_ROT_UNITS_SYNC_DK1;

   SWITCH_ROT_MODE_SW_DK1 <= SWITCH_ROT_MODE_SW_DK;
   
   -- UART output subsystem
   
   UART_RESET <= SWITCH_REL_PWR_ON_RST or SWITCH_MOM_CO_CPR_RST or SWITCH_MOM_CE_CPR_RST;
   UART_SWITCH_RESET <= SWITCH_REL_PWR_ON_RST or not btnCPUReset;
   
   -- UDP Reset signals
   
   phy_resetn <= '0' when resetState = RESET_COUNTING else '1';
   phy_reset <= not phy_resetn;
   PhyRstn <= phy_resetn;
   UDP_RESET <= phy_reset;
   UDP_RESETn <= not phy_reset;
   mac2rmii_tx_er <= '0';
   PhyClk50Mhz <= phy_ref_clk_50Mhz;
   
   -- UART output - in priority order
   
   UART_OUTPUT_REQUESTER_STROBES(7) <= IBM1410_CONSOLE_XMT_STROBE;
   UART_OUTPUT_REQUESTER_STROBES(6 downto 5) <= "00";  -- TBD (disks?)
   -- UART_OUTPUT_REQUESTER_STROBES(4) <= IBM1410_TAU_XMT_UART_REQUEST;
   -- UART_OUTPUT_REQUESTER_STROBES(3) <= IBM1410_TAU_XMT_UART_REQUEST_F_CH;
   UART_OUTPUT_REQUESTER_STROBES(2) <= '0'; -- TBD (unit record, paper tape, etc.?)
   UART_OUTPUT_REQUESTER_STROBES(1) <= IBM1410_CONSOLE_LOCK_XMT_STROBE;   
   -- UART_OUTPUT_REQUESTER_STROBES(0) <= LAMP_TRANSMITTER_UART_OUTPUT_REQUEST;
   
   UART_OUTPUT_REQUEST_DATA_7 <= IBM1410_CONSOLE_XMT_CHAR;
   UART_OUTPUT_REQUEST_DATA_6 <= "00000000";
   UART_OUTPUT_REQUEST_DATA_5 <= "00000000";
   -- UART_OUTPUT_REQUEST_DATA_4 <= IBM1410_TAU_XMT_UART_DATA;
   -- UART_OUTPUT_REQUEST_DATA_3 <= IBM1410_TAU_XMT_UART_DATA_F_CH;
   UART_OUTPUT_REQUEST_DATA_2 <= "00000000";
   UART_OUTPUT_REQUEST_DATA_1 <= IBM1410_CONSOLE_LOCK_XMT_CHAR;
   UART_OUTPUT_REQUEST_DATA_0 <= LAMP_TRANSMITTER_UART_OUTPUT_DATA;
   
--   LAMP_TRANSMITTER_UART_OUTPUT_GRANT <= UART_OUTPUT_ARBITER_GRANTS(0);
   LAMP_TRANSMITTER_UART_OUTPUT_GRANT <= UDP_OUTPUT_ARBITER_GRANTS(0);
   -- IBM1410_TAU_XMT_UART_GRANT_F_CH <= UART_OUTPUT_ARBITER_GRANTS(3);
   -- IBM1410_TAU_XMT_UART_GRANT <= UART_OUTPUT_ARBITER_GRANTS(4);
   IBM1410_TAU_XMT_UART_GRANT_F_CH <= UDP_OUTPUT_ARBITER_GRANTS(3);
   IBM1410_TAU_XMT_UART_GRANT      <= UDP_OUTPUT_ARBITER_GRANTS(4);
   
   -- r_TX_BYTE <= UART_OUTPUT_TX_DATA;
   -- i_TX_DV <= IBM1410_CONSOLE_XMT_STROBE;
   
   RsTx <= UART_OUTPUT_TX_DATA;

   tx_udp_ip_dest_ip <= udp_remote_ip;
   tx_udp_source_port <= udp_remote_port;
   tx_udp_dest_port <= udp_remote_port;
   tx_udp_ip_source_ip <= udp_local_ip;
   
   UDP_OUTPUT_REQUESTER_STROBES(7) <= '0';
   UDP_OUTPUT_REQUESTER_STROBES(6) <= '0';
   UDP_OUTPUT_REQUESTER_STROBES(5) <= '0';
   UDP_OUTPUT_REQUESTER_STROBES(4) <= IBM1410_TAU_XMT_UART_REQUEST;
   UDP_OUTPUT_REQUESTER_STROBES(3) <= IBM1410_TAU_XMT_UART_REQUEST_F_CH;
   UDP_OUTPUT_REQUESTER_STROBES(2) <= '0'; 
   UDP_OUTPUT_REQUESTER_STROBES(1) <= '0';
   UDP_OUTPUT_REQUESTER_STROBES(0) <= LAMP_TRANSMITTER_UART_OUTPUT_REQUEST;
   
   UDP_OUTPUT_REQUESTER_FLUSHES(7) <= '0';
   UDP_OUTPUT_REQUESTER_FLUSHES(6) <= '0';
   UDP_OUTPUT_REQUESTER_FLUSHES(5) <= '0';
   UDP_OUTPUT_REQUESTER_FLUSHES(4) <= IBM1410_TAU_XMT_UDP_FLUSH;
   UDP_OUTPUT_REQUESTER_FLUSHES(3) <= IBM1410_TAU_XMT_UDP_FLUSH_F_CH;
   UDP_OUTPUT_REQUESTER_FLUSHES(2) <= '0';
   UDP_OUTPUT_REQUESTER_FLUSHES(1) <= '0';
   UDP_OUTPUT_REQUESTER_FLUSHES(0) <= LAMP_TRANSMITTER_REQUESTER_FLUSH;
   
   UDP_OUTPUT_REQUEST_DATA_7 <= "00000000";
   UDP_OUTPUT_REQUEST_DATA_6 <= "00000000";
   UDP_OUTPUT_REQUEST_DATA_5 <= "00000000";
   UDP_OUTPUT_REQUEST_DATA_4 <= IBM1410_TAU_XMT_UART_DATA;
   UDP_OUTPUT_REQUEST_DATA_3 <= IBM1410_TAU_XMT_UART_DATA_F_CH;
   UDP_OUTPUT_REQUEST_DATA_2 <= "00000000";
   UDP_OUTPUT_REQUEST_DATA_1 <= "00000000";
   UDP_OUTPUT_REQUEST_DATA_0 <= LAMP_TRANSMITTER_UART_OUTPUT_DATA;
                    
---- Place your test bench code in the uut_process

--uut_process: process

--   variable testName: string(1 to 18);
--   variable subtest: integer;

--   begin
   
   -- MV_CONS_PRINTER_C2_CAM_NC <= '1';
   -- MV_CONS_PRINTER_C1_CAM_NC <= '1';

   -- MV_CONS_PRINTER_C2_CAM_NO <= not MV_CONS_PRINTER_C2_CAM_NC;
   -- MV_CONS_PRINTER_C1_CAM_NO <= not MV_CONS_PRINTER_C1_CAM_NC;

   -- SWITCH_MOM_STARTPRINT <= '1';  -- This switch is "backwards"   
      
   -- SWITCH_ROT_STOR_SCAN_DK1 <= "0000000001000";  -- Storage Scan Off
   
   -- SWITCH_ROT_CYCLE_CTRL_DK1 <= "0000000000100"; -- Cycle Control Off
   
   -- SWITCH_ROT_CHECK_CTRL_DK1 <= "0000000000100"; -- Check Control Stop Normal
   
   -- Comment out For testing -- to leave switch in designated mode
   
   SWITCH_ROT_MODE_SW_DK <= SWITCH_VECTOR(SWITCH_ROT_MODE_SW_DK_INDEX + SWITCH_ROT_MODE_SW_DK_LEN - 1 downto SWITCH_ROT_MODE_SW_DK_INDEX); -- 40.10.01.1      
  
--   SWITCH_ROT_MODE_SW_DK <= "0000010000000";  -- Run 
--      "0001000000000" when SW(15) = '1' else  -- Display
--      "0100000000000" when SW(14) = '1' else  -- Alter
--      "0010000000000"; -- Stop position
      
   LAMP_SUPPRESSION <= SW(2); 
   
   -- SWITCH_ROT_ADDR_ENTRY_DK1 <= "0000000100000";  -- Address Entry Normal
   
   -- SWITCH_MOM_3RD_TST_S_PL1 <= '1';  -- Temporary for testing

   SWITCH_MOM_CONS_STOP_PL1 <= btnD or SWITCH_VECTOR(SWITCH_MOM_CONS_STOP_PL1_INDEX);
   
   SWITCH_MOM_CO_CPR_RST <= (not btnCpuReset) or SWITCH_VECTOR(SWITCH_MOM_CO_CPR_RST_INDEX);   -- Need to include the indexes now...
   
   SWITCH_MOM_CONS_START <= BUTTON_START_CENTER_DEBOUNCED or SWITCH_VECTOR(SWITCH_MOM_CONS_START_INDEX);
   
   -- SWITCH_TOG_ASTERISK_PL2 <= '1';
   SWITCH_TOG_ASTERISK_PL1 <= NOT SWITCH_TOG_ASTERISK_PL2;  -- PL1 is conneted to OFF NORMAL
   
   -- I did not implement automatic restart (11.40.02.1)
   
   SWITCH_TOG_AUTO_START_PL1 <= '1';  -- This switch is directly connected to OFF NORMAL
   
   -- If one looks carefully at 14.17.18.1, one realizes these two following signals are actually the SAME SIGNAL.
   -- Also, the -S OPTIONAL SYNC COND A/B signals have to be tied down, or they will prevent an address stop
   
   MS_OPTIONAL_SYNC_COND_A <= '0';
   MS_OPTIONAL_SYNC_COND_B <= '0';
   PS_OPTIONAL_SYNC_COND_STAR_CE <= PS_OPTIONAL_SYNC_COND_CE;
   
   -- TESTING Address Stop
   
   -- SWITCH_TOG_ADDR_STOP_PL1  <= '1';
   -- SWITCH_ROT_SCAN_GATE_DK1 <= not "0000000000010";  -- SCAN GATE "OFF" -- position 1
   -- SWITCH_ROT_THOUS_SYNC_DK1 <= "0010000000000";
   -- SWITCH_ROT_HUNDS_SYNC_DK1 <= "0010000000000";
   -- SWITCH_ROT_TENS_SYNC_DK1 <= "0010000000000";
   -- SWITCH_ROT_UNITS_SYNC_DK1 <= "0000000010000";   
   
   SLOW_TYPING <= SW(0);   -- Turn SW0 ON to SLOW the console output to normal selectric speeds.
   
   -- For testing, allow the switch from test bench to set 1401 mode.
   
   SWITCH_TOG_1401_MODE_PL1 <= SWITCH_VECTOR(SWITCH_TOG_1401_MODE_PL1_INDEX) or SW(1); -- 12.65.10.1
   
   RGB1_Green <= rx_udp_hdr_ready;
   RGB2_Green <= rx_match_cond;
   
   rx_match_cond <= '1' when 
      rx_udp_dest_port = udp_remote_port and rx_udp_ip_source_ip = udp_remote_ip and
      rx_udp_ip_dest_ip = udp_local_ip
      else '0';
      
--   Testing logic for simulating a delay in reading UDP input packet data
--   UDP_UART_RX_DATA_READY <= '1' when 
--      rx_delay_counter = 0 else '0';      
   
-- Your test bench code

-- END USER TEST BENCH PROCESS
   

END;
