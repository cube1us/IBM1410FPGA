-- Test Bench VHDL for IBM SMS ALD page 45.50.03.1
-- Title: CONS PRINTER SOL DRIVER STROBE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/1/2020 2:19:50 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_50_03_1_CONS_PRINTER_SOL_DRIVER_STROBE_tb is
end ALD_45_50_03_1_CONS_PRINTER_SOL_DRIVER_STROBE_tb;

architecture behavioral of ALD_45_50_03_1_CONS_PRINTER_SOL_DRIVER_STROBE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_50_03_1_CONS_PRINTER_SOL_DRIVER_STROBE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_CONS_CLOCK_4_POS:	 in STD_LOGIC;
		PS_CONS_PRINTER_SHIFT_COMPLETE:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		PS_PRTR_LOCKED_CND_PROCEED:	 in STD_LOGIC;
		MS_TAKE_CONSOLE_PRINTER_CYCLE:	 in STD_LOGIC;
		PS_CONS_CHAR_CONTROL:	 in STD_LOGIC;
		MS_KEYBOARD_UNLOCK:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		MS_CONS_FN_CONTROL:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS_1:	 in STD_LOGIC;
		MS_CONS_WM_CONTROL:	 in STD_LOGIC;
		MS_CONS_ERROR_CONTROL:	 in STD_LOGIC;
		PS_CND_RES_CONS_PRTR_NOT_BUSY:	 in STD_LOGIC;
		MS_CONSOLE_CHECK_STROBE:	 in STD_LOGIC;
		MS_CONS_BACK_SPACE_CONTROL:	 in STD_LOGIC;
		MS_CONS_PRINTER_END_OF_LINE:	 in STD_LOGIC;
		MS_RESET_CONS_PRTR_NOT_BUSY:	 out STD_LOGIC;
		PS_SOLENOID_DRIVER_STROBE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_4_POS: STD_LOGIC := '0';
	signal PS_CONS_PRINTER_SHIFT_COMPLETE: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';
	signal PS_PRTR_LOCKED_CND_PROCEED: STD_LOGIC := '0';
	signal MS_TAKE_CONSOLE_PRINTER_CYCLE: STD_LOGIC := '1';
	signal PS_CONS_CHAR_CONTROL: STD_LOGIC := '0';
	signal MS_KEYBOARD_UNLOCK: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal MS_CONS_FN_CONTROL: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_3_POS_1: STD_LOGIC := '0';
	signal MS_CONS_WM_CONTROL: STD_LOGIC := '1';
	signal MS_CONS_ERROR_CONTROL: STD_LOGIC := '1';
	signal PS_CND_RES_CONS_PRTR_NOT_BUSY: STD_LOGIC := '0';
	signal MS_CONSOLE_CHECK_STROBE: STD_LOGIC := '1';
	signal MS_CONS_BACK_SPACE_CONTROL: STD_LOGIC := '1';
	signal MS_CONS_PRINTER_END_OF_LINE: STD_LOGIC := '1';

	-- Outputs

	signal MS_RESET_CONS_PRTR_NOT_BUSY: STD_LOGIC;
	signal PS_SOLENOID_DRIVER_STROBE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_50_03_1_CONS_PRINTER_SOL_DRIVER_STROBE port map(
		FPGA_CLK => FPGA_CLK,
		PS_CONS_CLOCK_4_POS => PS_CONS_CLOCK_4_POS,
		PS_CONS_PRINTER_SHIFT_COMPLETE => PS_CONS_PRINTER_SHIFT_COMPLETE,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		PS_PRTR_LOCKED_CND_PROCEED => PS_PRTR_LOCKED_CND_PROCEED,
		MS_TAKE_CONSOLE_PRINTER_CYCLE => MS_TAKE_CONSOLE_PRINTER_CYCLE,
		PS_CONS_CHAR_CONTROL => PS_CONS_CHAR_CONTROL,
		MS_KEYBOARD_UNLOCK => MS_KEYBOARD_UNLOCK,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		MS_CONS_FN_CONTROL => MS_CONS_FN_CONTROL,
		PS_CONS_CLOCK_3_POS_1 => PS_CONS_CLOCK_3_POS_1,
		MS_CONS_WM_CONTROL => MS_CONS_WM_CONTROL,
		MS_CONS_ERROR_CONTROL => MS_CONS_ERROR_CONTROL,
		PS_CND_RES_CONS_PRTR_NOT_BUSY => PS_CND_RES_CONS_PRTR_NOT_BUSY,
		MS_CONSOLE_CHECK_STROBE => MS_CONSOLE_CHECK_STROBE,
		MS_CONS_BACK_SPACE_CONTROL => MS_CONS_BACK_SPACE_CONTROL,
		MS_CONS_PRINTER_END_OF_LINE => MS_CONS_PRINTER_END_OF_LINE,
		MS_RESET_CONS_PRTR_NOT_BUSY => MS_RESET_CONS_PRTR_NOT_BUSY,
		PS_SOLENOID_DRIVER_STROBE => PS_SOLENOID_DRIVER_STROBE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "45.50.03.1        ";

   for tt in 0 to 2**13 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      b := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      j := tv(6);
      l := tv(7);
      m := tv(8);
      n := tv(9);
      o := tv(10);
      p := tv(11);
      q := tv(12);      
      
      g1 := not g and f and d;
      g2 := g1 or q or j or l or m or p or e;
      g3 := n and g2;
      
      wait for 30 ns;
      
      -- Reset
      
      MS_CONSOLE_CHECK_STROBE <= '1';
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_4 <= '1';
      PS_CONS_CLOCK_4_POS <= '1'; -- So we can see latch output
      wait for 30 ns;
      
      check1(MS_RESET_CONS_PRTR_NOT_BUSY,'1',testName,"Init Reset Cons Prtr not Busy");
      check1(PS_SOLENOID_DRIVER_STROBE,'0',testName,"Init Solenoid Drive Strobe");
      
      -- Prepare to perhaps set type start latch
      
		PS_CONS_PRINTER_SHIFT_COMPLETE <= b;
      PS_PRTR_LOCKED_CND_PROCEED <= d;
      MS_TAKE_CONSOLE_PRINTER_CYCLE <= not e;
      PS_CONS_CHAR_CONTROL <= f;
      MS_KEYBOARD_UNLOCK <= not g;
      MS_CONS_FN_CONTROL <= not j;
      MS_CONS_WM_CONTROL <= not l;
      MS_CONS_ERROR_CONTROL <= not m;
      PS_CND_RES_CONS_PRTR_NOT_BUSY <= n;
      MS_CONS_BACK_SPACE_CONTROL <= not p;
      MS_CONS_PRINTER_END_OF_LINE <= not q;
      wait for 30 ns;

      check1(MS_RESET_CONS_PRTR_NOT_BUSY,'1',testName,"Before CC3 Cons Prtr not Busy");
      check1(PS_SOLENOID_DRIVER_STROBE,'0',testName,"Before CC3 Solenoid Drive Strobe");
      
      -- Run CC3 to maybe set the type start latch

      PS_CONS_CLOCK_3_POS_1 <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_3_POS_1 <= '0';
      wait for 30 ns;
      
      check1(MS_RESET_CONS_PRTR_NOT_BUSY,not g3,testName,"Set Cons Prtr not Busy");
      check1(PS_SOLENOID_DRIVER_STROBE,'0',testName,"Do not yet set Solenoid Drive Strobe");
      
      -- Remove the latch inputs, and leave CC4 set - latch should not change
      
      PS_PRTR_LOCKED_CND_PROCEED <= '0';
      MS_TAKE_CONSOLE_PRINTER_CYCLE <= '1';
      PS_CONS_CHAR_CONTROL <= '0';
      MS_KEYBOARD_UNLOCK <= '1';
      MS_CONS_FN_CONTROL <= '1';
      MS_CONS_WM_CONTROL <= '1';
      MS_CONS_ERROR_CONTROL <= '1';
      PS_CND_RES_CONS_PRTR_NOT_BUSY <= '0';
      MS_CONS_BACK_SPACE_CONTROL <= '1';
      MS_CONS_PRINTER_END_OF_LINE <= '1';
      wait for 30 ns;         

      check1(MS_RESET_CONS_PRTR_NOT_BUSY,not g3,testName,"Check Set Cons Prtr not Busy");
      check1(PS_SOLENOID_DRIVER_STROBE,'0',testName,"Check Do not yet set Solenoid Drive Strobe");
      
      -- Drop CC4 - the reset cons prtr not busy should go false
      
      PS_CONS_CLOCK_4_POS <= '0';
      wait for 30 ns;

      check1(MS_RESET_CONS_PRTR_NOT_BUSY,'1',testName,"Check 2 Set Cons Prtr not Busy");

      -- Maybe set the solenoid driver strobe at CC1
      
      PS_CONS_CLOCK_1_POS <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_1_POS <= '0';
      wait for 30 ns;
      
      check1(PS_SOLENOID_DRIVER_STROBE,g3 and b,testName,"Set Solenoid Drive Strobe");
      
      -- Re-enable CC4 so we can see both latches
      
      PS_CONS_CLOCK_4_POS <= '1';

      -- Maybe reset them

		MS_CONSOLE_CHECK_STROBE <= not o;
      wait for 30 ns;      
      
      check1(MS_RESET_CONS_PRTR_NOT_BUSY,not(g3 and not o),testName,"Reset Cons Prtr not Busy");
      check1(PS_SOLENOID_DRIVER_STROBE,g3 and b and not o,testName,"Set Solenoid Drive Strobe");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
