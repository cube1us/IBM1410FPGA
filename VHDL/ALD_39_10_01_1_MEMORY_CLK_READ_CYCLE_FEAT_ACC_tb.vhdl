-- Test Bench VHDL for IBM SMS ALD page 39.10.01.1
-- Title: MEMORY CLK READ CYCLE FEAT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/20/2020 9:46:14 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_39_10_01_1_MEMORY_CLK_READ_CYCLE_FEAT_ACC_tb is
end ALD_39_10_01_1_MEMORY_CLK_READ_CYCLE_FEAT_ACC_tb;

architecture behavioral of ALD_39_10_01_1_MEMORY_CLK_READ_CYCLE_FEAT_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_39_10_01_1_MEMORY_CLK_READ_CYCLE_FEAT_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_START_MEM_CLOCK_M:	 in STD_LOGIC;
		MY_READ_CALL_M:	 in STD_LOGIC;
		MS_COMPUTER_RESET_2:	 in STD_LOGIC;
		MY_MEM_AR_TTHP4B:	 in STD_LOGIC;
		PY_B_DATA_REG_RESET_1:	 out STD_LOGIC;
		MY_B_DATA_REG_RESET:	 out STD_LOGIC;
		PY_B_DATA_REG_RESET_2:	 out STD_LOGIC;
		PY_B_DATA_REG_RESET_3:	 out STD_LOGIC;
		PY_START_READ:	 out STD_LOGIC;
		MY_Y_RD_1:	 out STD_LOGIC;
		PY_B_DATA_REG_RESET_4:	 out STD_LOGIC;
		MY_Y_RD_2:	 out STD_LOGIC;
		MY_X_RD_1:	 out STD_LOGIC;
		MY_X_RD_2:	 out STD_LOGIC;
		MY_X_RD_CND_CLK:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MY_START_MEM_CLOCK_M: STD_LOGIC := '1';
	signal MY_READ_CALL_M: STD_LOGIC := '1';
	signal MS_COMPUTER_RESET_2: STD_LOGIC := '1';
	signal MY_MEM_AR_TTHP4B: STD_LOGIC := '1';

	-- Outputs

	signal PY_B_DATA_REG_RESET_1: STD_LOGIC;
	signal MY_B_DATA_REG_RESET: STD_LOGIC;
	signal PY_B_DATA_REG_RESET_2: STD_LOGIC;
	signal PY_B_DATA_REG_RESET_3: STD_LOGIC;
	signal PY_START_READ: STD_LOGIC;
	signal MY_Y_RD_1: STD_LOGIC;
	signal PY_B_DATA_REG_RESET_4: STD_LOGIC;
	signal MY_Y_RD_2: STD_LOGIC;
	signal MY_X_RD_1: STD_LOGIC;
	signal MY_X_RD_2: STD_LOGIC;
	signal MY_X_RD_CND_CLK: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_39_10_01_1_MEMORY_CLK_READ_CYCLE_FEAT_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MY_START_MEM_CLOCK_M => MY_START_MEM_CLOCK_M,
		MY_READ_CALL_M => MY_READ_CALL_M,
		MS_COMPUTER_RESET_2 => MS_COMPUTER_RESET_2,
		MY_MEM_AR_TTHP4B => MY_MEM_AR_TTHP4B,
		PY_B_DATA_REG_RESET_1 => PY_B_DATA_REG_RESET_1,
		MY_B_DATA_REG_RESET => MY_B_DATA_REG_RESET,
		PY_B_DATA_REG_RESET_2 => PY_B_DATA_REG_RESET_2,
		PY_B_DATA_REG_RESET_3 => PY_B_DATA_REG_RESET_3,
		PY_START_READ => PY_START_READ,
		MY_Y_RD_1 => MY_Y_RD_1,
		PY_B_DATA_REG_RESET_4 => PY_B_DATA_REG_RESET_4,
		MY_Y_RD_2 => MY_Y_RD_2,
		MY_X_RD_1 => MY_X_RD_1,
		MY_X_RD_2 => MY_X_RD_2,
		MY_X_RD_CND_CLK => MY_X_RD_CND_CLK);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "39.10.01.1        ";
   
   for tt in 0 to 2**3 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);

      -- Reset
      
      MS_COMPUTER_RESET_2 <= '0';
      wait for 30 ns;
      MS_COMPUTER_RESET_2 <= '1';
      wait for 30 ns;

      check1(PY_START_READ,'0',testName,"Start Read Loop Reset");
      check1(PY_B_DATA_REG_RESET_1,'0',testName,"Loop Reset B Data Reg Reset 1");
      check1(PY_B_DATA_REG_RESET_2,'0',testName,"Loop Reset B Data Reg Reset 2");
      check1(PY_B_DATA_REG_RESET_3,'0',testName,"Loop Reset B Data Reg Reset 3");
      check1(PY_B_DATA_REG_RESET_4,'0',testName,"Loop Reset B Data Reg Reset 4");
      check1(MY_B_DATA_REG_RESET,'1',testName,"Loop Reset -Y B Data Reg Reset");
      check1(MY_Y_RD_1,'1',testName,"Loop Reset Y Read 1");
      check1(MY_Y_RD_2,'1',testName,"Loop Reset Y Read 2");
      check1(MY_X_RD_1,'1',testName,"Loop Reset X RD 1");
      check1(MY_X_RD_2,'1',testName,"Loop Reset X RD 2");
      check1(MY_X_RD_CND_CLK,'1',testName,"Loop Reset X RD 2");


      MY_START_MEM_CLOCK_M <= not a;
      MY_READ_CALL_M <= not b;
      MY_MEM_AR_TTHP4B <= not c;
      wait for 90 ns; -- Trigger delay
      MY_START_MEM_CLOCK_M <= '1';
      MY_READ_CALL_M <= '1';        -- Reset for next iteration
      
      
      check1(PY_START_READ,a and b,testName,"Start Read");
      check1(PY_B_DATA_REG_RESET_1,a and b,testName,"Start B Data Reg Reset 1");
      check1(PY_B_DATA_REG_RESET_2,a and b,testName,"Start B Data Reg Reset 2");
      check1(PY_B_DATA_REG_RESET_3,a and b,testName,"Start B Data Reg Reset 3");
      check1(PY_B_DATA_REG_RESET_4,a and b,testName,"Start B Data Reg Reset 4");
      check1(MY_B_DATA_REG_RESET,not(a and b),testName,"Start -Y B Data Reg Reset");
      
      if(not(a = '1' and b = '1')) then
         next; -- If we didn't start the process, no point in continuing this iteration
      end if;
      
      wait for 425 ns;  -- First Delay
      wait for 90 ns;   -- Trigger time
      
      -- The B data register reset should be withdrawn by now

      check1(PY_B_DATA_REG_RESET_1,'0',testName,"B Data Reg Reset Done 1");
      check1(PY_B_DATA_REG_RESET_2,'0',testName,"B Data Reg Reset Done 2");
      check1(PY_B_DATA_REG_RESET_3,'0',testName,"B Data Reg Reset Done 3");
      check1(PY_B_DATA_REG_RESET_4,'0',testName,"B Data Reg Reset Done 4");
      check1(MY_B_DATA_REG_RESET,'1',testName,"-Y B Data Reg Reset Done");

      -- TTHP4B supresses the generation of X and Y Read pulses if the address is >= 40,000)
      -- (Also, that would immediately reset the second trigger, so Y Rd wouldn't actually come active)
      
      -- At this point, Y Read should be active unless TTHP4B is on
      
      check1(MY_Y_RD_1,not(not c),testName,"Y Read 1");
      check1(MY_Y_RD_2,not(not c),testName,"Y Read 2");
      
      wait for 280 ns;  -- Second delay
      wait for 90 ns;   -- Trigger time      
      
      check1(MY_X_RD_1,not(not c),testName,"X RD 1");
      check1(MY_X_RD_2,not(not c),testName,"X RD 2");
      check1(MY_X_RD_CND_CLK,not(not c),testName,"X RD 2");
                  
      -- Keep X and Y active (if they were ever active) for 1100ns, then reset
      
      wait for 1100 ns;  -- Final delay
      wait for 90 ns;    -- Trigger Delay 
      
      check1(MY_Y_RD_1,'1',testName,"Finish Y Read 1");
      check1(MY_Y_RD_2,'1',testName,"Finish Y Read 2");
      check1(MY_X_RD_1,'1',testName,"Finish X RD 1");
      check1(MY_X_RD_2,'1',testName,"Finish X RD 2");
      check1(MY_X_RD_CND_CLK,'1',testName,"Finish X RD 2");
                                                      
      wait for 30 ns;
            
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
