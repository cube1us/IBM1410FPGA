-- VHDL for IBM SMS ALD page 39.50.40.1
-- Title: ASSEMBLY CH POWERING TO 2ND MEM
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/22/2020 8:00:25 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_39_50_40_1_ASSEMBLY_CH_POWERING_TO_2ND_MEM is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_ASSEMBLY_CH_1_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_2_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_4_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_8_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_A_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_B_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_C_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_WM_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_1_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_2_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_4_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_8_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_A_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_B_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_C_BIT_Z:	 out STD_LOGIC;
		MY_ASSEMBLY_CH_WM_BIT_Z:	 out STD_LOGIC);
end ALD_39_50_40_1_ASSEMBLY_CH_POWERING_TO_2ND_MEM;

architecture behavioral of ALD_39_50_40_1_ASSEMBLY_CH_POWERING_TO_2ND_MEM is 

	signal OUT_4A_G: STD_LOGIC;
	signal OUT_3A_A: STD_LOGIC;
	signal OUT_4B_C: STD_LOGIC;
	signal OUT_3B_D: STD_LOGIC;
	signal OUT_4C_F: STD_LOGIC;
	signal OUT_3C_P: STD_LOGIC;
	signal OUT_4D_R: STD_LOGIC;
	signal OUT_3D_A: STD_LOGIC;
	signal OUT_4E_G: STD_LOGIC;
	signal OUT_3E_D: STD_LOGIC;
	signal OUT_4F_C: STD_LOGIC;
	signal OUT_3F_P: STD_LOGIC;
	signal OUT_4G_F: STD_LOGIC;
	signal OUT_3G_A: STD_LOGIC;
	signal OUT_4H_R: STD_LOGIC;
	signal OUT_3H_D: STD_LOGIC;

begin

	OUT_4A_G <= NOT(MY_ASSEMBLY_CH_1_BIT );
	OUT_3A_A <= NOT OUT_4A_G;
	OUT_4B_C <= NOT(MY_ASSEMBLY_CH_2_BIT );
	OUT_3B_D <= NOT OUT_4B_C;
	OUT_4C_F <= NOT(MY_ASSEMBLY_CH_4_BIT );
	OUT_3C_P <= NOT OUT_4C_F;
	OUT_4D_R <= NOT(MY_ASSEMBLY_CH_8_BIT );
	OUT_3D_A <= NOT OUT_4D_R;
	OUT_4E_G <= NOT(MY_ASSEMBLY_CH_A_BIT );
	OUT_3E_D <= NOT OUT_4E_G;
	OUT_4F_C <= NOT(MY_ASSEMBLY_CH_B_BIT );
	OUT_3F_P <= NOT OUT_4F_C;
	OUT_4G_F <= NOT(MY_ASSEMBLY_CH_C_BIT );
	OUT_3G_A <= NOT OUT_4G_F;
	OUT_4H_R <= NOT(MY_ASSEMBLY_CH_WM_BIT );
	OUT_3H_D <= NOT OUT_4H_R;

	MY_ASSEMBLY_CH_1_BIT_Z <= OUT_3A_A;
	MY_ASSEMBLY_CH_2_BIT_Z <= OUT_3B_D;
	MY_ASSEMBLY_CH_4_BIT_Z <= OUT_3C_P;
	MY_ASSEMBLY_CH_8_BIT_Z <= OUT_3D_A;
	MY_ASSEMBLY_CH_A_BIT_Z <= OUT_3E_D;
	MY_ASSEMBLY_CH_B_BIT_Z <= OUT_3F_P;
	MY_ASSEMBLY_CH_C_BIT_Z <= OUT_3G_A;
	MY_ASSEMBLY_CH_WM_BIT_Z <= OUT_3H_D;


end;
