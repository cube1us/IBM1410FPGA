-- Test Bench VHDL for IBM SMS ALD page 19.10.08.1
-- Title: 1* INTERRUPT CONDITION LATCHES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/15/2020 10:54:22 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_19_10_08_1_1_INTERRUPT_CONDITION_LATCHES_tb is
end ALD_19_10_08_1_1_INTERRUPT_CONDITION_LATCHES_tb;

architecture behavioral of ALD_19_10_08_1_1_INTERRUPT_CONDITION_LATCHES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_19_10_08_1_1_INTERRUPT_CONDITION_LATCHES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_E_CH_IN_PROCESS:	 in STD_LOGIC;
		MS_I_OP_DOT_I_CYCLE_DOT_C:	 in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_E_CH_1405:	 in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_E_CH_1301:	 in STD_LOGIC;
		MS_PROGRAM_RESET_6:	 in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_F_CH_1301:	 in STD_LOGIC;
		MC_ANY_SEEK_COMP_STAR_F_CH_1405:	 in STD_LOGIC;
		MS_F_CH_IN_PROCESS:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		PS_I_CYCLE_1:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR:	 in STD_LOGIC;
		MS_E_CH_SEEK_INTR_COND:	 out STD_LOGIC;
		PS_E_CH_SEEK_INTR_COND:	 out STD_LOGIC;
		MS_F_CH_SEEK_INTR_COND:	 out STD_LOGIC;
		PS_F_CH_SEEK_INTR_COND:	 out STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal MS_I_OP_DOT_I_CYCLE_DOT_C: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_E_CH_1405: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_E_CH_1301: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_6: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_F_CH_1301: STD_LOGIC := '1';
	signal MC_ANY_SEEK_COMP_STAR_F_CH_1405: STD_LOGIC := '1';
	signal MS_F_CH_IN_PROCESS: STD_LOGIC := '1';
	signal PS_I_RING_OP_TIME: STD_LOGIC := '0';
	signal PS_I_CYCLE_1: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR: STD_LOGIC := '0';

	-- Outputs

	signal MS_E_CH_SEEK_INTR_COND: STD_LOGIC;
	signal PS_E_CH_SEEK_INTR_COND: STD_LOGIC;
	signal MS_F_CH_SEEK_INTR_COND: STD_LOGIC;
	signal PS_F_CH_SEEK_INTR_COND: STD_LOGIC;
	signal PS_I_OP_DOT_I_CYCLE_DOT_E: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_19_10_08_1_1_INTERRUPT_CONDITION_LATCHES port map(
		FPGA_CLK => FPGA_CLK,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		MS_I_OP_DOT_I_CYCLE_DOT_C => MS_I_OP_DOT_I_CYCLE_DOT_C,
		MC_ANY_SEEK_COMP_STAR_E_CH_1405 => MC_ANY_SEEK_COMP_STAR_E_CH_1405,
		MC_ANY_SEEK_COMP_STAR_E_CH_1301 => MC_ANY_SEEK_COMP_STAR_E_CH_1301,
		MS_PROGRAM_RESET_6 => MS_PROGRAM_RESET_6,
		MC_ANY_SEEK_COMP_STAR_F_CH_1301 => MC_ANY_SEEK_COMP_STAR_F_CH_1301,
		MC_ANY_SEEK_COMP_STAR_F_CH_1405 => MC_ANY_SEEK_COMP_STAR_F_CH_1405,
		MS_F_CH_IN_PROCESS => MS_F_CH_IN_PROCESS,
		PS_I_RING_OP_TIME => PS_I_RING_OP_TIME,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR => PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR,
		MS_E_CH_SEEK_INTR_COND => MS_E_CH_SEEK_INTR_COND,
		PS_E_CH_SEEK_INTR_COND => PS_E_CH_SEEK_INTR_COND,
		MS_F_CH_SEEK_INTR_COND => MS_F_CH_SEEK_INTR_COND,
		PS_F_CH_SEEK_INTR_COND => PS_F_CH_SEEK_INTR_COND,
		PS_I_OP_DOT_I_CYCLE_DOT_E => PS_I_OP_DOT_I_CYCLE_DOT_E);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "19.10.08.1        ";

   for tt in 0 to 2**11 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      l := tv(9);
      m := tv(10);
      
      g1 := (j and k and l) or m; 
      
      -- Reset the latches
      
      MS_PROGRAM_RESET_6 <= '0';      
      wait for 30 ns;
      MS_PROGRAM_RESET_6 <= '1';
      MS_E_CH_IN_PROCESS <= '1'; -- So we can verify reset
      MS_F_CH_IN_PROCESS <= '1'; -- So we can verify reset
      wait for 30 ns;

      check1(PS_E_CH_SEEK_INTR_COND,'0',testName,"+S E Ch Intr Loop Reset");
      check1(MS_E_CH_SEEK_INTR_COND,'1',testName,"+S E Ch Intr Loop Reset");
      check1(PS_F_CH_SEEK_INTR_COND,'0',testName,"+S F Ch Intr Loop Reset");
      check1(MS_F_CH_SEEK_INTR_COND,'1',testName,"+S F Ch Intr Loop Reset");
      
      -- Set the signals, making sure that the latches are not forced to reset yet

		MS_E_CH_IN_PROCESS <= not a;
		MS_I_OP_DOT_I_CYCLE_DOT_C <= '1'; -- not b
		MC_ANY_SEEK_COMP_STAR_E_CH_1405 <= not c;
		MC_ANY_SEEK_COMP_STAR_E_CH_1301 <= not d;
		MC_ANY_SEEK_COMP_STAR_F_CH_1301 <= not f;
		MC_ANY_SEEK_COMP_STAR_F_CH_1405 <= not g;
		MS_F_CH_IN_PROCESS <= not h;
		PS_I_RING_OP_TIME <= j;
		PS_I_CYCLE_1 <= k;
		PS_LOGIC_GATE_E_1 <= l ;
		PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR <= m;      
      wait for 30 ns; -- Maybe set the latches

      check1(PS_I_OP_DOT_I_CYCLE_DOT_E,g1,testName,"I Op . I Cycle . E");
      
      -- Reset the set signals.  Latch should not change.  
      -- This also sets us up for the reset test later by preventing conflicts.
      
      MS_I_OP_DOT_I_CYCLE_DOT_C <= '1';
      MC_ANY_SEEK_COMP_STAR_E_CH_1405 <= '1';
      MC_ANY_SEEK_COMP_STAR_E_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1405 <= '1';
      PS_I_RING_OP_TIME <= '0';
      PS_I_CYCLE_1 <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR <= '0';      
            
      check1(PS_E_CH_SEEK_INTR_COND,g1 and (c or d) and not a,testName,"+S E Ch Intr Set");
      check1(MS_E_CH_SEEK_INTR_COND,NOT PS_E_CH_SEEK_INTR_COND,testName,"+S E Ch Intr Set");
      check1(PS_F_CH_SEEK_INTR_COND,g1 and (f or g) and not h,testName,"+S F Ch Intr Set");
      check1(MS_F_CH_SEEK_INTR_COND,NOT PS_F_CH_SEEK_INTR_COND,testName,"+S F Ch Intr Set");
      
      -- Reset Test
      
      -- Set the signals again, making sure that the latches are not forced to be still set

      MS_E_CH_IN_PROCESS <= not a;
      MS_I_OP_DOT_I_CYCLE_DOT_C <= not b;
      MC_ANY_SEEK_COMP_STAR_E_CH_1405 <= '1';
      MC_ANY_SEEK_COMP_STAR_E_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1405 <= '1';
      MS_F_CH_IN_PROCESS <= not h;
      PS_I_RING_OP_TIME <= j;
      PS_I_CYCLE_1 <= k;
      PS_LOGIC_GATE_E_1 <= l ;
      PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR <= m;      
      wait for 30 ns; -- Maybe reset the latches
      
      -- Set the signals back in anticipation of the next iteration.  Should not affect the latches

		MS_E_CH_IN_PROCESS <= not a; -- Leave as part of test
      MS_I_OP_DOT_I_CYCLE_DOT_C <= '1';
      MC_ANY_SEEK_COMP_STAR_E_CH_1405 <= '1';
      MC_ANY_SEEK_COMP_STAR_E_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1301 <= '1';
      MC_ANY_SEEK_COMP_STAR_F_CH_1405 <= '1';
      MS_F_CH_IN_PROCESS <= not h; -- Leave as part of test
      PS_I_RING_OP_TIME <= '0';
      PS_I_CYCLE_1 <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_I_OP_DOT_I_CYCLE_DOT_E_STAR_AUTS_STAR <= '0';      
      wait for 30 ns;      
      
      check1(PS_E_CH_SEEK_INTR_COND,g1 and (c or d) and not a and not b,testName,"+S E Ch Intr Reset");
      check1(MS_E_CH_SEEK_INTR_COND,NOT PS_E_CH_SEEK_INTR_COND,testName,"+S E Ch Intr Reset");
      check1(PS_F_CH_SEEK_INTR_COND,g1 and (f or g) and not h and not b,testName,"+S F Ch Intr Reset");
      check1(MS_F_CH_SEEK_INTR_COND,NOT PS_F_CH_SEEK_INTR_COND,testName,"+S F Ch Intr Reset");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
