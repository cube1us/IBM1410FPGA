-- Test Bench VHDL for IBM SMS ALD page 14.71.51.1
-- Title: MEM WR CALL AND CLOCK STT FEATURE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/8/2020 1:34:02 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_71_51_1_MEM_WR_CALL_AND_CLOCK_STT_FEATURE_tb is
end ALD_14_71_51_1_MEM_WR_CALL_AND_CLOCK_STT_FEATURE_tb;

architecture behavioral of ALD_14_71_51_1_MEM_WR_CALL_AND_CLOCK_STT_FEATURE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_71_51_1_MEM_WR_CALL_AND_CLOCK_STT_FEATURE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_3_JRJ:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_2:	 in STD_LOGIC;
		PS_STOP_AT_G_STAR_ARITH:	 in STD_LOGIC;
		PS_LOGIC_GATE_D_1:	 in STD_LOGIC;
		PS_STOP_AT_F:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_1:	 in STD_LOGIC;
		PS_STOP_AT_H:	 in STD_LOGIC;
		PS_LOGIC_GATE_G:	 in STD_LOGIC;
		PS_STOP_AT_J:	 in STD_LOGIC;
		PS_LOGIC_GATE_H:	 in STD_LOGIC;
		PS_STOP_AT_K:	 in STD_LOGIC;
		PS_OUTPUT_CYCLE:	 in STD_LOGIC;
		PS_LOGIC_GATE_U:	 in STD_LOGIC;
		PS_INPUT_CYCLE:	 in STD_LOGIC;
		MS_STOP_AT_G_DOT_LOGIC_GATE_E:	 out STD_LOGIC;
		MY_START_MEM_CLOCK:	 out STD_LOGIC;
		MS_STOP_AT_F_DOT_LOGIC_GATE_D:	 out STD_LOGIC;
		MS_STOP_AT_H_DOT_LOGIC_GATE_F:	 out STD_LOGIC;
		MS_STOP_AT_J_DOT_LOGIC_GATE_G:	 out STD_LOGIC;
		MY_WRITE_CALL:	 out STD_LOGIC;
		MS_STOP_AT_K_DOT_LOGIC_GATE_H:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_2ND_CLOCK_PULSE_3_JRJ: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_2: STD_LOGIC := '0';
	signal PS_STOP_AT_G_STAR_ARITH: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_D_1: STD_LOGIC := '0';
	signal PS_STOP_AT_F: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_F_1: STD_LOGIC := '0';
	signal PS_STOP_AT_H: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_G: STD_LOGIC := '0';
	signal PS_STOP_AT_J: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_H: STD_LOGIC := '0';
	signal PS_STOP_AT_K: STD_LOGIC := '0';
	signal PS_OUTPUT_CYCLE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_U: STD_LOGIC := '0';
	signal PS_INPUT_CYCLE: STD_LOGIC := '0';

	-- Outputs

	signal MS_STOP_AT_G_DOT_LOGIC_GATE_E: STD_LOGIC;
	signal MY_START_MEM_CLOCK: STD_LOGIC;
	signal MS_STOP_AT_F_DOT_LOGIC_GATE_D: STD_LOGIC;
	signal MS_STOP_AT_H_DOT_LOGIC_GATE_F: STD_LOGIC;
	signal MS_STOP_AT_J_DOT_LOGIC_GATE_G: STD_LOGIC;
	signal MY_WRITE_CALL: STD_LOGIC;
	signal MS_STOP_AT_K_DOT_LOGIC_GATE_H: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_71_51_1_MEM_WR_CALL_AND_CLOCK_STT_FEATURE port map(
		FPGA_CLK => FPGA_CLK,
		PS_2ND_CLOCK_PULSE_3_JRJ => PS_2ND_CLOCK_PULSE_3_JRJ,
		PS_LOGIC_GATE_E_2 => PS_LOGIC_GATE_E_2,
		PS_STOP_AT_G_STAR_ARITH => PS_STOP_AT_G_STAR_ARITH,
		PS_LOGIC_GATE_D_1 => PS_LOGIC_GATE_D_1,
		PS_STOP_AT_F => PS_STOP_AT_F,
		PS_LOGIC_GATE_F_1 => PS_LOGIC_GATE_F_1,
		PS_STOP_AT_H => PS_STOP_AT_H,
		PS_LOGIC_GATE_G => PS_LOGIC_GATE_G,
		PS_STOP_AT_J => PS_STOP_AT_J,
		PS_LOGIC_GATE_H => PS_LOGIC_GATE_H,
		PS_STOP_AT_K => PS_STOP_AT_K,
		PS_OUTPUT_CYCLE => PS_OUTPUT_CYCLE,
		PS_LOGIC_GATE_U => PS_LOGIC_GATE_U,
		PS_INPUT_CYCLE => PS_INPUT_CYCLE,
		MS_STOP_AT_G_DOT_LOGIC_GATE_E => MS_STOP_AT_G_DOT_LOGIC_GATE_E,
		MY_START_MEM_CLOCK => MY_START_MEM_CLOCK,
		MS_STOP_AT_F_DOT_LOGIC_GATE_D => MS_STOP_AT_F_DOT_LOGIC_GATE_D,
		MS_STOP_AT_H_DOT_LOGIC_GATE_F => MS_STOP_AT_H_DOT_LOGIC_GATE_F,
		MS_STOP_AT_J_DOT_LOGIC_GATE_G => MS_STOP_AT_J_DOT_LOGIC_GATE_G,
		MY_WRITE_CALL => MY_WRITE_CALL,
		MS_STOP_AT_K_DOT_LOGIC_GATE_H => MS_STOP_AT_K_DOT_LOGIC_GATE_H);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(15 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p: std_logic;
   variable g1, g2, g3, g4, g5, g6: std_logic;

   begin

   -- Your test bench code

   testName := "14.71.51.1        ";
   
   for tt in 0 to 16384 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      -- i := tv(8);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);

	   PS_2ND_CLOCK_PULSE_3_JRJ <= a;
	   PS_LOGIC_GATE_E_2 <= n;
	   PS_STOP_AT_G_STAR_ARITH <= o; 
	   PS_LOGIC_GATE_D_1 <= B;
	   PS_STOP_AT_F <= c;
	   PS_LOGIC_GATE_F_1 <= d;
	   PS_STOP_AT_H <= e;
	   PS_LOGIC_GATE_G <= f;
	   PS_STOP_AT_J <= g;
	   PS_LOGIC_GATE_H <= h;
	   PS_STOP_AT_K <= j;
	   PS_OUTPUT_CYCLE <= k;
	   PS_LOGIC_GATE_U <= l;
	   PS_INPUT_CYCLE <= m;
	   
	   wait for 30 ns;
	   
	   check1(MY_START_MEM_CLOCK,not a,testName,"Start Mem Clock");
	   check1(MS_STOP_AT_G_DOT_LOGIC_GATE_E,NOT(n and o),testName,"SAG . LGE");
	   check1(MS_STOP_AT_F_DOT_LOGIC_GATE_D,NOT(b and c),testName,"SAF . GGD");
	   check1(MS_STOP_AT_H_DOT_LOGIC_GATE_F,NOT(d and e),testName,"SAH . LGF");
	   check1(MS_STOP_AT_J_DOT_LOGIC_GATE_G,NOT(f and g),testName,"SAJ . LGG");
	   check1(MS_STOP_AT_K_DOT_LOGIC_GATE_H,NOT(h and j),testName,"SAK . LGH");
	   
	   check1(MY_WRITE_CALL,
	         NOT(NOT MS_STOP_AT_G_DOT_LOGIC_GATE_E or NOT MS_STOP_AT_F_DOT_LOGIC_GATE_D or
	         NOT MS_STOP_AT_H_DOT_LOGIC_GATE_F or NOT MS_STOP_AT_J_DOT_LOGIC_GATE_G or
	         NOT MS_STOP_AT_K_DOT_LOGIC_GATE_H or
	         (l and k) or (l and m)),testName,"-Y Write Call");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
