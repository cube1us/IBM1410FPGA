-- Test Bench VHDL for IBM SMS ALD page 44.10.03.1
-- Title: STP PRT OUT + PRG RST CARR RET
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/27/2020 12:19:24 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_44_10_03_1_STP_PRT_OUT_PRG_RST_CARR_RET_tb is
end ALD_44_10_03_1_STP_PRT_OUT_PRG_RST_CARR_RET_tb;

architecture behavioral of ALD_44_10_03_1_STP_PRT_OUT_PRG_RST_CARR_RET_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_44_10_03_1_STP_PRT_OUT_PRG_RST_CARR_RET
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_PROGRAM_RESET:	 in STD_LOGIC;
		MV_ERROR_CTRL_RESET_DOT_RESTART:	 in STD_LOGIC;
		PS_CONS_PRINTER_C2_CAM_NO:	 in STD_LOGIC;
		MS_CONS_STOP_RESET:	 in STD_LOGIC;
		PS_CONS_PRINTER_NOT_BUSY:	 in STD_LOGIC;
		PS_CONS_STOP_PRINT_COMPLETE:	 in STD_LOGIC;
		PS_CONS_CHECK_STROBE:	 in STD_LOGIC;
		MS_CONSOLE_CHECK_STROBE_1:	 in STD_LOGIC;
		MS_STOP_PGM_RES_CARRIAGE_RETURN:	 out STD_LOGIC;
		PS_CONS_STOP_CR_COMPLETE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_PROGRAM_RESET: STD_LOGIC := '0';
	signal MV_ERROR_CTRL_RESET_DOT_RESTART: STD_LOGIC := '1';
	signal PS_CONS_PRINTER_C2_CAM_NO: STD_LOGIC := '0';
	signal MS_CONS_STOP_RESET: STD_LOGIC := '1';
	signal PS_CONS_PRINTER_NOT_BUSY: STD_LOGIC := '0';
	signal PS_CONS_STOP_PRINT_COMPLETE: STD_LOGIC := '0';
	signal PS_CONS_CHECK_STROBE: STD_LOGIC := '0';
	signal MS_CONSOLE_CHECK_STROBE_1: STD_LOGIC := '1';

	-- Outputs

	signal MS_STOP_PGM_RES_CARRIAGE_RETURN: STD_LOGIC;
	signal PS_CONS_STOP_CR_COMPLETE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      

signal sigG1, sigG2, sigG3, sigG4, sigLast: std_logic;

   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_44_10_03_1_STP_PRT_OUT_PRG_RST_CARR_RET port map(
		FPGA_CLK => FPGA_CLK,
		PS_PROGRAM_RESET => PS_PROGRAM_RESET,
		MV_ERROR_CTRL_RESET_DOT_RESTART => MV_ERROR_CTRL_RESET_DOT_RESTART,
		PS_CONS_PRINTER_C2_CAM_NO => PS_CONS_PRINTER_C2_CAM_NO,
		MS_CONS_STOP_RESET => MS_CONS_STOP_RESET,
		PS_CONS_PRINTER_NOT_BUSY => PS_CONS_PRINTER_NOT_BUSY,
		PS_CONS_STOP_PRINT_COMPLETE => PS_CONS_STOP_PRINT_COMPLETE,
		PS_CONS_CHECK_STROBE => PS_CONS_CHECK_STROBE,
		MS_CONSOLE_CHECK_STROBE_1 => MS_CONSOLE_CHECK_STROBE_1,
		MS_STOP_PGM_RES_CARRIAGE_RETURN => MS_STOP_PGM_RES_CARRIAGE_RETURN,
		PS_CONS_STOP_CR_COMPLETE => PS_CONS_STOP_CR_COMPLETE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable lastState: std_logic;

   begin

   -- Your test bench code

   testName := "44.10.03.1        ";
   
   -- Force a SET
   
   PS_PROGRAM_RESET <= '1';
   MV_ERROR_CTRL_RESET_DOT_RESTART <= '1';
   PS_CONS_PRINTER_C2_CAM_NO <= '1';
   MS_CONSOLE_CHECK_STROBE_1 <= '1';
   wait for 30 ns;
   check1(PS_CONS_STOP_CR_COMPLETE,'1',testName,"Cons Stop Cr Complete Initial reset");
   
   lastState := '1';
   
   for tt in 0 to 2**8 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      
      g1 := a and not b;
      g2 := (g and d) or (c and g1);
      g3 := not g1 and f;
      
      g4 := (lastState or g2) and not g3; -- Expected New latch state

      -- If we would be both setting and resetting the latch, skip this iteration
      
      if(g2 = '1' and g3 = '1') then
         next;
      end if;
      
      -- Maybe set the latch or maybe reset it -- or maybe neither.
      
		PS_PROGRAM_RESET <= a;
      MV_ERROR_CTRL_RESET_DOT_RESTART <= not b;
      PS_CONS_PRINTER_C2_CAM_NO <= c;
      MS_CONS_STOP_RESET <= not d;
      PS_CONS_PRINTER_NOT_BUSY <= e;
      PS_CONS_STOP_PRINT_COMPLETE <= f;
      PS_CONS_CHECK_STROBE <= g;
      MS_CONSOLE_CHECK_STROBE_1 <= not h;            

      sigG1 <= g1;
      sigG2 <= g2;
      sigG3 <= g3;
      sigG4 <= g4;
      sigLast <= lastState;
      
      wait for 30 ns;
      
      check1(PS_CONS_STOP_CR_COMPLETE,g4 and not h,testName,
         "Cons Stop Cr Complete");
      check1(MS_STOP_PGM_RES_CARRIAGE_RETURN,not(not g4 and (g1 or d) and e),
         testname,"Set Stop PGM Res CR");
         
      lastState := g4;  -- Starting state for next time
         
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
