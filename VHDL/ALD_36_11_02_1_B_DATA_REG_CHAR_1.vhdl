-- VHDL for IBM SMS ALD page 36.11.02.1
-- Title: B DATA REG CHAR 1
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/19/2020 11:13:41 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_36_11_02_1_B_DATA_REG_CHAR_1 is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_SA_CHAR_1_1_BIT:	 in STD_LOGIC;
		MY_SA_CHAR_1_2_BIT:	 in STD_LOGIC;
		MY_SA_CHAR_1_4_BIT:	 in STD_LOGIC;
		PY_B_DATA_REG_RESET_2:	 in STD_LOGIC;
		MY_SA_CHAR_1_8_BIT:	 in STD_LOGIC;
		MY_REGEN_CHR_1:	 in STD_LOGIC;
		MY_RO_CHR_1:	 in STD_LOGIC;
		MY_SA_CHAR_1_A_BIT:	 in STD_LOGIC;
		MY_SA_CHAR_1_B_BIT:	 in STD_LOGIC;
		MY_SA_CHAR_1_C_BIT:	 in STD_LOGIC;
		MY_SA_CHAR_1_WM_BIT:	 in STD_LOGIC;
		PS_B_DATA_REG_1_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_1_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_2_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_2_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_4_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_4_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_8_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_8_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_A_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_A_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_B_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_B_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_C_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_C_BIT:	 out STD_LOGIC;
		PS_B_DATA_REG_WM_BIT_STAR_1_STAR:	 out STD_LOGIC;
		MY_INH_CHAR_1_WM_BIT:	 out STD_LOGIC);
end ALD_36_11_02_1_B_DATA_REG_CHAR_1;

architecture behavioral of ALD_36_11_02_1_B_DATA_REG_CHAR_1 is 

	signal OUT_5A_NoPin: STD_LOGIC;
	signal OUT_5A_NoPin_Latch: STD_LOGIC;
	signal OUT_4A_NoPin: STD_LOGIC;
	signal OUT_4A_NoPin_Latch: STD_LOGIC;
	signal OUT_3A_B: STD_LOGIC;
	signal OUT_2A_A: STD_LOGIC;
	signal OUT_5B_NoPin: STD_LOGIC;
	signal OUT_5B_NoPin_Latch: STD_LOGIC;
	signal OUT_4B_NoPin: STD_LOGIC;
	signal OUT_4B_NoPin_Latch: STD_LOGIC;
	signal OUT_3B_D: STD_LOGIC;
	signal OUT_2B_E: STD_LOGIC;
	signal OUT_5C_NoPin: STD_LOGIC;
	signal OUT_5C_NoPin_Latch: STD_LOGIC;
	signal OUT_4C_NoPin: STD_LOGIC;
	signal OUT_4C_NoPin_Latch: STD_LOGIC;
	signal OUT_3C_B: STD_LOGIC;
	signal OUT_2C_A: STD_LOGIC;
	signal OUT_5D_NoPin: STD_LOGIC;
	signal OUT_5D_NoPin_Latch: STD_LOGIC;
	signal OUT_4D_NoPin: STD_LOGIC;
	signal OUT_4D_NoPin_Latch: STD_LOGIC;
	signal OUT_3D_D: STD_LOGIC;
	signal OUT_2D_E: STD_LOGIC;
	signal OUT_5E_NoPin: STD_LOGIC;
	signal OUT_5E_NoPin_Latch: STD_LOGIC;
	signal OUT_4E_NoPin: STD_LOGIC;
	signal OUT_4E_NoPin_Latch: STD_LOGIC;
	signal OUT_3E_B: STD_LOGIC;
	signal OUT_2E_A: STD_LOGIC;
	signal OUT_5F_NoPin: STD_LOGIC;
	signal OUT_5F_NoPin_Latch: STD_LOGIC;
	signal OUT_4F_NoPin: STD_LOGIC;
	signal OUT_4F_NoPin_Latch: STD_LOGIC;
	signal OUT_3F_D: STD_LOGIC;
	signal OUT_2F_E: STD_LOGIC;
	signal OUT_5G_NoPin: STD_LOGIC;
	signal OUT_5G_NoPin_Latch: STD_LOGIC;
	signal OUT_4G_NoPin: STD_LOGIC;
	signal OUT_4G_NoPin_Latch: STD_LOGIC;
	signal OUT_3G_B: STD_LOGIC;
	signal OUT_2G_A: STD_LOGIC;
	signal OUT_5H_NoPin: STD_LOGIC;
	signal OUT_5H_NoPin_Latch: STD_LOGIC;
	signal OUT_4H_NoPin: STD_LOGIC;
	signal OUT_4H_NoPin_Latch: STD_LOGIC;
	signal OUT_3H_D: STD_LOGIC;
	signal OUT_2H_E: STD_LOGIC;

begin

	OUT_5A_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4A_NoPin;
	OUT_4A_NoPin_Latch <= OUT_5A_NoPin AND MY_SA_CHAR_1_1_BIT;
	OUT_3A_B <= NOT(OUT_4A_NoPin OR MY_REGEN_CHR_1 );
	OUT_2A_A <= NOT(OUT_4A_NoPin OR MY_RO_CHR_1 );
	OUT_5B_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4B_NoPin;
	OUT_4B_NoPin_Latch <= OUT_5B_NoPin AND MY_SA_CHAR_1_2_BIT;
	OUT_3B_D <= NOT(OUT_4B_NoPin OR MY_REGEN_CHR_1 );
	OUT_2B_E <= NOT(OUT_4B_NoPin OR MY_RO_CHR_1 );
	OUT_5C_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4C_NoPin;
	OUT_4C_NoPin_Latch <= OUT_5C_NoPin AND MY_SA_CHAR_1_4_BIT;
	OUT_3C_B <= NOT(OUT_4C_NoPin OR MY_REGEN_CHR_1 );
	OUT_2C_A <= NOT(OUT_4C_NoPin OR MY_RO_CHR_1 );
	OUT_5D_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4D_NoPin;
	OUT_4D_NoPin_Latch <= OUT_5D_NoPin AND MY_SA_CHAR_1_8_BIT;
	OUT_3D_D <= NOT(OUT_4D_NoPin OR MY_REGEN_CHR_1 );
	OUT_2D_E <= NOT(OUT_4D_NoPin OR MY_RO_CHR_1 );
	OUT_5E_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4E_NoPin;
	OUT_4E_NoPin_Latch <= OUT_5E_NoPin AND MY_SA_CHAR_1_A_BIT;
	OUT_3E_B <= NOT(OUT_4E_NoPin OR MY_REGEN_CHR_1 );
	OUT_2E_A <= NOT(OUT_4E_NoPin OR MY_RO_CHR_1 );
	OUT_5F_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4F_NoPin;
	OUT_4F_NoPin_Latch <= OUT_5F_NoPin AND MY_SA_CHAR_1_B_BIT;
	OUT_3F_D <= NOT(OUT_4F_NoPin OR MY_REGEN_CHR_1 );
	OUT_2F_E <= NOT(OUT_4F_NoPin OR MY_RO_CHR_1 );
	OUT_5G_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4G_NoPin;
	OUT_4G_NoPin_Latch <= OUT_5G_NoPin AND MY_SA_CHAR_1_C_BIT;
	OUT_3G_B <= NOT(OUT_4G_NoPin OR MY_REGEN_CHR_1 );
	OUT_2G_A <= NOT(OUT_4G_NoPin OR MY_RO_CHR_1 );
	OUT_5H_NoPin_Latch <= PY_B_DATA_REG_RESET_2 OR OUT_4H_NoPin;
	OUT_4H_NoPin_Latch <= OUT_5H_NoPin AND MY_SA_CHAR_1_WM_BIT;
	OUT_3H_D <= NOT(OUT_4H_NoPin OR MY_REGEN_CHR_1 );
	OUT_2H_E <= NOT(OUT_4H_NoPin OR MY_RO_CHR_1 );

	MY_INH_CHAR_1_1_BIT <= OUT_3A_B;
	PS_B_DATA_REG_1_BIT_STAR_1_STAR <= OUT_2A_A;
	MY_INH_CHAR_1_2_BIT <= OUT_3B_D;
	PS_B_DATA_REG_2_BIT_STAR_1_STAR <= OUT_2B_E;
	MY_INH_CHAR_1_4_BIT <= OUT_3C_B;
	PS_B_DATA_REG_4_BIT_STAR_1_STAR <= OUT_2C_A;
	MY_INH_CHAR_1_8_BIT <= OUT_3D_D;
	PS_B_DATA_REG_8_BIT_STAR_1_STAR <= OUT_2D_E;
	MY_INH_CHAR_1_A_BIT <= OUT_3E_B;
	PS_B_DATA_REG_A_BIT_STAR_1_STAR <= OUT_2E_A;
	MY_INH_CHAR_1_B_BIT <= OUT_3F_D;
	PS_B_DATA_REG_B_BIT_STAR_1_STAR <= OUT_2F_E;
	MY_INH_CHAR_1_C_BIT <= OUT_3G_B;
	PS_B_DATA_REG_C_BIT_STAR_1_STAR <= OUT_2G_A;
	MY_INH_CHAR_1_WM_BIT <= OUT_3H_D;
	PS_B_DATA_REG_WM_BIT_STAR_1_STAR <= OUT_2H_E;

	Latch_5A: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5A_NoPin_Latch,
		Q => OUT_5A_NoPin,
		QBar => OPEN );

	Latch_4A: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4A_NoPin_Latch,
		Q => OUT_4A_NoPin,
		QBar => OPEN );

	Latch_5B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5B_NoPin_Latch,
		Q => OUT_5B_NoPin,
		QBar => OPEN );

	Latch_4B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4B_NoPin_Latch,
		Q => OUT_4B_NoPin,
		QBar => OPEN );

	Latch_5C: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5C_NoPin_Latch,
		Q => OUT_5C_NoPin,
		QBar => OPEN );

	Latch_4C: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4C_NoPin_Latch,
		Q => OUT_4C_NoPin,
		QBar => OPEN );

	Latch_5D: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5D_NoPin_Latch,
		Q => OUT_5D_NoPin,
		QBar => OPEN );

	Latch_4D: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4D_NoPin_Latch,
		Q => OUT_4D_NoPin,
		QBar => OPEN );

	Latch_5E: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5E_NoPin_Latch,
		Q => OUT_5E_NoPin,
		QBar => OPEN );

	Latch_4E: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4E_NoPin_Latch,
		Q => OUT_4E_NoPin,
		QBar => OPEN );

	Latch_5F: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5F_NoPin_Latch,
		Q => OUT_5F_NoPin,
		QBar => OPEN );

	Latch_4F: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4F_NoPin_Latch,
		Q => OUT_4F_NoPin,
		QBar => OPEN );

	Latch_5G: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5G_NoPin_Latch,
		Q => OUT_5G_NoPin,
		QBar => OPEN );

	Latch_4G: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4G_NoPin_Latch,
		Q => OUT_4G_NoPin,
		QBar => OPEN );

	Latch_5H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5H_NoPin_Latch,
		Q => OUT_5H_NoPin,
		QBar => OPEN );

	Latch_4H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4H_NoPin_Latch,
		Q => OUT_4H_NoPin,
		QBar => OPEN );


end;
