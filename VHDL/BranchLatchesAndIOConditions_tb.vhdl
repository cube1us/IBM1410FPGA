-- Test BenchVHDL for IBM SMS ALD group BranchLatchesAndIOConditions
-- Title: BranchLatchesAndIOConditions
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 7/13/2020 4:03:20 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity BranchLatchesAndIOConditions_tb is
end BranchLatchesAndIOConditions_tb;

architecture behavioral of BranchLatchesAndIOConditions_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component BranchLatchesAndIOConditions
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_LOGIC_GATE_E_1: in STD_LOGIC;
		PS_NEXT_TO_LAST_LOGIC_GATE: in STD_LOGIC;
		PS_BRANCH_TO_A_CONDITIONS: in STD_LOGIC;
		PS_NO_BRANCH_CONDITIONS: in STD_LOGIC;
		MS_1401_MODE: in STD_LOGIC;
		MS_PROGRAM_RESET_3: in STD_LOGIC;
		MS_PROGRAM_SET_BRANCH_CTRL: in STD_LOGIC;
		PS_E_CH_OVLP_IN_PROCESS: in STD_LOGIC;
		PS_ONE_SYMBOL_OP_MODIFIER: in STD_LOGIC;
		PS_F_CH_OVLP_IN_PROCESS: in STD_LOGIC;
		PS_TWO_SYMBOL_OP_MODIFIER: in STD_LOGIC;
		PS_COND_TEST_BRANCH_OP_CODE: in STD_LOGIC;
		PS_OP_MOD_SYM_FOR_I_O_STATUS: in STD_LOGIC;
		PS_SPECIAL_BRANCH_LATCH: in STD_LOGIC;
		PS_F_CH_NOT_READY: in STD_LOGIC;
		PS_F_CH_BUSY: in STD_LOGIC;
		PS_F_CH_CHECK: in STD_LOGIC;
		PS_BRANCH_ON_STATUS_CH_2: in STD_LOGIC;
		PS_F_CH_CONDITION: in STD_LOGIC;
		PS_F_CH_WRONG_LENGTH_RECORD: in STD_LOGIC;
		PS_F_CH_NO_TRANSFER_LATCH: in STD_LOGIC;
		PS_LAST_INSN_RO_CYCLE: in STD_LOGIC;
		MS_F_CH_CORRECT_LENGTH_RECORD: in STD_LOGIC;
		PS_NO_BRANCH_OP_CODES: in STD_LOGIC;
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		PS_OP_MOD_REG_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MS_BRANCH_TO_A_AR_LATCH: out STD_LOGIC;
		MS_NO_BRANCH_LATCH: out STD_LOGIC;
		PS_NO_BRANCH_LATCH: out STD_LOGIC;
		PS_BRANCH_TO_A_AR_LATCH: out STD_LOGIC;
		PS_BRANCH_TO_00001_ADDR_LAT: out STD_LOGIC;
		MS_BRANCH_TO_00001: out STD_LOGIC;
		PS_2ND_CND_A_BRANCH_JRJ: out STD_LOGIC;
		MS_OVERLAP_CH_2_NO_BRANCH: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_NEXT_TO_LAST_LOGIC_GATE: STD_LOGIC := '0';
	signal PS_BRANCH_TO_A_CONDITIONS: STD_LOGIC := '0';
	signal PS_NO_BRANCH_CONDITIONS: STD_LOGIC := '0';
	signal MS_1401_MODE: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_3: STD_LOGIC := '1';
	signal MS_PROGRAM_SET_BRANCH_CTRL: STD_LOGIC := '1';
	signal PS_E_CH_OVLP_IN_PROCESS: STD_LOGIC := '0';
	signal PS_ONE_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal PS_F_CH_OVLP_IN_PROCESS: STD_LOGIC := '0';
	signal PS_TWO_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal PS_COND_TEST_BRANCH_OP_CODE: STD_LOGIC := '0';
	signal PS_OP_MOD_SYM_FOR_I_O_STATUS: STD_LOGIC := '0';
	signal PS_SPECIAL_BRANCH_LATCH: STD_LOGIC := '0';
	signal PS_F_CH_NOT_READY: STD_LOGIC := '0';
	signal PS_F_CH_BUSY: STD_LOGIC := '0';
	signal PS_F_CH_CHECK: STD_LOGIC := '0';
	signal PS_BRANCH_ON_STATUS_CH_2: STD_LOGIC := '0';
	signal PS_F_CH_CONDITION: STD_LOGIC := '0';
	signal PS_F_CH_WRONG_LENGTH_RECORD: STD_LOGIC := '0';
	signal PS_F_CH_NO_TRANSFER_LATCH: STD_LOGIC := '0';
	signal PS_LAST_INSN_RO_CYCLE: STD_LOGIC := '0';
	signal MS_F_CH_CORRECT_LENGTH_RECORD: STD_LOGIC := '1';
	signal PS_NO_BRANCH_OP_CODES: STD_LOGIC := '0';
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";
	signal PS_OP_MOD_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal MS_BRANCH_TO_A_AR_LATCH: STD_LOGIC;
	signal MS_NO_BRANCH_LATCH: STD_LOGIC;
	signal PS_NO_BRANCH_LATCH: STD_LOGIC;
	signal PS_BRANCH_TO_A_AR_LATCH: STD_LOGIC;
	signal PS_BRANCH_TO_00001_ADDR_LAT: STD_LOGIC;
	signal MS_BRANCH_TO_00001: STD_LOGIC;
	signal PS_2ND_CND_A_BRANCH_JRJ: STD_LOGIC;
	signal MS_OVERLAP_CH_2_NO_BRANCH: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: BranchLatchesAndIOConditions port map(
		FPGA_CLK => FPGA_CLK,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_NEXT_TO_LAST_LOGIC_GATE => PS_NEXT_TO_LAST_LOGIC_GATE,
		PS_BRANCH_TO_A_CONDITIONS => PS_BRANCH_TO_A_CONDITIONS,
		PS_NO_BRANCH_CONDITIONS => PS_NO_BRANCH_CONDITIONS,
		MS_1401_MODE => MS_1401_MODE,
		MS_PROGRAM_RESET_3 => MS_PROGRAM_RESET_3,
		MS_PROGRAM_SET_BRANCH_CTRL => MS_PROGRAM_SET_BRANCH_CTRL,
		PS_E_CH_OVLP_IN_PROCESS => PS_E_CH_OVLP_IN_PROCESS,
		PS_ONE_SYMBOL_OP_MODIFIER => PS_ONE_SYMBOL_OP_MODIFIER,
		PS_F_CH_OVLP_IN_PROCESS => PS_F_CH_OVLP_IN_PROCESS,
		PS_TWO_SYMBOL_OP_MODIFIER => PS_TWO_SYMBOL_OP_MODIFIER,
		PS_COND_TEST_BRANCH_OP_CODE => PS_COND_TEST_BRANCH_OP_CODE,
		PS_OP_MOD_SYM_FOR_I_O_STATUS => PS_OP_MOD_SYM_FOR_I_O_STATUS,
		PS_SPECIAL_BRANCH_LATCH => PS_SPECIAL_BRANCH_LATCH,
		PS_F_CH_NOT_READY => PS_F_CH_NOT_READY,
		PS_F_CH_BUSY => PS_F_CH_BUSY,
		PS_F_CH_CHECK => PS_F_CH_CHECK,
		PS_BRANCH_ON_STATUS_CH_2 => PS_BRANCH_ON_STATUS_CH_2,
		PS_F_CH_CONDITION => PS_F_CH_CONDITION,
		PS_F_CH_WRONG_LENGTH_RECORD => PS_F_CH_WRONG_LENGTH_RECORD,
		PS_F_CH_NO_TRANSFER_LATCH => PS_F_CH_NO_TRANSFER_LATCH,
		PS_LAST_INSN_RO_CYCLE => PS_LAST_INSN_RO_CYCLE,
		MS_F_CH_CORRECT_LENGTH_RECORD => MS_F_CH_CORRECT_LENGTH_RECORD,
		PS_NO_BRANCH_OP_CODES => PS_NO_BRANCH_OP_CODES,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		PS_OP_MOD_REG_BUS => PS_OP_MOD_REG_BUS,
		MS_BRANCH_TO_A_AR_LATCH => MS_BRANCH_TO_A_AR_LATCH,
		MS_NO_BRANCH_LATCH => MS_NO_BRANCH_LATCH,
		PS_NO_BRANCH_LATCH => PS_NO_BRANCH_LATCH,
		PS_BRANCH_TO_A_AR_LATCH => PS_BRANCH_TO_A_AR_LATCH,
		PS_BRANCH_TO_00001_ADDR_LAT => PS_BRANCH_TO_00001_ADDR_LAT,
		MS_BRANCH_TO_00001 => MS_BRANCH_TO_00001,
		PS_2ND_CND_A_BRANCH_JRJ => PS_2ND_CND_A_BRANCH_JRJ,
		MS_OVERLAP_CH_2_NO_BRANCH => MS_OVERLAP_CH_2_NO_BRANCH);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "12.60.14.1        ";
   
   wait for 30 ns;
   MS_PROGRAM_RESET_3 <= '0';
   wait for 1 us;
   MS_PROGRAM_RESET_3 <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"SA");
   check1(MS_NO_BRANCH_LATCH,'1',testName,"SB");
   check1(PS_BRANCH_TO_A_AR_LATCH,'0',testName,"SC");
   check1(MS_BRANCH_TO_A_AR_LATCH,'1',testName,"SD");
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'1',testname,"SE");
   check1(MS_BRANCH_TO_00001,'0',testname,"SF");
   
   MS_PROGRAM_SET_BRANCH_CTRL <= '0';
   -- Set the latch
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'1',testName,"1A");
   check1(MS_NO_BRANCH_LATCH,'0',testName,"1B");
   MS_PROGRAM_SET_BRANCH_CTRL <= '1';
   wait for 30 ns;
   -- It should still be set
   check1(PS_NO_BRANCH_LATCH,'1',testName,"1C");
   -- Start reset test - should still be set
   PS_I_RING_HDL_BUS(0) <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'1',testName,"1D");
   -- The following should reset it
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1E");
   -- Remove the reset signals
   PS_I_RING_HDL_BUS(0) <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   wait for 30 ns;
   -- Start the next set test - first signal
   PS_NEXT_TO_LAST_LOGIC_GATE <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1F");
   MS_1401_MODE <= '0';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1G");
   -- second and third signals
   MS_1401_MODE <= '1';
   PS_NO_BRANCH_CONDITIONS <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'1',testName,"1H");
   PS_NO_BRANCH_CONDITIONS <= '0';  -- Leaving not 1401 mode and NLLG.
   -- Reset the latch again
   PS_I_RING_HDL_BUS(0) <= '1';
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1I");
   -- Set the latch again from page 12.60.16.1
   PS_I_RING_HDL_BUS(0) <= '0';
   PS_LOGIC_GATE_E_1 <= '0';   
   PS_NO_BRANCH_OP_CODES <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1J");
   PS_LAST_INSN_RO_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'1',testName,"1K");   
   -- Reset it again   
   PS_NO_BRANCH_OP_CODES <= '0';
   PS_LAST_INSN_RO_CYCLE <= '0';
   PS_NEXT_TO_LAST_LOGIC_GATE <= '0';
   PS_I_RING_HDL_BUS(0) <= '1';
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns;
   wait for 30 ns;
   check1(PS_NO_BRANCH_LATCH,'0',testName,"1L");   
   
   PS_I_RING_HDL_BUS(0) <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   MS_1401_MODE <= '1';
   PS_NEXT_TO_LAST_LOGIC_GATE <= '1';
   check1(PS_BRANCH_TO_A_AR_LATCH,'0',testName,"2A");
   -- Finish setting the latch
   PS_BRANCH_TO_A_CONDITIONS <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'1',testName,"2B");
   check1(MS_BRANCH_TO_A_AR_LATCH,'0',testName,"2C");   
   -- Reset the latch
   PS_NEXT_TO_LAST_LOGIC_GATE <= '0';  -- Remove one of the set signals
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'1',testName,"2D");
   MS_PROGRAM_SET_BRANCH_CTRL <= '0';
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'0',testName,"2E");
   -- Set it again
   MS_PROGRAM_SET_BRANCH_CTRL <= '1';
   PS_NEXT_TO_LAST_LOGIC_GATE <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'1',testName,"2F");
   -- Test the other reset signal
   PS_NEXT_TO_LAST_LOGIC_GATE <= '0';
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'1',testName,"2G");
   PS_I_RING_HDL_BUS(0) <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_A_AR_LATCH,'0',testName,"2H");
   
   PS_LOGIC_GATE_E_1 <= '0';
   PS_I_RING_HDL_BUS(0) <= '0';
   MS_PROGRAM_SET_BRANCH_CTRL <= '1';
   -- Earlier latch test resets reset this gate as well.
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'0',testName,"3A");
   check1(MS_BRANCH_TO_00001,'1',testname,"3B");
   -- Set it again
   MS_PROGRAM_RESET_3 <= '0';
   wait for 1 us;
   MS_PROGRAM_RESET_3 <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'1',testName,"3C");
   -- Test first reset
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'1',testName,"3D");
   -- Finish the reset
   PS_I_RING_HDL_BUS(0) <= '1';
   wait for 30 ns;
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'0',testName,"3E");
   -- Set it again
   PS_LOGIC_GATE_E_1 <= '0';
   PS_I_RING_HDL_BUS(0) <= '0';   
   MS_PROGRAM_RESET_3 <= '0';
   wait for 30 us;
   MS_PROGRAM_RESET_3 <= '1';
   wait for 30 ns;
   -- Test the other reset
   MS_PROGRAM_SET_BRANCH_CTRL <= '0';
   wait for 30 ns;
   check1(PS_BRANCH_TO_00001_ADDR_LAT,'0',testName,"3F");
   MS_PROGRAM_SET_BRANCH_CTRL <= '1';

   testName := "12.60.15.1        ";
   
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"1A");
   PS_OP_MOD_SYM_FOR_I_O_STATUS <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"1B");
   PS_SPECIAL_BRANCH_LATCH <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"1C");
   PS_COND_TEST_BRANCH_OP_CODE <= '1'; -- Leave set for several tests
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"1D");
   PS_OP_MOD_SYM_FOR_I_O_STATUS <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"1E");
   PS_SPECIAL_BRANCH_LATCH <= '0';
   wait for 30 ns;
   
   PS_E_CH_OVLP_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"2A");
   PS_ONE_SYMBOL_OP_MODIFIER <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"2B");
   PS_E_CH_OVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"2C");
   PS_ONE_SYMBOL_OP_MODIFIER <= '0';
   
   PS_F_CH_OVLP_IN_PROCESS <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"3A");
   PS_TWO_SYMBOL_OP_MODIFIER <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"3B");
   PS_F_CH_OVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"3C");
   PS_TWO_SYMBOL_OP_MODIFIER <= '0';
   
   PS_COND_TEST_BRANCH_OP_CODE <= '0';
   
   PS_BRANCH_ON_STATUS_CH_2 <= '1'; -- Used for a number of tests
   
   PS_OP_MOD_REG_BUS(HDL_1_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"4A");
   PS_F_CH_NOT_READY <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"4B");
   PS_OP_MOD_REG_BUS(HDL_1_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"4C");
   PS_F_CH_NOT_READY <= '0';
      
   PS_OP_MOD_REG_BUS(HDL_2_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"5A");
   PS_F_CH_BUSY <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"5B");
   PS_OP_MOD_REG_BUS(HDL_2_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"5C");
   PS_F_CH_BUSY <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_4_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"6A");
   PS_F_CH_CHECK <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"6B");
   PS_OP_MOD_REG_BUS(HDL_4_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"6C");
   PS_F_CH_CHECK <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_8_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"7A");
   PS_F_CH_CONDITION <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"7B");
   PS_OP_MOD_REG_BUS(HDL_8_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"7C");
   PS_F_CH_CONDITION <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_B_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"8A");
   PS_F_CH_WRONG_LENGTH_RECORD <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"8B");
   PS_OP_MOD_REG_BUS(HDL_B_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"8C");
   PS_F_CH_WRONG_LENGTH_RECORD <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_A_BIT) <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"9A");
   PS_F_CH_NO_TRANSFER_LATCH <= '1';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'1',testName,"9B");
   PS_OP_MOD_REG_BUS(HDL_A_BIT) <= '0';
   wait for 30 ns;
   check1(PS_2ND_CND_A_BRANCH_JRJ,'0',testName,"9C");
   PS_F_CH_NO_TRANSFER_LATCH <= '0';   

   PS_BRANCH_ON_STATUS_CH_2 <= '1'; -- Used for a number of tests -- Again
   PS_LAST_INSN_RO_CYCLE <= '1'; -- Ditto

   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"10A");

   PS_OP_MOD_REG_BUS(HDL_1_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"11A");
   PS_F_CH_NOT_READY <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"11B");
   PS_OP_MOD_REG_BUS(HDL_1_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"11C");
   PS_F_CH_NOT_READY <= '0';
      
   PS_OP_MOD_REG_BUS(HDL_2_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"12A");
   PS_F_CH_BUSY <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"12B");
   PS_OP_MOD_REG_BUS(HDL_2_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"12C");
   PS_F_CH_BUSY <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_4_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"13A");
   PS_F_CH_CHECK <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"13B");
   PS_OP_MOD_REG_BUS(HDL_4_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"13C");
   PS_F_CH_CHECK <= '0';
   
   PS_OP_MOD_REG_BUS(HDL_8_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"14A");
   PS_F_CH_CONDITION <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"14B");
   PS_OP_MOD_REG_BUS(HDL_8_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"14C");
   PS_F_CH_CONDITION <= '0';
   
   MS_F_CH_CORRECT_LENGTH_RECORD <= '0';
   PS_OP_MOD_REG_BUS(HDL_B_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"15A");
   MS_F_CH_CORRECT_LENGTH_RECORD <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"15B");
   PS_OP_MOD_REG_BUS(HDL_B_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"15C");
   
   PS_OP_MOD_REG_BUS(HDL_A_BIT) <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"16A");
   PS_F_CH_NO_TRANSFER_LATCH <= '1';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"16B");   
   PS_OP_MOD_REG_BUS(HDL_A_BIT) <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'0',testName,"16C");
   PS_F_CH_NO_TRANSFER_LATCH <= '0';   

   PS_LAST_INSN_RO_CYCLE <= '0';   
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"17A");
   PS_LAST_INSN_RO_CYCLE <= '1';
   wait for 30 ns;
   PS_BRANCH_ON_STATUS_CH_2 <= '0';
   wait for 30 ns;
   check1(MS_OVERLAP_CH_2_NO_BRANCH,'1',testName,"17B");
   PS_LAST_INSN_RO_CYCLE <= '0';   


   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
