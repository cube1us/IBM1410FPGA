-- Test BenchVHDL for IBM SMS ALD group InfoInputGating
-- Title: InfoInputGating
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 10/19/2020 1:16:36 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity InfoInputGating_tb is
end InfoInputGating_tb;

architecture behavioral of InfoInputGating_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component InfoInputGating
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MY_LD_CHR_0: in STD_LOGIC;
		MY_LD_CHR_1: in STD_LOGIC;
		MY_LD_CHR_2: in STD_LOGIC;
		MY_LD_CHR_3: in STD_LOGIC;
		MY_ASSEMBLY_CH_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_0_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_3_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_0_D_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_1_D_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_2_D_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_3_D_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MY_LD_CHR_0: STD_LOGIC := '1';
	signal MY_LD_CHR_1: STD_LOGIC := '1';
	signal MY_LD_CHR_2: STD_LOGIC := '1';
	signal MY_LD_CHR_3: STD_LOGIC := '1';
	signal MY_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_0_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_3_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";

	-- Outputs

	signal MY_INH_CHAR_0_D_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_INH_CHAR_1_D_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_INH_CHAR_2_D_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_INH_CHAR_3_D_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      
procedure checkChar(
        checked: in STD_LOGIC_VECTOR(7 downto 0);
        val: in STD_LOGIC_VECTOR(7 downto 0);
        testname: in string;
        test: in string) is
        begin
           for thebit in 0 to 7 loop
             assert checked(thebit) = val(thebit) report
                testname & " (" & test & ") bit " & Integer'image(thebit) & " failed." severity failure; 
           end loop;
        end procedure;


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: InfoInputGating port map(
		FPGA_CLK => FPGA_CLK,
		MY_LD_CHR_0 => MY_LD_CHR_0,
		MY_LD_CHR_1 => MY_LD_CHR_1,
		MY_LD_CHR_2 => MY_LD_CHR_2,
		MY_LD_CHR_3 => MY_LD_CHR_3,
		MY_ASSEMBLY_CH_BUS => MY_ASSEMBLY_CH_BUS,
		MY_INH_CHAR_0_BUS => MY_INH_CHAR_0_BUS,
		MY_INH_CHAR_1_BUS => MY_INH_CHAR_1_BUS,
		MY_INH_CHAR_2_BUS => MY_INH_CHAR_2_BUS,
		MY_INH_CHAR_3_BUS => MY_INH_CHAR_3_BUS,
		MY_INH_CHAR_0_D_BUS => MY_INH_CHAR_0_D_BUS,
		MY_INH_CHAR_1_D_BUS => MY_INH_CHAR_1_D_BUS,
		MY_INH_CHAR_2_D_BUS => MY_INH_CHAR_2_D_BUS,
		MY_INH_CHAR_3_D_BUS => MY_INH_CHAR_3_D_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tva, tv0, tv1, tv2, tv3: std_logic_vector(7 downto 0);
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable load: std_logic;
   variable go: std_logic_vector(7 downto 0);
   

   begin

   -- Your test bench code

   testName := "37.10.0%.1        ";

   for charbits in 0 to 2**8 loop
   
      tva := std_logic_vector(to_unsigned(charbits,tv0'Length));
      tv0 := tva(0) & tva(7 downto 1);
      tv1 := tv0(0) & tv0(7 downto 1);
      tv2 := tv1(0) & tv1(7 downto 1);
      tv3 := tv2(0) & tv2(7 downto 1);
      
      MY_ASSEMBLY_CH_BUS <= not tva;
      MY_INH_CHAR_0_BUS <= not tv0;
      MY_INH_CHAR_1_BUS <= not tv1;
      MY_INH_CHAR_2_BUS <= not tv2;
      MY_INH_CHAR_3_BUS <= not tv3;
      
      for tt in 0 to 2**4 loop
         tv := std_logic_vector(to_unsigned(tt,tv'Length));
         a := tv(0);
         b := tv(1);
         c := tv(2);
         d := tv(3);
         
         MY_LD_CHR_0 <= not a;
         MY_LD_CHR_1 <= not b;
         MY_LD_CHR_2 <= not c;
         MY_LD_CHR_3 <= not d;
      
         wait for 30 ns;
         
         for charPlane in 0 to 3 loop
            
            -- go (gate output) is the output of the and gate shown in the ILD (ASM CH . LD CHR(charPlane))
            
            if(tv(charPlane) = '1') then
               case charPlane is
                  when 0 => go := tva;
                  when 1 => go := tva;
                  when 2 => go := tva;
                  when 3 => go := tva;
               end case;               
            else
               go := "00000000";
            end if;
            
            -- Inhibit means write 0 to core.
            -- This happens ONLY if (ASM Ch bit . load) == '0'  AND incoming inibit is "true"
            
            -- "go" represents ASMCH bits . load  (gate Output, in positive logic)
            -- tv# represents Inhibit bits  (not-ed for -Y inputs of course)
            
            -- So, in POSITIVE LOGIC, Inhibit out = not go and tv#
            -- BUT, this is a -Y signal.  So, invert that, yielding go or not(tv#)
            
            case charPlane is
               when 0 =>
                  checkChar(MY_INH_CHAR_0_D_BUS,go or not tv0,testname,"INH Char 0");
               when 1 =>
                  checkChar(MY_INH_CHAR_1_D_BUS,go or not tv1,testname,"INH Char 1");
               when 2 =>
                  checkChar(MY_INH_CHAR_2_D_BUS,go or not tv2,testname,"INH Char 2");
               when 3 =>
                  checkChar(MY_INH_CHAR_3_D_BUS,go or not tv3,testname,"INH Char 3");
            end case;
         
         end loop;   -- CharPlane
      
      end loop;      -- tt
   end loop;         -- CharBits
   
   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
