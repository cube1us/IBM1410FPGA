-- Test Bench VHDL for IBM SMS ALD page 16.20.13.1
-- Title: TRUE ADD COMPLEMENT CONT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/3/2020 12:00:17 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_16_20_13_1_TRUE_ADD_COMPLEMENT_CONT_ACC_tb is
end ALD_16_20_13_1_TRUE_ADD_COMPLEMENT_CONT_ACC_tb;

architecture behavioral of ALD_16_20_13_1_TRUE_ADD_COMPLEMENT_CONT_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_16_20_13_1_TRUE_ADD_COMPLEMENT_CONT_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_MPLY_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MS_LB_OP_DOT_LIROC:	 in STD_LOGIC;
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_NOT_RC:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B0:	 in STD_LOGIC;
		MS_A_CYCLE:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4:	 in STD_LOGIC;
		MS_MPLY_DOT_N_DOT_C:	 in STD_LOGIC;
		MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN:	 in STD_LOGIC;
		MS_RA_OR_RS_DOT_B_DOT_NOT_1401:	 in STD_LOGIC;
		MB_DIV_DOT_X_DOT_B:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_BW:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_NOT_BW:	 in STD_LOGIC;
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_RC:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9:	 in STD_LOGIC;
		MS_DIV_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MS_DIV_DOT_2_DOT_D:	 in STD_LOGIC;
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B:	 in STD_LOGIC;
		MS_MPLY_DOT_1_OR_N_OR_3_DOT_D:	 in STD_LOGIC;
		MS_DIV_DOT_U_OR_Y_DOT_B:	 in STD_LOGIC;
		MS_A_OR_S_DOT_B_CYCLE:	 in STD_LOGIC;
		MS_DIV_DOT_MQ_DOT_B:	 in STD_LOGIC;
		PS_SET_TRUE:	 out STD_LOGIC;
		PS_REGEN_TRUE:	 out STD_LOGIC;
		PS_SET_COMPL_CTRL_LATCH:	 out STD_LOGIC;
		PS_REGEN_COMPL:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_MPLY_DOT_LAST_INSN_RO_CYCLE: STD_LOGIC := '1';
	signal MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE: STD_LOGIC := '1';
	signal MS_LB_OP_DOT_LIROC: STD_LOGIC := '1';
	signal MB_DIV_DOT_X_DOT_B_DOT_S_DOT_NOT_RC: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_B0: STD_LOGIC := '1';
	signal MS_A_CYCLE: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4: STD_LOGIC := '1';
	signal MS_MPLY_DOT_N_DOT_C: STD_LOGIC := '1';
	signal MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN: STD_LOGIC := '1';
	signal MS_RA_OR_RS_DOT_B_DOT_NOT_1401: STD_LOGIC := '1';
	signal MB_DIV_DOT_X_DOT_B: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_BW: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_NOT_BW: STD_LOGIC := '1';
	signal MB_DIV_DOT_X_DOT_B_DOT_S_DOT_RC: STD_LOGIC := '1';
	signal MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9: STD_LOGIC := '1';
	signal MS_DIV_DOT_LAST_INSN_RO_CYCLE: STD_LOGIC := '1';
	signal MS_DIV_DOT_2_DOT_D: STD_LOGIC := '1';
	signal MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B: STD_LOGIC := '1';
	signal MS_MPLY_DOT_1_OR_N_OR_3_DOT_D: STD_LOGIC := '1';
	signal MS_DIV_DOT_U_OR_Y_DOT_B: STD_LOGIC := '1';
	signal MS_A_OR_S_DOT_B_CYCLE: STD_LOGIC := '1';
	signal MS_DIV_DOT_MQ_DOT_B: STD_LOGIC := '1';

	-- Outputs

	signal PS_SET_TRUE: STD_LOGIC;
	signal PS_REGEN_TRUE: STD_LOGIC;
	signal PS_SET_COMPL_CTRL_LATCH: STD_LOGIC;
	signal PS_REGEN_COMPL: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_16_20_13_1_TRUE_ADD_COMPLEMENT_CONT_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_MPLY_DOT_LAST_INSN_RO_CYCLE => MS_MPLY_DOT_LAST_INSN_RO_CYCLE,
		MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE => MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE,
		MS_LB_OP_DOT_LIROC => MS_LB_OP_DOT_LIROC,
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_NOT_RC => MB_DIV_DOT_X_DOT_B_DOT_S_DOT_NOT_RC,
		MB_MPLY_DOT_MQ_DOT_B_DOT_B0 => MB_MPLY_DOT_MQ_DOT_B_DOT_B0,
		MS_A_CYCLE => MS_A_CYCLE,
		MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4 => MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4,
		MS_MPLY_DOT_N_DOT_C => MS_MPLY_DOT_N_DOT_C,
		MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN => MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN,
		MS_RA_OR_RS_DOT_B_DOT_NOT_1401 => MS_RA_OR_RS_DOT_B_DOT_NOT_1401,
		MB_DIV_DOT_X_DOT_B => MB_DIV_DOT_X_DOT_B,
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_BW => MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_BW,
		MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8 => MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8,
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_NOT_BW => MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_NOT_BW,
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_RC => MB_DIV_DOT_X_DOT_B_DOT_S_DOT_RC,
		MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9 => MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9,
		MS_DIV_DOT_LAST_INSN_RO_CYCLE => MS_DIV_DOT_LAST_INSN_RO_CYCLE,
		MS_DIV_DOT_2_DOT_D => MS_DIV_DOT_2_DOT_D,
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B => MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B,
		MS_MPLY_DOT_1_OR_N_OR_3_DOT_D => MS_MPLY_DOT_1_OR_N_OR_3_DOT_D,
		MS_DIV_DOT_U_OR_Y_DOT_B => MS_DIV_DOT_U_OR_Y_DOT_B,
		MS_A_OR_S_DOT_B_CYCLE => MS_A_OR_S_DOT_B_CYCLE,
		MS_DIV_DOT_MQ_DOT_B => MS_DIV_DOT_MQ_DOT_B,
		PS_SET_TRUE => PS_SET_TRUE,
		PS_REGEN_TRUE => PS_REGEN_TRUE,
		PS_SET_COMPL_CTRL_LATCH => PS_SET_COMPL_CTRL_LATCH,
		PS_REGEN_COMPL => PS_REGEN_COMPL);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "16.20.13.1        ";

   for tt in 0 to 2**23 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);
      p := tv(14);
      q := tv(15);
      r := tv(16);
      s := tv(17);
      t := tv(18);
      u := tv(19);
      v := tv(20);
      w := tv(21);
      x := tv(22);

		MS_MPLY_DOT_LAST_INSN_RO_CYCLE <= not a;
		MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE <= not b;
		MS_LB_OP_DOT_LIROC <= not c;
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_NOT_RC <= not d;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B0 <= not e;
		MS_A_CYCLE <= not f;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4 <= not g;
		MS_MPLY_DOT_N_DOT_C <= not h;
		MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN <= not j;
		MS_RA_OR_RS_DOT_B_DOT_NOT_1401 <= not k;
		MB_DIV_DOT_X_DOT_B <= not l;
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_BW <= not m;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8 <= not n;
		MB_MPLY_DOT_MQ_DOT_B_DOT_S_DOT_B9_DOT_NOT_BW <= not o;
		MB_DIV_DOT_X_DOT_B_DOT_S_DOT_RC <= not p;
		MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9 <= not q;
		MS_DIV_DOT_LAST_INSN_RO_CYCLE <= not r;
		MS_DIV_DOT_2_DOT_D <= not s;
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B <= not t;
		MS_MPLY_DOT_1_OR_N_OR_3_DOT_D <= not u;
		MS_DIV_DOT_U_OR_Y_DOT_B <= not v;
		MS_A_OR_S_DOT_B_CYCLE <= not w;
		MS_DIV_DOT_MQ_DOT_B <= not x;
      
      wait for 30 ns;
            
      check1(PS_SET_TRUE,a or g or e or m or d or b or c,testName,"Set True");
      check1(PS_REGEN_TRUE,h or t or u or l or v or w or k or j or f,testName,"Regen True");
      check1(PS_SET_COMPL_CTRL_LATCH,n or o or q or s or r or p,testName,"Set Compl Ctrl Latch");
      check1(PS_REGEN_COMPL,u or t or x or v or w or f,testName,"Regen Compl");            
            
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 400 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
