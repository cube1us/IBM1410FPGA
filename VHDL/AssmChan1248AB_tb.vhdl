-- Test BenchVHDL for IBM SMS ALD group AssmChan1248AB
-- Title: AssmChan1248AB
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/14/2020 8:05:31 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AssmChan1248AB_tb is
end AssmChan1248AB_tb;

architecture behavioral of AssmChan1248AB_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AssmChan1248AB
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_USE_A_CH_NU: in STD_LOGIC;
		MS_SET_ASTERISK: in STD_LOGIC;
		MS_SET_GROUP_MARK: in STD_LOGIC;
		PB_USE_ADDER_NU_1: in STD_LOGIC;
		MB_ASSEMBLY_CH_NU_ZERO_INSERT: in STD_LOGIC;
		MS_SET_DOLLAR_SIGN: in STD_LOGIC;
		MB_USE_NO_NUMERICS: in STD_LOGIC;
		PB_USE_B_CH_NU: in STD_LOGIC;
		MB_ASSEMBLY_CH_NU_ONE_INSERT: in STD_LOGIC;
		MB_USE_NO_ZONES: in STD_LOGIC;
		PS_USE_A_CH_ZONES: in STD_LOGIC;
		PB_USE_B_CH_ZONES: in STD_LOGIC;
		MB_ASSEMBLY_CH_A_BIT_INSERT: in STD_LOGIC;
		PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES: in STD_LOGIC;
		MS_PLUS_SIGN_LATCH_GATED: in STD_LOGIC;
		PS_ASM_CH_A_BIT_STAR_STERLING: in STD_LOGIC;
		MS_A_CH_INV_MINUS_SIGN_GTD: in STD_LOGIC;
		MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED: in STD_LOGIC;
		MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED: in STD_LOGIC;
		PS_ASM_CH_A_BIT_STAR_ADDER_ZONES: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2: in STD_LOGIC;
		PS_ADDER_ZONES_NOT_B_BIT: in STD_LOGIC;
		PS_ASM_CH_B_BIT_STAR_ADDER_ZONES: in STD_LOGIC;
		MB_B_MN_OR_IN_PL_OR_PL_OR_INV_MN_GATED: in STD_LOGIC;
		PS_B_CH_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_CH_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_A_CH_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_A_CH_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PB_ADDER_OUT_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PB_ADDER_OUT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_ASSEMBLY_CH_1_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_1_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_1_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_1_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_2_BIT: out STD_LOGIC;
		PS_ASSEMBLY_CH_2_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_2_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_2_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_4_BIT: out STD_LOGIC;
		PS_ASSEMBLY_CH_4_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_4_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_4_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_8_BIT: out STD_LOGIC;
		PS_ASSEMBLY_CH_8_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_8_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_8_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_A_BIT: out STD_LOGIC;
		PS_ASSEMBLY_CH_A_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_A_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_A_BIT: out STD_LOGIC;
		PS_ASSEMBLY_CH_A_OR_B_BITS: out STD_LOGIC;
		PB_B_CH_PL_OR_INV_MIN_SIGN_GATED: out STD_LOGIC;
		PS_ASSEMBLY_CH_B_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_B_BIT: out STD_LOGIC;
		MS_ASSEMBLY_CH_NOT_B_BIT: out STD_LOGIC;
		MY_ASSEMBLY_CH_B_BIT: out STD_LOGIC;
		LAMP_11C8K10: out STD_LOGIC;
		LAMP_11C8K11: out STD_LOGIC;
		LAMP_11C8J10: out STD_LOGIC;
		LAMP_11C8J11: out STD_LOGIC;
		LAMP_11C8H10: out STD_LOGIC;
		LAMP_11C8H11: out STD_LOGIC;
		LAMP_11C8G10: out STD_LOGIC;
		LAMP_11C8G11: out STD_LOGIC;
		LAMP_11C8F10: out STD_LOGIC;
		LAMP_11C8F11: out STD_LOGIC;
		LAMP_11C8E10: out STD_LOGIC;
		LAMP_11C8E11: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_USE_A_CH_NU: STD_LOGIC := '0';
	signal MS_SET_ASTERISK: STD_LOGIC := '1';
	signal MS_SET_GROUP_MARK: STD_LOGIC := '1';
	signal PB_USE_ADDER_NU_1: STD_LOGIC := '0';
	signal MB_ASSEMBLY_CH_NU_ZERO_INSERT: STD_LOGIC := '1';
	signal MS_SET_DOLLAR_SIGN: STD_LOGIC := '1';
	signal MB_USE_NO_NUMERICS: STD_LOGIC := '1';
	signal PB_USE_B_CH_NU: STD_LOGIC := '0';
	signal MB_ASSEMBLY_CH_NU_ONE_INSERT: STD_LOGIC := '1';
	signal MB_USE_NO_ZONES: STD_LOGIC := '1';
	signal PS_USE_A_CH_ZONES: STD_LOGIC := '0';
	signal PB_USE_B_CH_ZONES: STD_LOGIC := '0';
	signal MB_ASSEMBLY_CH_A_BIT_INSERT: STD_LOGIC := '1';
	signal PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES: STD_LOGIC := '0';
	signal MS_PLUS_SIGN_LATCH_GATED: STD_LOGIC := '1';
	signal PS_ASM_CH_A_BIT_STAR_STERLING: STD_LOGIC := '0';
	signal MS_A_CH_INV_MINUS_SIGN_GTD: STD_LOGIC := '1';
	signal MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED: STD_LOGIC := '1';
	signal MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED: STD_LOGIC := '1';
	signal PS_ASM_CH_A_BIT_STAR_ADDER_ZONES: STD_LOGIC := '0';
	signal MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2: STD_LOGIC := '1';
	signal PS_ADDER_ZONES_NOT_B_BIT: STD_LOGIC := '0';
	signal PS_ASM_CH_B_BIT_STAR_ADDER_ZONES: STD_LOGIC := '0';
	signal MB_B_MN_OR_IN_PL_OR_PL_OR_INV_MN_GATED: STD_LOGIC := '1';
	signal PS_B_CH_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_A_CH_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_A_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PB_ADDER_OUT_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PB_ADDER_OUT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal PS_ASSEMBLY_CH_1_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_1_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_1_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_1_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_2_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_2_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_2_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_2_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_4_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_4_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_4_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_4_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_8_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_8_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_8_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_8_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_A_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_A_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_A_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_A_BIT: STD_LOGIC;
	signal PS_ASSEMBLY_CH_A_OR_B_BITS: STD_LOGIC;
	signal PB_B_CH_PL_OR_INV_MIN_SIGN_GATED: STD_LOGIC;
	signal PS_ASSEMBLY_CH_B_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_B_BIT: STD_LOGIC;
	signal MS_ASSEMBLY_CH_NOT_B_BIT: STD_LOGIC;
	signal MY_ASSEMBLY_CH_B_BIT: STD_LOGIC;
	signal LAMP_11C8K10: STD_LOGIC;
	signal LAMP_11C8K11: STD_LOGIC;
	signal LAMP_11C8J10: STD_LOGIC;
	signal LAMP_11C8J11: STD_LOGIC;
	signal LAMP_11C8H10: STD_LOGIC;
	signal LAMP_11C8H11: STD_LOGIC;
	signal LAMP_11C8G10: STD_LOGIC;
	signal LAMP_11C8G11: STD_LOGIC;
	signal LAMP_11C8F10: STD_LOGIC;
	signal LAMP_11C8F11: STD_LOGIC;
	signal LAMP_11C8E10: STD_LOGIC;
	signal LAMP_11C8E11: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AssmChan1248AB port map(
		FPGA_CLK => FPGA_CLK,
		PS_USE_A_CH_NU => PS_USE_A_CH_NU,
		MS_SET_ASTERISK => MS_SET_ASTERISK,
		MS_SET_GROUP_MARK => MS_SET_GROUP_MARK,
		PB_USE_ADDER_NU_1 => PB_USE_ADDER_NU_1,
		MB_ASSEMBLY_CH_NU_ZERO_INSERT => MB_ASSEMBLY_CH_NU_ZERO_INSERT,
		MS_SET_DOLLAR_SIGN => MS_SET_DOLLAR_SIGN,
		MB_USE_NO_NUMERICS => MB_USE_NO_NUMERICS,
		PB_USE_B_CH_NU => PB_USE_B_CH_NU,
		MB_ASSEMBLY_CH_NU_ONE_INSERT => MB_ASSEMBLY_CH_NU_ONE_INSERT,
		MB_USE_NO_ZONES => MB_USE_NO_ZONES,
		PS_USE_A_CH_ZONES => PS_USE_A_CH_ZONES,
		PB_USE_B_CH_ZONES => PB_USE_B_CH_ZONES,
		MB_ASSEMBLY_CH_A_BIT_INSERT => MB_ASSEMBLY_CH_A_BIT_INSERT,
		PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES => PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES,
		MS_PLUS_SIGN_LATCH_GATED => MS_PLUS_SIGN_LATCH_GATED,
		PS_ASM_CH_A_BIT_STAR_STERLING => PS_ASM_CH_A_BIT_STAR_STERLING,
		MS_A_CH_INV_MINUS_SIGN_GTD => MS_A_CH_INV_MINUS_SIGN_GTD,
		MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED => MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED,
		MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED => MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED,
		PS_ASM_CH_A_BIT_STAR_ADDER_ZONES => PS_ASM_CH_A_BIT_STAR_ADDER_ZONES,
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1 => MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1,
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2 => MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2,
		PS_ADDER_ZONES_NOT_B_BIT => PS_ADDER_ZONES_NOT_B_BIT,
		PS_ASM_CH_B_BIT_STAR_ADDER_ZONES => PS_ASM_CH_B_BIT_STAR_ADDER_ZONES,
		MB_B_MN_OR_IN_PL_OR_PL_OR_INV_MN_GATED => MB_B_MN_OR_IN_PL_OR_PL_OR_INV_MN_GATED,
		PS_B_CH_NOT_BUS => PS_B_CH_NOT_BUS,
		PS_B_CH_BUS => PS_B_CH_BUS,
		PS_A_CH_NOT_BUS => PS_A_CH_NOT_BUS,
		PS_A_CH_BUS => PS_A_CH_BUS,
		PB_ADDER_OUT_NOT_BUS => PB_ADDER_OUT_NOT_BUS,
		PB_ADDER_OUT_BUS => PB_ADDER_OUT_BUS,
		PS_ASSEMBLY_CH_1_BIT => PS_ASSEMBLY_CH_1_BIT,
		MS_ASSEMBLY_CH_1_BIT => MS_ASSEMBLY_CH_1_BIT,
		MS_ASSEMBLY_CH_NOT_1_BIT => MS_ASSEMBLY_CH_NOT_1_BIT,
		MY_ASSEMBLY_CH_1_BIT => MY_ASSEMBLY_CH_1_BIT,
		MS_ASSEMBLY_CH_2_BIT => MS_ASSEMBLY_CH_2_BIT,
		PS_ASSEMBLY_CH_2_BIT => PS_ASSEMBLY_CH_2_BIT,
		MS_ASSEMBLY_CH_NOT_2_BIT => MS_ASSEMBLY_CH_NOT_2_BIT,
		MY_ASSEMBLY_CH_2_BIT => MY_ASSEMBLY_CH_2_BIT,
		MS_ASSEMBLY_CH_4_BIT => MS_ASSEMBLY_CH_4_BIT,
		PS_ASSEMBLY_CH_4_BIT => PS_ASSEMBLY_CH_4_BIT,
		MS_ASSEMBLY_CH_NOT_4_BIT => MS_ASSEMBLY_CH_NOT_4_BIT,
		MY_ASSEMBLY_CH_4_BIT => MY_ASSEMBLY_CH_4_BIT,
		MS_ASSEMBLY_CH_8_BIT => MS_ASSEMBLY_CH_8_BIT,
		PS_ASSEMBLY_CH_8_BIT => PS_ASSEMBLY_CH_8_BIT,
		MS_ASSEMBLY_CH_NOT_8_BIT => MS_ASSEMBLY_CH_NOT_8_BIT,
		MY_ASSEMBLY_CH_8_BIT => MY_ASSEMBLY_CH_8_BIT,
		MS_ASSEMBLY_CH_A_BIT => MS_ASSEMBLY_CH_A_BIT,
		PS_ASSEMBLY_CH_A_BIT => PS_ASSEMBLY_CH_A_BIT,
		MS_ASSEMBLY_CH_NOT_A_BIT => MS_ASSEMBLY_CH_NOT_A_BIT,
		MY_ASSEMBLY_CH_A_BIT => MY_ASSEMBLY_CH_A_BIT,
		PS_ASSEMBLY_CH_A_OR_B_BITS => PS_ASSEMBLY_CH_A_OR_B_BITS,
		PB_B_CH_PL_OR_INV_MIN_SIGN_GATED => PB_B_CH_PL_OR_INV_MIN_SIGN_GATED,
		PS_ASSEMBLY_CH_B_BIT => PS_ASSEMBLY_CH_B_BIT,
		MS_ASSEMBLY_CH_B_BIT => MS_ASSEMBLY_CH_B_BIT,
		MS_ASSEMBLY_CH_NOT_B_BIT => MS_ASSEMBLY_CH_NOT_B_BIT,
		MY_ASSEMBLY_CH_B_BIT => MY_ASSEMBLY_CH_B_BIT,
		LAMP_11C8K10 => LAMP_11C8K10,
		LAMP_11C8K11 => LAMP_11C8K11,
		LAMP_11C8J10 => LAMP_11C8J10,
		LAMP_11C8J11 => LAMP_11C8J11,
		LAMP_11C8H10 => LAMP_11C8H10,
		LAMP_11C8H11 => LAMP_11C8H11,
		LAMP_11C8G10 => LAMP_11C8G10,
		LAMP_11C8G11 => LAMP_11C8G11,
		LAMP_11C8F10 => LAMP_11C8F10,
		LAMP_11C8F11 => LAMP_11C8F11,
		LAMP_11C8E10 => LAMP_11C8E10,
		LAMP_11C8E11 => LAMP_11C8E11);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable bitNum: integer;

   begin

   -- Your test bench code

   testName := "15.50.01.1        ";

   bitNum := HDL_1_BIT;
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);

      g1 := a and d;
      g2 := b and h;
      g3 := c and i;
      g4 := i and o;
      g5 := h and n;
      g6 := d and m;

		PB_ADDER_OUT_NOT_BUS(bitNum) <= a;
		PS_B_CH_NOT_BUS(bitNum) <= b;
		PS_A_CH_NOT_BUS(bitNum) <= c;
		PB_USE_ADDER_NU_1 <= d;
		MS_SET_ASTERISK <= not e;
		MB_ASSEMBLY_CH_NU_ZERO_INSERT <= not f;
		MB_USE_NO_NUMERICS <= not g;
		PB_USE_B_CH_NU <= h;
		PS_USE_A_CH_NU <= i;
		MB_ASSEMBLY_CH_NU_ONE_INSERT <= not j;
		MS_SET_DOLLAR_SIGN <= not k;
		MS_SET_GROUP_MARK <= not l;
		PB_ADDER_OUT_BUS(bitNum) <= m;
		PS_B_CH_BUS(bitNum) <= n;
		PS_A_CH_BUS(bitNum) <= o;
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_1_BIT,NOT(e or f or g or g1 or g2 or g3),testName,"ASSM Ch Not 1 bit");
      check1(LAMP_11C8K10,not MS_ASSEMBLY_CH_NOT_1_BIT,testName,"ASSM Ch Not 1 bit Lamp");
      check1(PS_ASSEMBLY_CH_1_BIT,g4 or g5 or g6 or j or k or l,testName,"ASSM Ch 1 Bit");
      check1(LAMP_11C8K11,PS_ASSEMBLY_CH_1_BIT,testName,"ASSM Ch 1 Bit Lamp");
      check1(MS_ASSEMBLY_CH_1_BIT,not PS_ASSEMBLY_CH_1_BIT,testName,"-S Assm Ch 1 bit");
      check1(MY_ASSEMBLY_CH_1_BIT,not PS_ASSEMBLY_CH_1_BIT,testName,"-Y Assm Ch 1 bit");
      
   end loop;

   testName := "15.50.02.1        ";
   bitNum := HDL_2_BIT;  -- 2 bit
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);

      g1 := a and h;
      g2 := b and l;
      g3 := c and d;
      g4 := d and n;
      g5 := l and m;
      g6 := h and o;

		PB_ADDER_OUT_NOT_BUS(bitNum) <= a;
		PS_B_CH_NOT_BUS(bitNum) <= b;
		PS_A_CH_NOT_BUS(bitNum) <= c;
		PS_USE_A_CH_NU <= d;
		MB_USE_NO_NUMERICS <= not e;
		MB_ASSEMBLY_CH_NU_ONE_INSERT <= not f;		
		MS_SET_ASTERISK <= not g;
		PB_USE_ADDER_NU_1 <= h;
		MS_SET_GROUP_MARK <= not i;
		MS_SET_DOLLAR_SIGN <= not j;		
		MB_ASSEMBLY_CH_NU_ZERO_INSERT <= not k;		
		PB_USE_B_CH_NU <= l;		
		PS_B_CH_BUS(bitNum) <= m;
		PS_A_CH_BUS(bitNum) <= n;
		PB_ADDER_OUT_BUS(bitNum) <= o;
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_2_BIT,NOT(g or f or e or g1 or g2 or g3),testName,"ASSM Ch Not 2 bit");
      check1(LAMP_11C8J10,not MS_ASSEMBLY_CH_NOT_2_BIT,testName,"ASSM Ch Not 2 bit Lamp");
      check1(PS_ASSEMBLY_CH_2_BIT,g4 or g5 or g6 or j or k or i,testName,"ASSM Ch 2 Bit");
      check1(LAMP_11C8J11,PS_ASSEMBLY_CH_2_BIT,testName,"ASSM Ch 2 Bit Lamp");
      check1(MS_ASSEMBLY_CH_2_BIT,not PS_ASSEMBLY_CH_2_BIT,testName,"-S Assm Ch 2 bit");
      check1(MY_ASSEMBLY_CH_2_BIT,not PS_ASSEMBLY_CH_2_BIT,testName,"-Y Assm Ch 2 bit");
      
   end loop;

   testName := "15.50.03.1        ";
   bitNum := HDL_4_BIT;  -- 4 bit
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);

      g1 := a and f;
      g2 := b and i;
      g3 := c and o;
      g4 := o and n;
      g5 := i and m;
      g6 := f and l;

		PB_ADDER_OUT_NOT_BUS(bitNum) <= a;
		PS_B_CH_NOT_BUS(bitNUM) <= b;
		PS_A_CH_NOT_BUS(bitNUM) <= c;
		MS_SET_DOLLAR_SIGN <= not d;
		MB_USE_NO_NUMERICS <= not e;
		PB_USE_ADDER_NU_1 <= f;
		MB_ASSEMBLY_CH_NU_ZERO_INSERT <= not g;
		MB_ASSEMBLY_CH_NU_ONE_INSERT <= not h;
		PB_USE_B_CH_NU <= i;
		MS_SET_GROUP_MARK <= not j;
		MS_SET_ASTERISK <= not k;
		PB_ADDER_OUT_BUS(bitNum) <= l;
		PS_B_CH_BUS(bitNum) <= m;
		PS_A_CH_BUS(bitNum) <= n;
		PS_USE_A_CH_NU <= o;
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_4_BIT,NOT(d or g or h or e or g1 or g2 or g3),testName,"ASSM Ch Not 4 bit");
      check1(LAMP_11C8H10,not MS_ASSEMBLY_CH_NOT_4_BIT,testName,"ASSM Ch Not 4 bit Lamp");
      check1(PS_ASSEMBLY_CH_4_BIT,g4 or g5 or g6 or j or k,testName,"ASSM Ch 4 Bit");
      check1(LAMP_11C8H11,PS_ASSEMBLY_CH_4_BIT,testName,"ASSM Ch 4 Bit Lamp");
      check1(MS_ASSEMBLY_CH_4_BIT,not PS_ASSEMBLY_CH_4_BIT,testName,"-S Assm Ch 4 bit");
      check1(MY_ASSEMBLY_CH_4_BIT,not PS_ASSEMBLY_CH_4_BIT,testName,"-Y Assm Ch 4 bit");
      
   end loop;

   testName := "15.50.04.1        ";
   bitNum := HDL_8_BIT;  -- 8 bit
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      
      g1 := a and g;
      g2 := b and d;
      g3 := c and j;
      g4 := j and o;
      g5 := d and n;
      g6 := g and m;

		PB_ADDER_OUT_NOT_BUS(bitNum) <= a;
		PS_B_CH_NOT_BUS(bitNum) <= b;
		PS_A_CH_NOT_BUS(bitNum) <= c;
		PB_USE_B_CH_NU <= d;
		MB_USE_NO_NUMERICS <= not e;
		MB_ASSEMBLY_CH_NU_ONE_INSERT <= not f;
		PB_USE_ADDER_NU_1 <= g;
		MB_ASSEMBLY_CH_NU_ZERO_INSERT <= not h;
		MS_SET_DOLLAR_SIGN <= not i;
		PS_USE_A_CH_NU <= j;
		MS_SET_GROUP_MARK <= not k;
		MS_SET_ASTERISK <= not l;
		PB_ADDER_OUT_BUS(bitNum) <= m;
		PS_B_CH_BUS(bitNum) <= n;
		PS_A_CH_BUS(bitNum) <= o;
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_8_BIT,NOT(f or e or g1 or g2 or g3),testName,"ASSM Ch Not 8 bit");
      check1(LAMP_11C8G10,not MS_ASSEMBLY_CH_NOT_8_BIT,testName,"ASSM Ch Not 8 bit Lamp");
      check1(PS_ASSEMBLY_CH_8_BIT,g4 or g5 or g6 or h or l or i or k,testName,"ASSM Ch 8 Bit");
      check1(LAMP_11C8G11,PS_ASSEMBLY_CH_8_BIT,testName,"ASSM Ch 8 Bit Lamp");
      check1(MS_ASSEMBLY_CH_8_BIT,not PS_ASSEMBLY_CH_8_BIT,testName,"-S Assm Ch 8 bit");
      check1(MY_ASSEMBLY_CH_8_BIT,not PS_ASSEMBLY_CH_8_BIT,testName,"-Y Assm Ch 8 bit");
      
   end loop;

   testName := "15.50.05.1        ";
   bitNum := HDL_A_BIT;
   for tt in 0 to 2**16 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      p := tv(15);
      
      g1 := a and g;
      g2 := b and h;
      g3 := h and o;
      g4 := g and m;
      
		PS_B_CH_NOT_BUS(HDL_A_BIT) <= a;
      -- MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED;   LATER, not on ALD
      -- MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED; LATER, not on ALD
      PS_A_CH_NOT_BUS(HDL_A_BIT) <= b;
      PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES <= c;
      MS_SET_ASTERISK <= not d;
      MS_SET_DOLLAR_SIGN <= not e;
      MB_USE_NO_ZONES <= not f;
      PB_USE_B_CH_ZONES <= g;
      PS_USE_A_CH_ZONES <= h;
      MB_ASSEMBLY_CH_A_BIT_INSERT <= not i;
      MS_SET_GROUP_MARK <= not j;
      MS_PLUS_SIGN_LATCH_GATED <= not k;
      PS_ASM_CH_A_BIT_STAR_STERLING <= l;
      PS_ASM_CH_A_BIT_STAR_ADDER_ZONES <= p;
      PS_B_CH_BUS(HDL_A_BIT) <= m;
      MS_A_CH_INV_MINUS_SIGN_GTD <= not n;
      PS_A_CH_BUS(HDL_A_BIT) <= o;      
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_A_BIT,NOT(c or d or e or f or g1 or g2),testName,"ASSM Ch Not A bit");
      check1(LAMP_11C8F10,not MS_ASSEMBLY_CH_NOT_A_BIT,testName,"ASSM Ch Not A bit Lamp");
      check1(PS_ASSEMBLY_CH_A_BIT,g3 or g4 or i or j or k or n or l or p,testName,"ASSM Ch A Bit");
      check1(LAMP_11C8F11,PS_ASSEMBLY_CH_A_BIT,testName,"ASSM Ch A Bit Lamp");
      check1(MS_ASSEMBLY_CH_A_BIT,not PS_ASSEMBLY_CH_A_BIT,testName,"-S Assm Ch A bit");
      check1(MY_ASSEMBLY_CH_A_BIT,not PS_ASSEMBLY_CH_A_BIT,testName,"-Y Assm Ch A bit");
      check1(PS_ASSEMBLY_CH_A_OR_B_BITS,not MS_ASSEMBLY_CH_B_BIT or PS_ASSEMBLY_CH_A_BIT,
         testName,"ASSM CH A+B Bits");
      
   end loop;
   
   -- These signals do not appear on the ALD.  Hopefully I got them right.  ;)
   
   for tt in 0 to 2 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      
      MB_B_CH_MIN_OR_INV_PLUS_SIGN_GATED <= a;  -- In this test, don't invert - follow my sheet
      MB_B_CH_PLU_OR_INV_MIN_SIGN_GATED <= b;   -- So, this is actual logic, not "positive" logic
      
      wait for 30 ns;
      
      check1(PB_B_CH_PL_OR_INV_MIN_SIGN_GATED,not b and a,testName,"ASSM Ch Not A bit");

   end loop;
   

   testName := "15.50.05.1        ";
   bitNum := HDL_B_BIT;
   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      
      g1 := n and h;
      g2 := o and i;
      g3 := i and c;
      g4 := h and a;
      
		PS_B_CH_NOT_BUS(HDL_B_BIT) <= a;
      -- MB_B_MN_OR_IN_PL_OR_PL_OR_INV_MN_GATED; -- Not used on ALD
      MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1 <= not b;
      PS_A_CH_NOT_BUS(HDL_B_BIT) <= c;
      PS_ADDER_ZONES_NOT_B_BIT <= d;
      MB_USE_NO_ZONES <= not e;
      MB_ASSEMBLY_CH_A_BIT_INSERT <= not f;
      MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2 <= not g;
      PB_USE_B_CH_ZONES <= h;
      PS_USE_A_CH_ZONES <= i;
      MS_SET_GROUP_MARK <= not j;
      MS_SET_ASTERISK <= not k;
      MS_SET_DOLLAR_SIGN <= not l;
      PS_ASM_CH_B_BIT_STAR_ADDER_ZONES <= m;
      PS_B_CH_BUS(HDL_B_BIT) <= n;
      PS_A_CH_BUS(HDL_B_BIT) <= o;      
      
      wait for 30 ns;
      
      check1(MS_ASSEMBLY_CH_NOT_B_BIT,NOT(g3 or g4 or g or f or e or d or b),testName,"ASSM Ch Not B bit");
      check1(LAMP_11C8E10,not MS_ASSEMBLY_CH_NOT_B_BIT,testName,"ASSM Ch Not B bit Lamp");
      check1(PS_ASSEMBLY_CH_B_BIT,m or k or l or j or g1 or g2,testName,"ASSM Ch B Bit");
      check1(LAMP_11C8E11,PS_ASSEMBLY_CH_B_BIT,testName,"ASSM Ch B Bit Lamp");
      check1(MS_ASSEMBLY_CH_B_BIT,not PS_ASSEMBLY_CH_B_BIT,testName,"-S Assm Ch B bit");
      check1(MY_ASSEMBLY_CH_B_BIT,not PS_ASSEMBLY_CH_B_BIT,testName,"-Y Assm Ch B bit");
      
   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
