-- Test BenchVHDL for IBM SMS ALD group AddMatrixCarryInBandQ
-- Title: AddMatrixCarryInBandQ
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/29/2020 11:05:54 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AddMatrixCarryInBandQ_tb is
end AddMatrixCarryInBandQ_tb;

architecture behavioral of AddMatrixCarryInBandQ_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AddMatrixCarryInBandQ
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MB_ADD_AB0: in STD_LOGIC;
		MB_ADD_AB1: in STD_LOGIC;
		MB_ADD_BB0: in STD_LOGIC;
		MB_ADD_BB1: in STD_LOGIC;
		MB_NO_CARRY_LATCH: in STD_LOGIC;
		MB_CARRY_LATCH: in STD_LOGIC;
		MB_ADD_AQ0: in STD_LOGIC;
		MB_ADD_AQ2: in STD_LOGIC;
		MB_ADD_AQ4: in STD_LOGIC;
		MB_ADD_AQ6: in STD_LOGIC;
		MB_ADD_AQ8: in STD_LOGIC;
		MB_ADD_BQ0: in STD_LOGIC;
		MB_ADD_BQ2: in STD_LOGIC;
		MB_ADD_BQ4: in STD_LOGIC;
		MB_ADD_BQ6: in STD_LOGIC;
		MB_ADD_BQ8: in STD_LOGIC;
		PB_AB0_DOT_BB0_DOT_NC: out STD_LOGIC;
		PB_AB0_DOT_BB1_DOT_C: out STD_LOGIC;
		PB_AB1_DOT_BB0_DOT_C: out STD_LOGIC;
		PB_AB1_DOT_BB1_DOT_NC: out STD_LOGIC;
		PB_AB0_DOT_BB1_DOT_NC: out STD_LOGIC;
		PB_AB1_DOT_BB0_DOT_NC: out STD_LOGIC;
		PB_AB0_DOT_BB0_DOT_C: out STD_LOGIC;
		PB_AB1_DOT_BB1_DOT_C: out STD_LOGIC;
		PB_ADD_AQ0_DOT_BQ0: out STD_LOGIC;
		PB_ADD_BQ0: out STD_LOGIC;
		PB_ADD_AQ2_DOT_BQ8: out STD_LOGIC;
		MB_ADDER_MX_Q0: out STD_LOGIC;
		PB_ADD_AQ4_DOT_BQ6: out STD_LOGIC;
		PB_ADD_BQ4: out STD_LOGIC;
		PB_ADD_AQ6_DOT_BQ4: out STD_LOGIC;
		PB_ADD_AQ8_DOT_BQ2: out STD_LOGIC;
		PB_ADD_AQ0_DOT_BQ2: out STD_LOGIC;
		PB_ADD_AQ2_DOT_BQ0: out STD_LOGIC;
		MB_ADDER_MX_Q2: out STD_LOGIC;
		PB_ADD_AQ4_DOT_BQ8: out STD_LOGIC;
		PB_ADD_AQ6_DOT_BQ6: out STD_LOGIC;
		PB_ADD_AQ8_DOT_BQ4: out STD_LOGIC;
		PB_ADD_AQ0_DOT_BQ4: out STD_LOGIC;
		PB_ADD_AQ2_DOT_BQ2: out STD_LOGIC;
		MB_ADDER_MX_Q4: out STD_LOGIC;
		PB_ADD_AQ4_DOT_BQ0: out STD_LOGIC;
		PB_ADD_AQ6_DOT_BQ8: out STD_LOGIC;
		PB_ADD_BQ8: out STD_LOGIC;
		PB_ADD_AQ8_DOT_BQ6: out STD_LOGIC;
		PB_ADD_AQ0_DOT_BQ6: out STD_LOGIC;
		PB_ADD_AQ2_DOT_BQ4: out STD_LOGIC;
		MB_ADDER_MX_Q6: out STD_LOGIC;
		PB_ADD_AQ4_DOT_BQ2: out STD_LOGIC;
		PB_ADD_AQ6_DOT_BQ0: out STD_LOGIC;
		PB_ADD_AQ8_DOT_BQ8: out STD_LOGIC;
		PS_ADDER_MX_Q8: out STD_LOGIC;
		MB_ADDER_MX_Q8: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MB_ADD_AB0: STD_LOGIC := '1';
	signal MB_ADD_AB1: STD_LOGIC := '1';
	signal MB_ADD_BB0: STD_LOGIC := '1';
	signal MB_ADD_BB1: STD_LOGIC := '1';
	signal MB_NO_CARRY_LATCH: STD_LOGIC := '1';
	signal MB_CARRY_LATCH: STD_LOGIC := '1';
	signal MB_ADD_AQ0: STD_LOGIC := '1';
	signal MB_ADD_AQ2: STD_LOGIC := '1';
	signal MB_ADD_AQ4: STD_LOGIC := '1';
	signal MB_ADD_AQ6: STD_LOGIC := '1';
	signal MB_ADD_AQ8: STD_LOGIC := '1';
	signal MB_ADD_BQ0: STD_LOGIC := '1';
	signal MB_ADD_BQ2: STD_LOGIC := '1';
	signal MB_ADD_BQ4: STD_LOGIC := '1';
	signal MB_ADD_BQ6: STD_LOGIC := '1';
	signal MB_ADD_BQ8: STD_LOGIC := '1';

	-- Outputs

	signal PB_AB0_DOT_BB0_DOT_NC: STD_LOGIC;
	signal PB_AB0_DOT_BB1_DOT_C: STD_LOGIC;
	signal PB_AB1_DOT_BB0_DOT_C: STD_LOGIC;
	signal PB_AB1_DOT_BB1_DOT_NC: STD_LOGIC;
	signal PB_AB0_DOT_BB1_DOT_NC: STD_LOGIC;
	signal PB_AB1_DOT_BB0_DOT_NC: STD_LOGIC;
	signal PB_AB0_DOT_BB0_DOT_C: STD_LOGIC;
	signal PB_AB1_DOT_BB1_DOT_C: STD_LOGIC;
	signal PB_ADD_AQ0_DOT_BQ0: STD_LOGIC;
	signal PB_ADD_BQ0: STD_LOGIC;
	signal PB_ADD_AQ2_DOT_BQ8: STD_LOGIC;
	signal MB_ADDER_MX_Q0: STD_LOGIC;
	signal PB_ADD_AQ4_DOT_BQ6: STD_LOGIC;
	signal PB_ADD_BQ4: STD_LOGIC;
	signal PB_ADD_AQ6_DOT_BQ4: STD_LOGIC;
	signal PB_ADD_AQ8_DOT_BQ2: STD_LOGIC;
	signal PB_ADD_AQ0_DOT_BQ2: STD_LOGIC;
	signal PB_ADD_AQ2_DOT_BQ0: STD_LOGIC;
	signal MB_ADDER_MX_Q2: STD_LOGIC;
	signal PB_ADD_AQ4_DOT_BQ8: STD_LOGIC;
	signal PB_ADD_AQ6_DOT_BQ6: STD_LOGIC;
	signal PB_ADD_AQ8_DOT_BQ4: STD_LOGIC;
	signal PB_ADD_AQ0_DOT_BQ4: STD_LOGIC;
	signal PB_ADD_AQ2_DOT_BQ2: STD_LOGIC;
	signal MB_ADDER_MX_Q4: STD_LOGIC;
	signal PB_ADD_AQ4_DOT_BQ0: STD_LOGIC;
	signal PB_ADD_AQ6_DOT_BQ8: STD_LOGIC;
	signal PB_ADD_BQ8: STD_LOGIC;
	signal PB_ADD_AQ8_DOT_BQ6: STD_LOGIC;
	signal PB_ADD_AQ0_DOT_BQ6: STD_LOGIC;
	signal PB_ADD_AQ2_DOT_BQ4: STD_LOGIC;
	signal MB_ADDER_MX_Q6: STD_LOGIC;
	signal PB_ADD_AQ4_DOT_BQ2: STD_LOGIC;
	signal PB_ADD_AQ6_DOT_BQ0: STD_LOGIC;
	signal PB_ADD_AQ8_DOT_BQ8: STD_LOGIC;
	signal PS_ADDER_MX_Q8: STD_LOGIC;
	signal MB_ADDER_MX_Q8: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AddMatrixCarryInBandQ port map(
		FPGA_CLK => FPGA_CLK,
		MB_ADD_AB0 => MB_ADD_AB0,
		MB_ADD_AB1 => MB_ADD_AB1,
		MB_ADD_BB0 => MB_ADD_BB0,
		MB_ADD_BB1 => MB_ADD_BB1,
		MB_NO_CARRY_LATCH => MB_NO_CARRY_LATCH,
		MB_CARRY_LATCH => MB_CARRY_LATCH,
		MB_ADD_AQ0 => MB_ADD_AQ0,
		MB_ADD_AQ2 => MB_ADD_AQ2,
		MB_ADD_AQ4 => MB_ADD_AQ4,
		MB_ADD_AQ6 => MB_ADD_AQ6,
		MB_ADD_AQ8 => MB_ADD_AQ8,
		MB_ADD_BQ0 => MB_ADD_BQ0,
		MB_ADD_BQ2 => MB_ADD_BQ2,
		MB_ADD_BQ4 => MB_ADD_BQ4,
		MB_ADD_BQ6 => MB_ADD_BQ6,
		MB_ADD_BQ8 => MB_ADD_BQ8,
		PB_AB0_DOT_BB0_DOT_NC => PB_AB0_DOT_BB0_DOT_NC,
		PB_AB0_DOT_BB1_DOT_C => PB_AB0_DOT_BB1_DOT_C,
		PB_AB1_DOT_BB0_DOT_C => PB_AB1_DOT_BB0_DOT_C,
		PB_AB1_DOT_BB1_DOT_NC => PB_AB1_DOT_BB1_DOT_NC,
		PB_AB0_DOT_BB1_DOT_NC => PB_AB0_DOT_BB1_DOT_NC,
		PB_AB1_DOT_BB0_DOT_NC => PB_AB1_DOT_BB0_DOT_NC,
		PB_AB0_DOT_BB0_DOT_C => PB_AB0_DOT_BB0_DOT_C,
		PB_AB1_DOT_BB1_DOT_C => PB_AB1_DOT_BB1_DOT_C,
		PB_ADD_AQ0_DOT_BQ0 => PB_ADD_AQ0_DOT_BQ0,
		PB_ADD_BQ0 => PB_ADD_BQ0,
		PB_ADD_AQ2_DOT_BQ8 => PB_ADD_AQ2_DOT_BQ8,
		MB_ADDER_MX_Q0 => MB_ADDER_MX_Q0,
		PB_ADD_AQ4_DOT_BQ6 => PB_ADD_AQ4_DOT_BQ6,
		PB_ADD_BQ4 => PB_ADD_BQ4,
		PB_ADD_AQ6_DOT_BQ4 => PB_ADD_AQ6_DOT_BQ4,
		PB_ADD_AQ8_DOT_BQ2 => PB_ADD_AQ8_DOT_BQ2,
		PB_ADD_AQ0_DOT_BQ2 => PB_ADD_AQ0_DOT_BQ2,
		PB_ADD_AQ2_DOT_BQ0 => PB_ADD_AQ2_DOT_BQ0,
		MB_ADDER_MX_Q2 => MB_ADDER_MX_Q2,
		PB_ADD_AQ4_DOT_BQ8 => PB_ADD_AQ4_DOT_BQ8,
		PB_ADD_AQ6_DOT_BQ6 => PB_ADD_AQ6_DOT_BQ6,
		PB_ADD_AQ8_DOT_BQ4 => PB_ADD_AQ8_DOT_BQ4,
		PB_ADD_AQ0_DOT_BQ4 => PB_ADD_AQ0_DOT_BQ4,
		PB_ADD_AQ2_DOT_BQ2 => PB_ADD_AQ2_DOT_BQ2,
		MB_ADDER_MX_Q4 => MB_ADDER_MX_Q4,
		PB_ADD_AQ4_DOT_BQ0 => PB_ADD_AQ4_DOT_BQ0,
		PB_ADD_AQ6_DOT_BQ8 => PB_ADD_AQ6_DOT_BQ8,
		PB_ADD_BQ8 => PB_ADD_BQ8,
		PB_ADD_AQ8_DOT_BQ6 => PB_ADD_AQ8_DOT_BQ6,
		PB_ADD_AQ0_DOT_BQ6 => PB_ADD_AQ0_DOT_BQ6,
		PB_ADD_AQ2_DOT_BQ4 => PB_ADD_AQ2_DOT_BQ4,
		MB_ADDER_MX_Q6 => MB_ADDER_MX_Q6,
		PB_ADD_AQ4_DOT_BQ2 => PB_ADD_AQ4_DOT_BQ2,
		PB_ADD_AQ6_DOT_BQ0 => PB_ADD_AQ6_DOT_BQ0,
		PB_ADD_AQ8_DOT_BQ8 => PB_ADD_AQ8_DOT_BQ8,
		PS_ADDER_MX_Q8 => PS_ADDER_MX_Q8,
		MB_ADDER_MX_Q8 => MB_ADDER_MX_Q8);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable carry, ab0, bb0, ab1, bb1: std_logic;
   variable aq0, aq2, aq4, aq6, aq8, bq0, bq2, bq4, bq6, bq8: std_logic;

   begin

   -- Your test bench code

   testName := "16.13.01.1 - 07.1 ";

   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      carry := tv(0);
      ab0 := tv(1);
      ab1 := tv(2);
      bb0 := tv(3);
      bb1 := tv(4);
      aq0 := tv(5);
      aq2 := tv(6);
      aq4 := tv(7);
      aq6 := tv(8);
      aq8 := tv(9);
      bq0 := tv(10);
      bq2 := tv(11);
      bq4 := tv(12);
      bq6 := tv(13);
      bq8 := tv(14);


   	MB_NO_CARRY_LATCH <= carry;  -- -B Not Carry, i.e., not not carry.  ;)
   	MB_CARRY_LATCH <= not carry;
   	MB_ADD_AB0 <= not ab0;
   	MB_ADD_AB1 <= not ab1;
   	MB_ADD_BB0 <= not bb0;
   	MB_ADD_BB1 <= not bb1;
   	MB_ADD_AQ0 <= not aq0;
   	MB_ADD_AQ2 <= not aq2;
   	MB_ADD_AQ4 <= not aq4;
   	MB_ADD_AQ6 <= not aq6;
   	MB_ADD_AQ8 <= not aq8;
   	MB_ADD_BQ0 <= not bq0;
   	MB_ADD_BQ2 <= not bq2;
   	MB_ADD_BQ4 <= not bq4;
   	MB_ADD_BQ6 <= not bq6;
   	MB_ADD_BQ8 <= not bq8;
      
      wait for 30 ns;
      
      check1(PB_AB0_DOT_BB0_DOT_NC,ab0 and bb0 and not carry,testName,"AB0.BB0.NC");
      check1(PB_AB0_DOT_BB1_DOT_C,ab0 and bb1 and carry,testName,"AB0.BB1.C");
      check1(PB_AB1_DOT_BB0_DOT_C,ab1 and bb0 and carry,testName,"AB1.BB0.C");
      check1(PB_AB1_DOT_BB1_DOT_NC,ab1 and bb1 and not carry,testName,"AB1.BB1.NC"); 
      check1(PB_AB0_DOT_BB1_DOT_NC,ab0 and bb1 and not carry,testName,"AB0.BB1.NC");
      check1(PB_AB1_DOT_BB0_DOT_NC,ab1 and bb0 and not carry,testName,"AB1.BB0.NC");
      check1(PB_AB0_DOT_BB0_DOT_C,ab0 and bb0 and carry,testName,"AB0.BB0.C");
      check1(PB_AB1_DOT_BB1_DOT_C,ab1 and bb1 and carry,testName,"AB1.BB1.C");
      
      check1(PB_ADD_AQ0_DOT_BQ0,aq0 and bq0,testName,"AQ0.BQ0");
      check1(PB_ADD_BQ0,bq0,testName,"BQ0");
      check1(PB_ADD_AQ2_DOT_BQ8,aq2 and bq8,testName,"AQ2.BQ8");
      check1(PB_ADD_AQ4_DOT_BQ6,aq4 and bq6,testName,"AQ4.BQ6");
      check1(PB_ADD_BQ4,bq4,testName,"BQ4");
      check1(PB_ADD_AQ6_DOT_BQ4,aq6 and bq4,testName,"AQ6.BQ4");
      check1(PB_ADD_AQ8_DOT_BQ2,aq8 and bq2,testName,"AQ8.BQ2");
      check1(MB_ADDER_MX_Q0,NOT((aq0 and bq0) or (aq2 and bq8) or (aq4 and bq6) or
         (aq6 and bq4) or (aq8 and bq2)),testName,"Q0 Out");
         
      check1(PB_ADD_AQ0_DOT_BQ2,aq0 and bq2,testName,"AQ0.BQ2");
      check1(PB_ADD_AQ2_DOT_BQ0,aq2 and bq0,testName,"AQ2.BQ0");
      check1(PB_ADD_AQ4_DOT_BQ8,aq4 and bq8,testName,"AQ4.BQ8");
      check1(PB_ADD_AQ6_DOT_BQ6,aq6 and bq6,testName,"AQ6.BQ6");
      check1(PB_ADD_AQ8_DOT_BQ4,aq8 and bq4,testName,"AQ8.BQ4");
      check1(MB_ADDER_MX_Q2,NOT((aq0 and bq2) or (aq2 and bq0) or (aq4 and bq8) or
         (aq6 and bq6) or (aq8 and bq4)),testName,"Q2 Out");
         
      check1(PB_ADD_AQ0_DOT_BQ4,aq0 and bq4,testName,"AQ0.BQ4");
      check1(PB_ADD_AQ2_DOT_BQ2,aq2 and bq2,testName,"AQ2.BQ2");
      check1(PB_ADD_AQ4_DOT_BQ0,aq4 and bq0,testName,"AQ4.BQ0");
      check1(PB_ADD_AQ6_DOT_BQ8,aq6 and bq8,testName,"AQ6.BQ8");
      check1(PB_ADD_AQ8_DOT_BQ6,aq8 and bq6,testName,"AQ8.BQ6");
      check1(PB_ADD_BQ8,bq8,testName,"BQ8");
      check1(MB_ADDER_MX_Q4,NOT((aq0 and bq4) or (aq2 and bq2) or (aq4 and bq0) or
         (aq6 and bq8) or (aq8 and bq6)),testName,"Q4 Out");
      
      check1(PB_ADD_AQ0_DOT_BQ6,aq0 and bq6,testName,"AQ0.BQ6");
      check1(PB_ADD_AQ2_DOT_BQ4,aq2 and bq4,testName,"AQ2.BQ4");
      check1(PB_ADD_AQ4_DOT_BQ2,aq4 and bq2,testName,"AQ4.BQ2");
      check1(PB_ADD_AQ6_DOT_BQ0,aq6 and bq0,testName,"AQ6.BQ0");
      check1(PB_ADD_AQ8_DOT_BQ8,aq8 and bq8,testName,"AQ8.BQ8");
      check1(MB_ADDER_MX_Q6,NOT((aq0 and bq6) or (aq2 and bq4) or (aq4 and bq2) or
         (aq6 and bq0) or (aq8 and bq8)),testName,"Q6 Out");
     
      check1(MB_ADDER_MX_Q8,NOT((aq0 and bq8) or (aq2 and bq6) or (aq4 and bq4) or
         (aq6 and bq2) or (aq8 and bq0)),testName,"Q8 Out");
      check1(PS_ADDER_MX_Q8,(aq0 and bq8) or (aq2 and bq6) or (aq4 and bq4) or
            (aq6 and bq2) or (aq8 and bq0),testName,"+S Q8 Out");
                  
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
