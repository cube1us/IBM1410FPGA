-- Test BenchVHDL for IBM SMS ALD group AddrGenUPTP
-- Title: AddrGenUPTP
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/1/2020 7:57:11 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AddrGenUPTP_tb is
end AddrGenUPTP_tb;

architecture behavioral of AddrGenUPTP_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AddrGenUPTP
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_INDEX_CTRL_NUMBER_ONE: in STD_LOGIC;
		PS_INDEX_CTRL_NUMBER_TWO: in STD_LOGIC;
		PS_A_RING_1_TIME: in STD_LOGIC;
		PS_ADDR_SCNR_2_POS: in STD_LOGIC;
		PS_ADDR_SCNR_3_POS: in STD_LOGIC;
		PS_RO_INDEX_AR: in STD_LOGIC;
		PS_ADDR_SCNR_4_POS: in STD_LOGIC;
		PS_ADDR_SCNR_5_POS: in STD_LOGIC;
		MS_H_POS_C_INDEX_TAG: in STD_LOGIC;
		PS_H_POS_C_INDEX_TAG: in STD_LOGIC;
		MS_H_POS_B_INDEX_TAG: in STD_LOGIC;
		MS_H_POS_A_INDEX_TAG: in STD_LOGIC;
		PS_H_POS_A_INDEX_TAG: in STD_LOGIC;
		MS_T_POS_B_INDEX_TAG: in STD_LOGIC;
		PS_T_POS_B_INDEX_TAG: in STD_LOGIC;
		PS_H_POS_B_INDEX_TAG: in STD_LOGIC;
		MS_ADDR_GEN_UP_04_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_08_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_02_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_01_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_18_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_12_BIT: out STD_LOGIC;
		MS_ADDR_GEN_U_POS_5_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_U_POS_0_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_24_BIT: out STD_LOGIC;
		MS_ADDR_GEN_UP_48_BIT: out STD_LOGIC;
		MS_ADDR_GEN_T_POS_2_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_T_POS_3_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_T_POS_5_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_T_POS_4_DIGIT: out STD_LOGIC;
		MS_ADDR_GEN_TP_08_BIT: out STD_LOGIC;
		MS_ADDR_GEN_TP_18_BIT: out STD_LOGIC;
		MS_ADDR_GEN_TP_24_BIT: out STD_LOGIC;
		MS_ADDR_GEN_TP_48_BIT: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_INDEX_CTRL_NUMBER_ONE: STD_LOGIC := '0';
	signal PS_INDEX_CTRL_NUMBER_TWO: STD_LOGIC := '0';
	signal PS_A_RING_1_TIME: STD_LOGIC := '0';
	signal PS_ADDR_SCNR_2_POS: STD_LOGIC := '0';
	signal PS_ADDR_SCNR_3_POS: STD_LOGIC := '0';
	signal PS_RO_INDEX_AR: STD_LOGIC := '0';
	signal PS_ADDR_SCNR_4_POS: STD_LOGIC := '0';
	signal PS_ADDR_SCNR_5_POS: STD_LOGIC := '0';
	signal MS_H_POS_C_INDEX_TAG: STD_LOGIC := '1';
	signal PS_H_POS_C_INDEX_TAG: STD_LOGIC := '0';
	signal MS_H_POS_B_INDEX_TAG: STD_LOGIC := '1';
	signal MS_H_POS_A_INDEX_TAG: STD_LOGIC := '1';
	signal PS_H_POS_A_INDEX_TAG: STD_LOGIC := '0';
	signal MS_T_POS_B_INDEX_TAG: STD_LOGIC := '1';
	signal PS_T_POS_B_INDEX_TAG: STD_LOGIC := '0';
	signal PS_H_POS_B_INDEX_TAG: STD_LOGIC := '0';

	-- Outputs

	signal MS_ADDR_GEN_UP_04_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_08_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_02_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_01_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_18_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_12_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_U_POS_5_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_U_POS_0_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_24_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_UP_48_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_T_POS_2_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_T_POS_3_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_T_POS_5_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_T_POS_4_DIGIT: STD_LOGIC;
	signal MS_ADDR_GEN_TP_08_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_TP_18_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_TP_24_BIT: STD_LOGIC;
	signal MS_ADDR_GEN_TP_48_BIT: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AddrGenUPTP port map(
		FPGA_CLK => FPGA_CLK,
		PS_INDEX_CTRL_NUMBER_ONE => PS_INDEX_CTRL_NUMBER_ONE,
		PS_INDEX_CTRL_NUMBER_TWO => PS_INDEX_CTRL_NUMBER_TWO,
		PS_A_RING_1_TIME => PS_A_RING_1_TIME,
		PS_ADDR_SCNR_2_POS => PS_ADDR_SCNR_2_POS,
		PS_ADDR_SCNR_3_POS => PS_ADDR_SCNR_3_POS,
		PS_RO_INDEX_AR => PS_RO_INDEX_AR,
		PS_ADDR_SCNR_4_POS => PS_ADDR_SCNR_4_POS,
		PS_ADDR_SCNR_5_POS => PS_ADDR_SCNR_5_POS,
		MS_H_POS_C_INDEX_TAG => MS_H_POS_C_INDEX_TAG,
		PS_H_POS_C_INDEX_TAG => PS_H_POS_C_INDEX_TAG,
		MS_H_POS_B_INDEX_TAG => MS_H_POS_B_INDEX_TAG,
		MS_H_POS_A_INDEX_TAG => MS_H_POS_A_INDEX_TAG,
		PS_H_POS_A_INDEX_TAG => PS_H_POS_A_INDEX_TAG,
		MS_T_POS_B_INDEX_TAG => MS_T_POS_B_INDEX_TAG,
		PS_T_POS_B_INDEX_TAG => PS_T_POS_B_INDEX_TAG,
		PS_H_POS_B_INDEX_TAG => PS_H_POS_B_INDEX_TAG,
		MS_ADDR_GEN_UP_04_BIT => MS_ADDR_GEN_UP_04_BIT,
		MS_ADDR_GEN_UP_08_BIT => MS_ADDR_GEN_UP_08_BIT,
		MS_ADDR_GEN_UP_02_BIT => MS_ADDR_GEN_UP_02_BIT,
		MS_ADDR_GEN_UP_01_BIT => MS_ADDR_GEN_UP_01_BIT,
		MS_ADDR_GEN_UP_18_BIT => MS_ADDR_GEN_UP_18_BIT,
		MS_ADDR_GEN_UP_12_BIT => MS_ADDR_GEN_UP_12_BIT,
		MS_ADDR_GEN_U_POS_5_DIGIT => MS_ADDR_GEN_U_POS_5_DIGIT,
		MS_ADDR_GEN_U_POS_0_DIGIT => MS_ADDR_GEN_U_POS_0_DIGIT,
		MS_ADDR_GEN_UP_24_BIT => MS_ADDR_GEN_UP_24_BIT,
		MS_ADDR_GEN_UP_48_BIT => MS_ADDR_GEN_UP_48_BIT,
		MS_ADDR_GEN_T_POS_2_DIGIT => MS_ADDR_GEN_T_POS_2_DIGIT,
		MS_ADDR_GEN_T_POS_3_DIGIT => MS_ADDR_GEN_T_POS_3_DIGIT,
		MS_ADDR_GEN_T_POS_5_DIGIT => MS_ADDR_GEN_T_POS_5_DIGIT,
		MS_ADDR_GEN_T_POS_4_DIGIT => MS_ADDR_GEN_T_POS_4_DIGIT,
		MS_ADDR_GEN_TP_08_BIT => MS_ADDR_GEN_TP_08_BIT,
		MS_ADDR_GEN_TP_18_BIT => MS_ADDR_GEN_TP_18_BIT,
		MS_ADDR_GEN_TP_24_BIT => MS_ADDR_GEN_TP_24_BIT,
		MS_ADDR_GEN_TP_48_BIT => MS_ADDR_GEN_TP_48_BIT);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable uptv: std_logic_vector(7 downto 0);
   variable tptv: std_logic_vector(4 downto 0);
   variable hc, hb, ha, tb, ro: std_logic;

   begin

   -- Your test bench code
   
   testName := "14.50.04.1        ";
   
   for i in 0 to 255 loop
       uptv := std_logic_vector(to_unsigned(i,uptv'length));
       PS_A_RING_1_TIME <= uptv(0); -- a
       PS_INDEX_CTRL_NUMBER_ONE <= uptv(1); -- b
       PS_ADDR_SCNR_2_POS <= uptv(2); -- c
       PS_ADDR_SCNR_3_POS <= uptv(3); -- d
       PS_INDEX_CTRL_NUMBER_TWO <= uptv(4); -- f 
       PS_ADDR_SCNR_4_POS <= uptv(5); -- g
       PS_ADDR_SCNR_5_POS <= uptv(6); -- h
       PS_RO_INDEX_AR <= uptv(7);  -- e
       wait for 30 ns;
       check1(MS_ADDR_GEN_UP_18_BIT,NOT(uptv(7) and uptv(0) and uptv(1)),testName,"UP 18");
       check1(MS_ADDR_GEN_UP_04_BIT,NOT(uptv(7) and uptv(0) and uptv(4)),testName,"UP 04");
       check1(MS_ADDR_GEN_UP_08_BIT,NOT(uptv(7) and uptv(2) and uptv(1)),testName,"UP 08");
       check1(MS_ADDR_GEN_UP_12_BIT,NOT(uptv(7) and uptv(2) and uptv(4)),testName,"UP 12");
       check1(MS_ADDR_GEN_UP_48_BIT,NOT(uptv(7) and uptv(3) and uptv(1)),testName,"UP 48");
       check1(MS_ADDR_GEN_UP_02_BIT,NOT(uptv(7) and uptv(3) and uptv(4)),testName,"UP 02");
       check1(MS_ADDR_GEN_UP_24_BIT,NOT(uptv(7) and uptv(5) and uptv(1)),testName,"UP 02");
       check1(MS_ADDR_GEN_UP_01_BIT,NOT(uptv(7) and uptv(5) and uptv(4)),testName,"UP 02");
       check1(MS_ADDR_GEN_U_POS_5_DIGIT,NOT(uptv(7) and uptv(6) and uptv(1)),testName,"U 5");
       check1(MS_ADDR_GEN_U_POS_0_DIGIT,NOT(uptv(7) and uptv(6) and uptv(4)),testName,"U 0");
       
   end loop;
   
   testName := "14.50.05.1, 06.1  ";
   
   for i in 0 to 31 loop
      tptv := std_logic_vector(to_unsigned(i,tptv'length));
      hc := tptv(0);
      hb := tptv(1);
      ha := tptv(2);
      tb := tptv(3);
      ro := tptv(4);
      
      PS_H_POS_C_INDEX_TAG <= hc;
      MS_H_POS_C_INDEX_TAG <= not hc;
      PS_H_POS_B_INDEX_TAG <= hb;
      MS_H_POS_B_INDEX_TAG <= not hb;
      PS_H_POS_A_INDEX_TAG <= ha;
      MS_H_POS_A_INDEX_TAG <= not ha;
      PS_T_POS_B_INDEX_TAG <= tb;
      MS_T_POS_B_INDEX_TAG <= not tb;
      PS_RO_INDEX_AR <= ro;
      wait for 30ns;
      
      check1(MS_ADDR_GEN_T_POS_2_DIGIT,NOT(ro and hc and not hb and not ha and not tb),
         testName,"TP 2 Digit");
      check1(MS_ADDR_GEN_T_POS_3_DIGIT,NOT(ro and hc and not hb and not ha and tb),
         testName,"TP 3 Digit");
      check1(MS_ADDR_GEN_T_POS_4_DIGIT,NOT(ro and not hc and not hb and ha and not tb),
         testName,"TP 4 Digit");
      check1(MS_ADDR_GEN_T_POS_5_DIGIT,NOT(ro and not hc and not hb and ha and tb),
         testName,"TP 5 Digit");
      check1(MS_ADDR_GEN_TP_24_BIT,NOT(ro and not hc and hb and not ha and not tb),
         testName,"TP 24 BIT");
      check1(MS_ADDR_GEN_TP_48_BIT,NOT(ro and not hc and hb and not ha and tb),
         testName,"TP 48 BIT");
      check1(MS_ADDR_GEN_TP_08_BIT,NOT(ro and hc and hb and ha and not tb),
         testName,"TP 08 BIT");
      check1(MS_ADDR_GEN_TP_18_BIT,NOT(ro and hc and hb and ha and tb),
         testName,"TP 18 BIT");
         
         
         
   end loop;
   

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
