-- Test Bench VHDL for IBM SMS ALD page 45.20.06.1
-- Title: CONSOLE CYCLE CTRL MATRIX X4-X6
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/29/2020 8:11:39 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_20_06_1_CONSOLE_CYCLE_CTRL_MATRIX_X4_X6_tb is
end ALD_45_20_06_1_CONSOLE_CYCLE_CTRL_MATRIX_X4_X6_tb;

architecture behavioral of ALD_45_20_06_1_CONSOLE_CYCLE_CTRL_MATRIX_X4_X6_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_20_06_1_CONSOLE_CYCLE_CTRL_MATRIX_X4_X6
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_ADDRESS_SET_COMPLETE:	 in STD_LOGIC;
		PS_CONS_MX_Y_DRIVE_2:	 in STD_LOGIC;
		MS_END_STOP_DATA:	 in STD_LOGIC;
		PS_CONS_MX_X_DRIVE_1:	 in STD_LOGIC;
		MS_CONS_MX_X_DC_RESET:	 in STD_LOGIC;
		MS_DISPLAY_ADDR_COMPLETE:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		MS_CONS_MX_30_POS:	 in STD_LOGIC;
		PS_CONS_MX_X3_POS:	 in STD_LOGIC;
		MS_CONS_ALTER_MX_GATE:	 in STD_LOGIC;
		MS_CONS_INQUIRY_MX_GATE:	 in STD_LOGIC;
		MS_CONS_PRG_PRT_OUT_MX_GATE:	 in STD_LOGIC;
		PS_CONS_CLOCK_4_POS:	 in STD_LOGIC;
		MS_CONS_MX_X6_POS:	 out STD_LOGIC;
		PS_CONS_MX_X6_POS:	 out STD_LOGIC;
		PS_CONS_MX_X5_POS:	 out STD_LOGIC;
		MS_CONS_GATE_POS_30:	 out STD_LOGIC;
		PS_CONS_MX_X4_POS:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_ADDRESS_SET_COMPLETE: STD_LOGIC := '1';
	signal PS_CONS_MX_Y_DRIVE_2: STD_LOGIC := '0';
	signal MS_END_STOP_DATA: STD_LOGIC := '1';
	signal PS_CONS_MX_X_DRIVE_1: STD_LOGIC := '0';
	signal MS_CONS_MX_X_DC_RESET: STD_LOGIC := '1';
	signal MS_DISPLAY_ADDR_COMPLETE: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal MS_CONS_MX_30_POS: STD_LOGIC := '1';
	signal PS_CONS_MX_X3_POS: STD_LOGIC := '0';
	signal MS_CONS_ALTER_MX_GATE: STD_LOGIC := '1';
	signal MS_CONS_INQUIRY_MX_GATE: STD_LOGIC := '1';
	signal MS_CONS_PRG_PRT_OUT_MX_GATE: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_4_POS: STD_LOGIC := '0';

	-- Outputs

	signal MS_CONS_MX_X6_POS: STD_LOGIC;
	signal PS_CONS_MX_X6_POS: STD_LOGIC;
	signal PS_CONS_MX_X5_POS: STD_LOGIC;
	signal MS_CONS_GATE_POS_30: STD_LOGIC;
	signal PS_CONS_MX_X4_POS: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_20_06_1_CONSOLE_CYCLE_CTRL_MATRIX_X4_X6 port map(
		FPGA_CLK => FPGA_CLK,
		MS_ADDRESS_SET_COMPLETE => MS_ADDRESS_SET_COMPLETE,
		PS_CONS_MX_Y_DRIVE_2 => PS_CONS_MX_Y_DRIVE_2,
		MS_END_STOP_DATA => MS_END_STOP_DATA,
		PS_CONS_MX_X_DRIVE_1 => PS_CONS_MX_X_DRIVE_1,
		MS_CONS_MX_X_DC_RESET => MS_CONS_MX_X_DC_RESET,
		MS_DISPLAY_ADDR_COMPLETE => MS_DISPLAY_ADDR_COMPLETE,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		MS_CONS_MX_30_POS => MS_CONS_MX_30_POS,
		PS_CONS_MX_X3_POS => PS_CONS_MX_X3_POS,
		MS_CONS_ALTER_MX_GATE => MS_CONS_ALTER_MX_GATE,
		MS_CONS_INQUIRY_MX_GATE => MS_CONS_INQUIRY_MX_GATE,
		MS_CONS_PRG_PRT_OUT_MX_GATE => MS_CONS_PRG_PRT_OUT_MX_GATE,
		PS_CONS_CLOCK_4_POS => PS_CONS_CLOCK_4_POS,
		MS_CONS_MX_X6_POS => MS_CONS_MX_X6_POS,
		PS_CONS_MX_X6_POS => PS_CONS_MX_X6_POS,
		PS_CONS_MX_X5_POS => PS_CONS_MX_X5_POS,
		MS_CONS_GATE_POS_30 => MS_CONS_GATE_POS_30,
		PS_CONS_MX_X4_POS => PS_CONS_MX_X4_POS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   variable setX4, setMGL, setX5, setX6, resetX6: std_logic;
   
   begin

   -- Your test bench code

   -- It was too hard to test this with both X and Y drives at the same time
   -- So, first test with X drive

   testName := "45.20.06.1 X DRIVE";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      c := tv(1);
      f := tv(2);
      h := tv(3);
      j := tv(4);
      k := tv(5);
      l := tv(6);
      m := tv(7);
      n := tv(8);
      
      setX4 := j;
      setMGL := (k or l or m) and n;

      -- Reset the X triggers (X6 actually SETS) and the Matrix Gate Latch
      
      MS_CONS_MX_X_DC_RESET <= '0';
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_CONS_MX_X_DC_RESET <= '1';
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
            
      check1(PS_CONS_MX_X4_POS,'0',testName,"Init X4");
      check1(PS_CONS_MX_X5_POS,'0',testName,"Init X5");
      check1(PS_CONS_MX_X6_POS,'1',testName,"Init +S X6");
      check1(MS_CONS_MX_X6_POS,'0',testName,"Init -S X6");
      check1(MS_CONS_GATE_POS_30,'1',testName,"Init MGL");
                  
      -- Maybe set the X4 Trigger and/or the Matrix Gate Latch
      
		MS_ADDRESS_SET_COMPLETE <= '1'; -- Keep this from confusing X6 tests
      MS_END_STOP_DATA <= not c;
      MS_DISPLAY_ADDR_COMPLETE <= not f;
      PS_CONS_MX_X3_POS <= j;
      MS_CONS_ALTER_MX_GATE <= not k;
      MS_CONS_INQUIRY_MX_GATE <= not l;
      MS_CONS_PRG_PRT_OUT_MX_GATE <= not m;
      PS_CONS_CLOCK_4_POS <= n;      
      wait for 30 ns;
      
      check1(MS_CONS_GATE_POS_30,not(setMGL),testName,"Set MGL");
      
      -- Run the clock
      
      PS_CONS_MX_X_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_X_DRIVE_1 <= '0';
      wait for 90 ns;

      -- Check if X4 did the right thing...
      
      check1(PS_CONS_MX_X4_POS,setX4,testName,"Set X4");
      
      -- Make suer we don't force X5 to reset or X4 to set again
      
      MS_END_STOP_DATA <= '1';
      PS_CONS_MX_X3_POS <= '0'; -- Would have reset upon setting X4 anyway
      
      -- Maybe set X5 (and reset X4)
      
      PS_CONS_MX_X_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_X_DRIVE_1 <= '0';
      wait for 90 ns;

      setX5 := setX4;

      check1(PS_CONS_MX_X4_POS,'0',testName,"Reset X4");
      check1(PS_CONS_MX_X5_POS,setX5,testName,"Set X5");
      
      -- On the next X clock, X5 should be reset and X6 should set (if X5 was set)
      
      PS_CONS_MX_X_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_X_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_X5_POS,'0',testName,"Reset X5");
      
      check1(PS_CONS_MX_X6_POS,setX5,testName,"Set +S X6");
      check1(MS_CONS_MX_X6_POS,not(PS_CONS_MX_X6_POS),testName,"Set -S X6");
      
      -- One more and X6 should reset (if it was not set from X5 it already is reset)

      PS_CONS_MX_X_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_X_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_X6_POS,'0',testName,"Reset +S X6");
      check1(MS_CONS_MX_X6_POS,not(PS_CONS_MX_X6_POS),testName,"Reset -S X6");
      
      -- X6 can set another way, so test that
      
		MS_ADDRESS_SET_COMPLETE <= not a;
		wait for 30 ns;
		
      check1(PS_CONS_MX_X5_POS,'0',testName,"Reset X5 Verify");
		
      PS_CONS_MX_X_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_X_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_X6_POS,a,testName,"Set +S X6 #2");
      check1(MS_CONS_MX_X6_POS,not(PS_CONS_MX_X6_POS),testName,"Set -S X6 #2");
      
      -- Reset variables for the next iteration
            
		MS_ADDRESS_SET_COMPLETE <= '1';
      MS_END_STOP_DATA <= '1';
      MS_DISPLAY_ADDR_COMPLETE <= '1';
      PS_CONS_MX_X3_POS <= '0';
      MS_CONS_ALTER_MX_GATE <= '1';
      MS_CONS_INQUIRY_MX_GATE <= '1';
      MS_CONS_PRG_PRT_OUT_MX_GATE <= '1';
      PS_CONS_CLOCK_4_POS <= '0';   
      
      -- Maybe reset the Matrix Gate Latch
      
      MS_CONS_MX_30_POS <= not h;
      wait for 30 ns;
      MS_CONS_MX_30_POS <= '1';
      wait for 30 ns;
      
      check1(MS_CONS_GATE_POS_30,not(setMGL and not h),testName,"Reset MGL");   
                                          
   end loop;
   
   -- Now, test the Y Drive.  Only involves X5 and X6

   testName := "45.20.06.1 Y DRIVE";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      c := tv(1);
      f := tv(2);
      h := tv(3);
      j := tv(4);
      k := tv(5);
      l := tv(6);
      m := tv(7);
      n := tv(8);
      
      setMGL := (k or l or m) and n;

      -- Reset the X triggers (X6 actually SETS) and the Matrix Gate Latch
      
      MS_CONS_MX_X_DC_RESET <= '0';
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_CONS_MX_X_DC_RESET <= '1';
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
            
      check1(PS_CONS_MX_X5_POS,'0',testName,"Init X5");
      check1(PS_CONS_MX_X6_POS,'1',testName,"Init +S X6");
      check1(MS_CONS_MX_X6_POS,'0',testName,"Init -S X6");
      check1(MS_CONS_GATE_POS_30,'1',testName,"Init MGL");
                        
		MS_ADDRESS_SET_COMPLETE <= a;
      MS_END_STOP_DATA <= '1'; -- Avoid confusing X5 Set Test
      MS_DISPLAY_ADDR_COMPLETE <= not f;
      PS_CONS_MX_X3_POS <= j;
      MS_CONS_ALTER_MX_GATE <= not k;
      MS_CONS_INQUIRY_MX_GATE <= not l;
      MS_CONS_PRG_PRT_OUT_MX_GATE <= not m;
      PS_CONS_CLOCK_4_POS <= n;      
      wait for 30 ns;
      
      check1(MS_CONS_GATE_POS_30,not(setMGL),testName,"Set MGL");
      
      -- Run the clock, maybe setting X5 (and resetting X6)
      
      PS_CONS_MX_Y_DRIVE_2 <= '1';
      wait for 90 ns;
      PS_CONS_MX_Y_DRIVE_2 <= '0';
      wait for 90 ns;
      
      check1(PS_CONS_MX_X5_POS,setMGL or f,testName,"Set X5");
      check1(PS_CONS_MX_X6_POS,not(setMGL or f),testName,"Reset +S X6");
      check1(MS_CONS_MX_X6_POS,not PS_CONS_MX_X6_POS,testName,"Reset -S X6");
      
      -- Now, maybe advance to the End Stop, resetting X5 and setting X6
      
      MS_END_STOP_DATA <= not c;
      MS_DISPLAY_ADDR_COMPLETE <= '1';  -- Avoid confusing reset X5 / set X6

      -- Reset the MGL so it doesn't mess up this test as well

      PS_CONS_CLOCK_4_POS <= '0';
      MS_CONS_MX_30_POS <= '0';
      wait for 30 ns;
      MS_CONS_MX_30_POS <= '1';
      wait for 30 ns;
      
      check1(MS_CONS_GATE_POS_30,'1',testName,"Reset MGL");         
      
      PS_CONS_MX_Y_DRIVE_2 <= '1';
      wait for 90 ns;
      PS_CONS_MX_Y_DRIVE_2 <= '0';
      wait for 90 ns;
      
      check1(PS_CONS_MX_X5_POS,(setMGL or f) and not c,testName,"Reset X5");
      check1(PS_CONS_MX_X6_POS,c or not(setMGL or f),testName,"Set +S X6");
      check1(MS_CONS_MX_X6_POS,not PS_CONS_MX_X6_POS,testName,"Set -S X6");            
      
      -- Reset the variables for the next iteration

		MS_ADDRESS_SET_COMPLETE <= '1';
      MS_END_STOP_DATA <= '1';
      MS_DISPLAY_ADDR_COMPLETE <= '1';
      PS_CONS_MX_X3_POS <= '0';
      MS_CONS_ALTER_MX_GATE <= '1';
      MS_CONS_INQUIRY_MX_GATE <= '1';
      MS_CONS_PRG_PRT_OUT_MX_GATE <= '1';
      PS_CONS_CLOCK_4_POS <= '0';   
      
   end loop;

   
   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
