-- VHDL for IBM SMS ALD page 15.39.07.1
-- Title: A DATA REG C BIT AND DRIVE-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/9/2020 11:22:44 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_39_07_1_A_DATA_REG_C_BIT_AND_DRIVE_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_RESET_A_DATA_REG:	 in STD_LOGIC;
		PS_B_CH_NOT_C_BIT:	 in STD_LOGIC;
		PS_SW_B_CH_TO_A_REG:	 in STD_LOGIC;
		PS_AR_EXIT_CH_C_BIT:	 in STD_LOGIC;
		PS_SW_AR_EXIT_CH_TO_A_REG:	 in STD_LOGIC;
		PS_GATE_A_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_E2_REG_C_BIT:	 in STD_LOGIC;
		PS_GATE_E2_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_GATE_OP_MOD_REG_TO_A_CH:	 in STD_LOGIC;
		PS_OP_MOD_REG_C_BIT:	 in STD_LOGIC;
		PS_F2_REG_C_BIT:	 in STD_LOGIC;
		PS_GATE_F2_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_A_DATA_REG_C_BIT:	 out STD_LOGIC;
		PS_A_CH_C_BIT:	 out STD_LOGIC;
		PS_A_CH_NOT_C_BIT:	 out STD_LOGIC;
		LAMP_11C8D12:	 out STD_LOGIC);
end ALD_15_39_07_1_A_DATA_REG_C_BIT_AND_DRIVE_ACC;

architecture behavioral of ALD_15_39_07_1_A_DATA_REG_C_BIT_AND_DRIVE_ACC is 

	signal OUT_5A_G: STD_LOGIC;
	signal OUT_5A_G_Latch: STD_LOGIC;
	signal OUT_4A_A: STD_LOGIC;
	signal OUT_4A_A_Latch: STD_LOGIC;
	signal OUT_2A_D: STD_LOGIC;
	signal OUT_5B_NoPin: STD_LOGIC;
	signal OUT_5C_G: STD_LOGIC;
	signal OUT_4C_E: STD_LOGIC;
	signal OUT_5D_C: STD_LOGIC;
	signal OUT_4D_D: STD_LOGIC;
	signal OUT_3D_A: STD_LOGIC;
	signal OUT_2D_A: STD_LOGIC;
	signal OUT_5E_D: STD_LOGIC;
	signal OUT_5F_K: STD_LOGIC;
	signal OUT_5G_G: STD_LOGIC;
	signal OUT_4G_K: STD_LOGIC;
	signal OUT_DOT_4D: STD_LOGIC;

begin

	OUT_5A_G_Latch <= NOT(OUT_4A_A AND OUT_4C_E AND OUT_5B_NoPin );
	OUT_4A_A_Latch <= NOT(OUT_5A_G AND MS_RESET_A_DATA_REG );
	OUT_2A_D <= NOT OUT_3D_A;
	LAMP_11C8D12 <= OUT_2A_D;
	OUT_5B_NoPin <= NOT(PS_B_CH_NOT_C_BIT AND PS_SW_B_CH_TO_A_REG );
	OUT_5C_G <= NOT(PS_AR_EXIT_CH_C_BIT );
	OUT_4C_E <= NOT(OUT_5C_G AND PS_SW_AR_EXIT_CH_TO_A_REG );
	OUT_5D_C <= NOT(OUT_4A_A AND PS_GATE_A_DATA_REG_TO_A_CH );
	OUT_4D_D <= NOT(OUT_5D_C AND OUT_5E_D AND OUT_5F_K );

	SMS_AEK_3D: entity SMS_AEK
	    port map (
		IN1 => OUT_DOT_4D,	-- Pin F
		OUT1 => OUT_3D_A,
		IN2 => OPEN );


	SMS_AEK_2D: entity SMS_AEK
	    port map (
		IN1 => OUT_3D_A,	-- Pin F
		OUT1 => OUT_2D_A,
		IN2 => OPEN );

	OUT_5E_D <= NOT(PS_E2_REG_C_BIT AND PS_GATE_E2_DATA_REG_TO_A_CH );
	OUT_5F_K <= NOT(PS_GATE_OP_MOD_REG_TO_A_CH AND PS_OP_MOD_REG_C_BIT );
	OUT_5G_G <= NOT(PS_F2_REG_C_BIT AND PS_GATE_F2_DATA_REG_TO_A_CH );
	OUT_4G_K <= NOT(OUT_5G_G );
	OUT_DOT_4D <= OUT_4D_D OR OUT_4G_K;

	PS_A_DATA_REG_C_BIT <= OUT_4A_A;
	PS_A_CH_NOT_C_BIT <= OUT_3D_A;
	PS_A_CH_C_BIT <= OUT_2D_A;

	Latch_5A: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5A_G_Latch,
		Q => OUT_5A_G,
		QBar => OPEN );

	Latch_4A: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4A_A_Latch,
		Q => OUT_4A_A,
		QBar => OPEN );


end;
