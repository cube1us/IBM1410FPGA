-- Test Bench VHDL for IBM SMS ALD page 40.10.03.1
-- Title: 1*OFF-NORMAL IND + STORAGE SCAN S
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/8/2020 5:13:05 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_40_10_03_1_1_OFF_NORMAL_IND_STORAGE_SCAN_S_tb is
end ALD_40_10_03_1_1_OFF_NORMAL_IND_STORAGE_SCAN_S_tb;

architecture behavioral of ALD_40_10_03_1_1_OFF_NORMAL_IND_STORAGE_SCAN_S_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_40_10_03_1_1_OFF_NORMAL_IND_STORAGE_SCAN_S
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MV_36_VOLTS:	 in STD_LOGIC;
		MV_CONS_MODE_SW_CE_MODE:	 in STD_LOGIC;
		MV_CONS_MODE_SW_ADDR_SET_MODE:	 in STD_LOGIC;
		SWITCH_TOG_AUTO_START_PL1:	 in STD_LOGIC;
		SWITCH_ROT_ADDR_ENTRY_DK1:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_WR_INHIBIT_PL1:	 in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK1:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_CYCLE_CTRL_DK1:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_ENTRY_DKA:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_CHECK_CTRL_DK1:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_INHIBIT_PO_PL1:	 in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK4:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_TOG_ASTERISK_PL1:	 in STD_LOGIC;
		SWITCH_ROT_STOR_SCAN_DK3:	 in STD_LOGIC_VECTOR(12 downTo 0);
		SWITCH_ROT_ADDR_ENTRY_DK2:	 in STD_LOGIC_VECTOR(12 downTo 0);
		MC_DISK_WRITE_NORMAL_STAR_F_CH:	 out STD_LOGIC;
		MC_DISK_WRITE_NORMAL_STAR_E_CH:	 out STD_LOGIC;
		MV_STORAGE_SCAN_MODE_1:	 out STD_LOGIC;
		MV_STORAGE_SCAN_MODE_2:	 out STD_LOGIC;
		MV_CONS_CE_POUND_PRINT:	 out STD_LOGIC;
		LAMP_15A1K21:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MV_36_VOLTS: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_CE_MODE: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_ADDR_SET_MODE: STD_LOGIC := '1';
	signal SWITCH_TOG_AUTO_START_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_ADDR_ENTRY_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_WR_INHIBIT_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_CYCLE_CTRL_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_ENTRY_DKA: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_CHECK_CTRL_DK1: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_INHIBIT_PO_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK4: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_TOG_ASTERISK_PL1: STD_LOGIC := '0';
	signal SWITCH_ROT_STOR_SCAN_DK3: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";
	signal SWITCH_ROT_ADDR_ENTRY_DK2: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";

	-- Outputs

	signal MC_DISK_WRITE_NORMAL_STAR_F_CH: STD_LOGIC;
	signal MC_DISK_WRITE_NORMAL_STAR_E_CH: STD_LOGIC;
	signal MV_STORAGE_SCAN_MODE_1: STD_LOGIC;
	signal MV_STORAGE_SCAN_MODE_2: STD_LOGIC;
	signal MV_CONS_CE_POUND_PRINT: STD_LOGIC;
	signal LAMP_15A1K21: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_40_10_03_1_1_OFF_NORMAL_IND_STORAGE_SCAN_S port map(
		FPGA_CLK => FPGA_CLK,
		MV_36_VOLTS => MV_36_VOLTS,
		MV_CONS_MODE_SW_CE_MODE => MV_CONS_MODE_SW_CE_MODE,
		MV_CONS_MODE_SW_ADDR_SET_MODE => MV_CONS_MODE_SW_ADDR_SET_MODE,
		SWITCH_TOG_AUTO_START_PL1 => SWITCH_TOG_AUTO_START_PL1,
		SWITCH_ROT_ADDR_ENTRY_DK1 => SWITCH_ROT_ADDR_ENTRY_DK1,
		SWITCH_TOG_WR_INHIBIT_PL1 => SWITCH_TOG_WR_INHIBIT_PL1,
		SWITCH_ROT_STOR_SCAN_DK1 => SWITCH_ROT_STOR_SCAN_DK1,
		SWITCH_ROT_CYCLE_CTRL_DK1 => SWITCH_ROT_CYCLE_CTRL_DK1,
		SWITCH_ROT_ADDR_ENTRY_DKA => SWITCH_ROT_ADDR_ENTRY_DKA,
		SWITCH_ROT_CHECK_CTRL_DK1 => SWITCH_ROT_CHECK_CTRL_DK1,
		SWITCH_TOG_INHIBIT_PO_PL1 => SWITCH_TOG_INHIBIT_PO_PL1,
		SWITCH_ROT_STOR_SCAN_DK4 => SWITCH_ROT_STOR_SCAN_DK4,
		SWITCH_TOG_ASTERISK_PL1 => SWITCH_TOG_ASTERISK_PL1,
		SWITCH_ROT_STOR_SCAN_DK3 => SWITCH_ROT_STOR_SCAN_DK3,
		SWITCH_ROT_ADDR_ENTRY_DK2 => SWITCH_ROT_ADDR_ENTRY_DK2,
		MC_DISK_WRITE_NORMAL_STAR_F_CH => MC_DISK_WRITE_NORMAL_STAR_F_CH,
		MC_DISK_WRITE_NORMAL_STAR_E_CH => MC_DISK_WRITE_NORMAL_STAR_E_CH,
		MV_STORAGE_SCAN_MODE_1 => MV_STORAGE_SCAN_MODE_1,
		MV_STORAGE_SCAN_MODE_2 => MV_STORAGE_SCAN_MODE_2,
		MV_CONS_CE_POUND_PRINT => MV_CONS_CE_POUND_PRINT,
		LAMP_15A1K21 => LAMP_15A1K21);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable tvAddrEntry, tvStorScan, tvCycleCtrl, tvCheckCtrl: std_logic_vector(12 downto 0);
   
   begin

   -- Your test bench code

   testName := "40.10.03.1        ";

   for tt in 0 to 2**6 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      b := tv(0);
      c := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);

		MV_CONS_MODE_SW_CE_MODE <= not b;
		MV_CONS_MODE_SW_ADDR_SET_MODE <= not c;
		
		SWITCH_TOG_AUTO_START_PL1 <= not d; -- This switch appears to be active LOW.
		SWITCH_TOG_WR_INHIBIT_PL1 <= e;
		SWITCH_TOG_INHIBIT_PO_PL1 <= not f;  -- This switch is active low
		SWITCH_TOG_ASTERISK_PL1 <= not g;    -- This switch is active low
		
      for addrEntry in 1 to 7 loop
   		tvAddrEntry := "0000000000000";
         tvAddrEntry(addrEntry) := '1';
         SWITCH_ROT_ADDR_ENTRY_DK1 <= tvAddrEntry;
         SWITCH_ROT_ADDR_ENTRY_DKA <= tvAddrEntry;
         -- Deck 2 is fed from Address Set Mode switch
         if(c = '1') then
            SWITCH_ROT_ADDR_ENTRY_DK2 <= tvAddrEntry;
         else
            SWITCH_ROT_ADDR_ENTRY_DK2 <= "0000000000000";            
         end if;                  
         
         for storScan in 1 to 5 loop
      		tvStorScan := "0000000000000";
            tvStorScan(storScan) := '1';
            SWITCH_ROT_STOR_SCAN_DK1 <= tvStorScan;
            -- Decks 3 and 4 are fed from Console Mode Switch in CE position
            if(b = '1') then
               SWITCH_ROT_STOR_SCAN_DK3 <= tvStorScan;
               SWITCH_ROT_STOR_SCAN_DK4 <= tvStorScan;
            else
               SWITCH_ROT_STOR_SCAN_DK3 <= "0000000000000";
               SWITCH_ROT_STOR_SCAN_DK4 <= "0000000000000";
            end if;
            
            for cycleCtrl in 1 to 3 loop
         		tvCycleCtrl := "0000000000000";
               tvCycleCtrl(cycleCtrl) := '1';
               SWITCH_ROT_CYCLE_CTRL_DK1 <= tvCycleCtrl;
               
               for checkCtrl in 1 to 3 loop
            		tvCheckCtrl := "0000000000000";               
                  tvCheckCtrl(checkCtrl) := '1';
                  SWITCH_ROT_CHECK_CTRL_DK1 <= tvCheckCtrl;
                  
                  wait for 30 ns;
               
                  check1(MC_DISK_WRITE_NORMAL_STAR_F_CH,e,testname,"Disk Write Normal F Ch");
                  check1(MC_DISK_WRITE_NORMAL_STAR_E_CH,e,testname,"Disk Write Normal E Ch");
                  
                  -- The off normal lamp has no driver or inverter in front of it, so it
                  -- has backwards logic - lit on -V
                  
                  check1(LAMP_15A1K21,e or d or tvAddrEntry(1) or  tvAddrEntry(2) or
                     tvAddrEntry(3) or tvAddrEntry(4) or tvAddrEntry(6) or tvAddrEntry(7) or
                     tvStorScan(1) or tvStorScan(2) or tvStorScan(4) or tvStorScan(5) or
                     tvCycleCtrl(1) or tvCycleCtrl(3) or tvCheckCtrl(1) or tvCheckCtrl(3) or
                     not f or not g,testName,"Off Normal");
               
                  check1(MV_STORAGE_SCAN_MODE_1,
                     not((tvStorScan(1) or tvStorScan(2) or tvStorScan(4) or tvStorScan(5)) and b),
                     testName,"Storage Scan Mode 1");
               
                  check1(MV_STORAGE_SCAN_MODE_2,MV_STORAGE_SCAN_MODE_1,                        
                        testName,"Storage Scan Mode 1");
                        
                  check1(MV_CONS_CE_POUND_PRINT,
                     not(((tvAddrEntry(1) or tvAddrEntry(2) or tvAddrEntry(3) or
                     tvAddrEntry(4) or tvAddrEntry(6) or tvAddrEntry(7)) and c) or 
                     ((tvStorScan(1) or tvStorScan(2) or tvStorScan(4) or tvStorScan(5)) and b)),
                     testName,"CONS CE # Print");        
               
               end loop;

            end loop;
            
         end loop;
                           
      end loop;   
            
      wait for 30 ns;
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

end;
