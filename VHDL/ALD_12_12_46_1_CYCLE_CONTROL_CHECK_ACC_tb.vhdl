-- Test Bench VHDL for IBM SMS ALD page 12.12.46.1
-- Title: CYCLE CONTROL CHECK ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 6/27/2020 4:17:51 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_12_12_46_1_CYCLE_CONTROL_CHECK_ACC_tb is
end ALD_12_12_46_1_CYCLE_CONTROL_CHECK_ACC_tb;

architecture behavioral of ALD_12_12_46_1_CYCLE_CONTROL_CHECK_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_12_12_46_1_CYCLE_CONTROL_CHECK_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_A_CYCLE_CTRL:	 in STD_LOGIC;
		MS_C_CYCLE_CTRL:	 in STD_LOGIC;
		MS_B_CYCLE_CTRL:	 in STD_LOGIC;
		MS_D_CYCLE_CTRL:	 in STD_LOGIC;
		PS_1401_CARD_PRINT_IN_PROC:	 in STD_LOGIC;
		MS_F_CH_UNOVLP_IN_PROCESS:	 in STD_LOGIC;
		MS_X_CYCLE_CTRL:	 in STD_LOGIC;
		MS_I_CYCLE_CTRL:	 in STD_LOGIC;
		MS_E_CH_UNOVLP_IN_PROCESS:	 in STD_LOGIC;
		MS_LOGIC_GATE_A_DOT_R_CHECK:	 in STD_LOGIC;
		PS_PROCESS_ROUTINE:	 in STD_LOGIC;
		PS_E_CYCLE_CTRL:	 in STD_LOGIC;
		PS_F_CYCLE_CTRL:	 in STD_LOGIC;
		MS_CYCLE_CHECK_ERROR:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_A_CYCLE_CTRL: STD_LOGIC := '1';
	signal MS_C_CYCLE_CTRL: STD_LOGIC := '1';
	signal MS_B_CYCLE_CTRL: STD_LOGIC := '1';
	signal MS_D_CYCLE_CTRL: STD_LOGIC := '1';
	signal PS_1401_CARD_PRINT_IN_PROC: STD_LOGIC := '0';
	signal MS_F_CH_UNOVLP_IN_PROCESS: STD_LOGIC := '1';
	signal MS_X_CYCLE_CTRL: STD_LOGIC := '1';
	signal MS_I_CYCLE_CTRL: STD_LOGIC := '1';
	signal MS_E_CH_UNOVLP_IN_PROCESS: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_A_DOT_R_CHECK: STD_LOGIC := '1';
	signal PS_PROCESS_ROUTINE: STD_LOGIC := '0';
	signal PS_E_CYCLE_CTRL: STD_LOGIC := '0';
	signal PS_F_CYCLE_CTRL: STD_LOGIC := '0';

	-- Outputs

	signal MS_CYCLE_CHECK_ERROR: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   -- Your test bench declarations go here
   
 procedure check1(
      checked: in STD_LOGIC;
      val: in STD_LOGIC;
      testname: in string;
      test: in string) is
      begin    
      assert checked = val report testname & " (" & test & ") failed." severity failure;
      end procedure;          

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_12_12_46_1_CYCLE_CONTROL_CHECK_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_A_CYCLE_CTRL => MS_A_CYCLE_CTRL,
		MS_C_CYCLE_CTRL => MS_C_CYCLE_CTRL,
		MS_B_CYCLE_CTRL => MS_B_CYCLE_CTRL,
		MS_D_CYCLE_CTRL => MS_D_CYCLE_CTRL,
		PS_1401_CARD_PRINT_IN_PROC => PS_1401_CARD_PRINT_IN_PROC,
		MS_F_CH_UNOVLP_IN_PROCESS => MS_F_CH_UNOVLP_IN_PROCESS,
		MS_X_CYCLE_CTRL => MS_X_CYCLE_CTRL,
		MS_I_CYCLE_CTRL => MS_I_CYCLE_CTRL,
		MS_E_CH_UNOVLP_IN_PROCESS => MS_E_CH_UNOVLP_IN_PROCESS,
		MS_LOGIC_GATE_A_DOT_R_CHECK => MS_LOGIC_GATE_A_DOT_R_CHECK,
		PS_PROCESS_ROUTINE => PS_PROCESS_ROUTINE,
		PS_E_CYCLE_CTRL => PS_E_CYCLE_CTRL,
		PS_F_CYCLE_CTRL => PS_F_CYCLE_CTRL,
		MS_CYCLE_CHECK_ERROR => MS_CYCLE_CHECK_ERROR);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   
   begin

   -- Your test bench code
   
   testName := "12.12.46.1        ";
   
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"START");
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"A1");
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"A2");
   PS_PROCESS_ROUTINE <= '1';  -- This stays set for the remainder fo this test
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"A3");
   
   MS_B_CYCLE_CTRL <= '1';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"A4");
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"A5");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"A6");
   

   MS_D_CYCLE_CTRL <= '1';
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"B1");
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"B2");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"A6");

   MS_D_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"C1");
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"C2");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '1';

   
   MS_E_CH_UNOVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"D1");
   MS_X_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D2");
   MS_X_CYCLE_CTRL <= '1';
   MS_I_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D3");
   MS_I_CYCLE_CTRL <= '1';
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D4");
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D5");
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D6");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D7");
   MS_D_CYCLE_CTRL <= '1';
   MS_F_CH_UNOVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"D8");
   
   MS_E_CH_UNOVLP_IN_PROCESS <= '1';
   MS_F_CH_UNOVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"E1");
   MS_X_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E2");
   MS_X_CYCLE_CTRL <= '1';
   MS_I_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E3");
   MS_I_CYCLE_CTRL <= '1';
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E4");
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E5");
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E6");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"E7");
   MS_D_CYCLE_CTRL <= '1';
   
   MS_F_CH_UNOVLP_IN_PROCESS <= '1';
   wait for 30 ns;
   --   If IN Process you must be ONE of A, B, C, D, I, X, ECH UN or F Ch UN
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"F1");
   
   MS_X_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"G1");
   MS_I_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G2");
   MS_I_CYCLE_CTRL <= '1';
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G3");
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G4");
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G5");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G6");
   MS_D_CYCLE_CTRL <= '1';
   
   MS_X_CYCLE_CTRL <= '1';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G1");
   MS_I_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"G2");
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G3");
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G4");
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G5");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"G6");
   MS_D_CYCLE_CTRL <= '1';
   -- Leave I Cycle set
      
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"H1");
   PS_E_CYCLE_CTRL <= '1';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"H2");
   PS_F_CYCLE_CTRL <= '1';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"H3");
   PS_E_CYCLE_CTRL <= '0';
   PS_F_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"H4");
   MS_LOGIC_GATE_A_DOT_R_CHECK <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"H5");
   MS_LOGIC_GATE_A_DOT_R_CHECK <= '1';
   
   -- Now reset I Cycle
   MS_I_CYCLE_CTRL <= '1';
   PS_1401_CARD_PRINT_IN_PROC <= '1';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"I1");
   MS_X_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I2");
   MS_X_CYCLE_CTRL <= '1';
   MS_I_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I3");
   MS_I_CYCLE_CTRL <= '1';
   MS_A_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I4");
   MS_A_CYCLE_CTRL <= '1';
   MS_B_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I5");
   MS_B_CYCLE_CTRL <= '1';
   MS_C_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I6");
   MS_C_CYCLE_CTRL <= '1';
   MS_D_CYCLE_CTRL <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I7");
   MS_D_CYCLE_CTRL <= '1';
   MS_E_CH_UNOVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   -- This succeeeds, probably because 1401 unit record I/O is on the E CH, unoverlapped
   check1(MS_CYCLE_CHECK_ERROR,'1',testName,"I8");
   MS_E_CH_UNOVLP_IN_PROCESS <= '1';
   MS_F_CH_UNOVLP_IN_PROCESS <= '0';
   wait for 30 ns;
   check1(MS_CYCLE_CHECK_ERROR,'0',testName,"I9");
  
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
