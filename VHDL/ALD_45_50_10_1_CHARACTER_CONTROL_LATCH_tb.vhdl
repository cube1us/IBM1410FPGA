-- Test Bench VHDL for IBM SMS ALD page 45.50.10.1
-- Title: CHARACTER CONTROL LATCH
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/3/2020 12:39:57 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_50_10_1_CHARACTER_CONTROL_LATCH_tb is
end ALD_45_50_10_1_CHARACTER_CONTROL_LATCH_tb;

architecture behavioral of ALD_45_50_10_1_CHARACTER_CONTROL_LATCH_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_50_10_1_CHARACTER_CONTROL_LATCH
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		MS_KEYBOARD_LOCK_SET:	 in STD_LOGIC;
		MS_CONS_WM_INPUT_SET:	 in STD_LOGIC;
		PS_CONS_CYCLE_LATCH_RESET:	 in STD_LOGIC;
		MS_KEYBOARD_UNLOCK_SET:	 in STD_LOGIC;
		MS_CONSOLE_OUTPUT_ERROR:	 in STD_LOGIC;
		MS_CONS_PRINTER_NOT_BUSY:	 in STD_LOGIC;
		MS_CONS_PRINTER_END_OF_LINE:	 in STD_LOGIC;
		PS_CONS_BACK_SPACE_CONTROL:	 in STD_LOGIC;
		MS_CONS_WM_CONTROL:	 in STD_LOGIC;
		PS_CONS_CYCLE_LATCH_SET:	 in STD_LOGIC;
		PS_SET_FIRST_CYCLE_LATCH:	 in STD_LOGIC;
		PS_CONS_OUTPUT_WM_BIT:	 in STD_LOGIC;
		PS_CONS_CHAR_CONTROL:	 out STD_LOGIC;
		MS_CONS_CHAR_CONTROL:	 out STD_LOGIC;
		MS_CONS_OUTPUT_WM_BIT:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal MS_KEYBOARD_LOCK_SET: STD_LOGIC := '1';
	signal MS_CONS_WM_INPUT_SET: STD_LOGIC := '1';
	signal PS_CONS_CYCLE_LATCH_RESET: STD_LOGIC := '0';
	signal MS_KEYBOARD_UNLOCK_SET: STD_LOGIC := '1';
	signal MS_CONSOLE_OUTPUT_ERROR: STD_LOGIC := '1';
	signal MS_CONS_PRINTER_NOT_BUSY: STD_LOGIC := '1';
	signal MS_CONS_PRINTER_END_OF_LINE: STD_LOGIC := '1';
	signal PS_CONS_BACK_SPACE_CONTROL: STD_LOGIC := '0';
	signal MS_CONS_WM_CONTROL: STD_LOGIC := '1';
	signal PS_CONS_CYCLE_LATCH_SET: STD_LOGIC := '0';
	signal PS_SET_FIRST_CYCLE_LATCH: STD_LOGIC := '0';
	signal PS_CONS_OUTPUT_WM_BIT: STD_LOGIC := '0';

	-- Outputs

	signal PS_CONS_CHAR_CONTROL: STD_LOGIC;
	signal MS_CONS_CHAR_CONTROL: STD_LOGIC;
	signal MS_CONS_OUTPUT_WM_BIT: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_50_10_1_CHARACTER_CONTROL_LATCH port map(
		FPGA_CLK => FPGA_CLK,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		MS_KEYBOARD_LOCK_SET => MS_KEYBOARD_LOCK_SET,
		MS_CONS_WM_INPUT_SET => MS_CONS_WM_INPUT_SET,
		PS_CONS_CYCLE_LATCH_RESET => PS_CONS_CYCLE_LATCH_RESET,
		MS_KEYBOARD_UNLOCK_SET => MS_KEYBOARD_UNLOCK_SET,
		MS_CONSOLE_OUTPUT_ERROR => MS_CONSOLE_OUTPUT_ERROR,
		MS_CONS_PRINTER_NOT_BUSY => MS_CONS_PRINTER_NOT_BUSY,
		MS_CONS_PRINTER_END_OF_LINE => MS_CONS_PRINTER_END_OF_LINE,
		PS_CONS_BACK_SPACE_CONTROL => PS_CONS_BACK_SPACE_CONTROL,
		MS_CONS_WM_CONTROL => MS_CONS_WM_CONTROL,
		PS_CONS_CYCLE_LATCH_SET => PS_CONS_CYCLE_LATCH_SET,
		PS_SET_FIRST_CYCLE_LATCH => PS_SET_FIRST_CYCLE_LATCH,
		PS_CONS_OUTPUT_WM_BIT => PS_CONS_OUTPUT_WM_BIT,
		PS_CONS_CHAR_CONTROL => PS_CONS_CHAR_CONTROL,
		MS_CONS_CHAR_CONTROL => MS_CONS_CHAR_CONTROL,
		MS_CONS_OUTPUT_WM_BIT => MS_CONS_OUTPUT_WM_BIT);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "45.50.10.1        ";

   for tt in 0 to 2**25 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      b := tv(0);
      c := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      l := tv(9);
      m := tv(10);

      g1 := l and not k and j and not f;
      g2 := m and not n;
      g3 := g1 or g2 or e;
      
      g4 := d and (f or g or h);
      g5 := b or c or g4;
      
      -- Reset
      
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_CHAR_CONTROL,'0',testName,"Init +S Cons Char Control");
      check1(MS_CONS_CHAR_CONTROL,'1',testName,"Init -S Cons Char Control");
      
      -- Now, the possible set signals get set, perhaps setting the latch
      
      MS_KEYBOARD_UNLOCK_SET <= not e;
      MS_CONSOLE_OUTPUT_ERROR <= not f; -- This one persists through the rest of the test
      PS_CONS_BACK_SPACE_CONTROL <= j;
      MS_CONS_WM_CONTROL <= not k;
      PS_CONS_CYCLE_LATCH_SET <= l;
      PS_SET_FIRST_CYCLE_LATCH <= m;
      PS_CONS_OUTPUT_WM_BIT <= n;                 
      wait for 30 ns;
      
      check1(MS_CONS_OUTPUT_WM_BIT,not n,testname,"-S Cons Output Wm Bit");            
      
      -- Reset the setting signals so they don't give us trouble resetting later.
      -- Latch should be unaffected

      MS_KEYBOARD_UNLOCK_SET <= '1';
      PS_CONS_BACK_SPACE_CONTROL <= '0';
      MS_CONS_WM_CONTROL <= '1';
      PS_CONS_CYCLE_LATCH_SET <= '0';
      PS_SET_FIRST_CYCLE_LATCH <= '0';
      PS_CONS_OUTPUT_WM_BIT <= '0';
      wait for 30 ns;

      check1(PS_CONS_CHAR_CONTROL,g3,testName,"Set +S Cons Char Control");
      check1(MS_CONS_CHAR_CONTROL,not PS_CONS_CHAR_CONTROL,testName,"Set -S Cons Char Control");
      
      -- Perhaps reset the latch
      
		MS_KEYBOARD_LOCK_SET <= not b;
      MS_CONS_WM_INPUT_SET <= not c;
      PS_CONS_CYCLE_LATCH_RESET <= d;
      MS_CONS_PRINTER_NOT_BUSY <= not g;
      MS_CONS_PRINTER_END_OF_LINE <= not h;
      wait for 30 ns;
      
      check1(PS_CONS_CHAR_CONTROL,g3 and not g5,testName,"Reset +S Cons Char Control");
      check1(MS_CONS_CHAR_CONTROL,not PS_CONS_CHAR_CONTROL,testName,"Reset -S Cons Char Control");

      -- Put the resetting signals back to their defaults for next iteration
      
		MS_KEYBOARD_LOCK_SET <= '1';
      MS_CONS_WM_INPUT_SET <= '1';
      PS_CONS_CYCLE_LATCH_RESET <= '0';
      MS_CONSOLE_OUTPUT_ERROR <= '1';      
      MS_CONS_PRINTER_NOT_BUSY <= '1';
      MS_CONS_PRINTER_END_OF_LINE <= '1';
            
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
