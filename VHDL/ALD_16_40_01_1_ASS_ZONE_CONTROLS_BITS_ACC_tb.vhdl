-- Test Bench VHDL for IBM SMS ALD page 16.40.01.1
-- Title: ASS ZONE CONTROLS BITS-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/4/2020 5:55:32 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_16_40_01_1_ASS_ZONE_CONTROLS_BITS_ACC_tb is
end ALD_16_40_01_1_ASS_ZONE_CONTROLS_BITS_ACC_tb;

architecture behavioral of ALD_16_40_01_1_ASS_ZONE_CONTROLS_BITS_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_16_40_01_1_ASS_ZONE_CONTROLS_BITS_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_3:	 in STD_LOGIC;
		MS_DIV_DOT_U_OR_Y_OR_X_DOT_B:	 in STD_LOGIC;
		MS_DIV_DOT_2_DOT_D:	 in STD_LOGIC;
		MS_DIV_DOT_MQ_DOT_B_DOT_NOT_MDL:	 in STD_LOGIC;
		MS_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_U_DOT_1401:	 in STD_LOGIC;
		MS_A_OR_S_DOT_B_DOT_Y_OR_X_DOT_NOT_1401:	 in STD_LOGIC;
		MS_A_OR_S_DOT_B_DOT_U_DOT_1_DOT_NOT_1401:	 in STD_LOGIC;
		PS_B_CH_MINUS:	 in STD_LOGIC;
		PS_A_CH_MINUS:	 in STD_LOGIC;
		PS_UNITS_LATCH:	 in STD_LOGIC;
		PS_B_CH_PLUS:	 in STD_LOGIC;
		MS_DIV_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		PS_B_CYCLE:	 in STD_LOGIC;
		PS_DIV_OP_CODE:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_1401_MODE_1:	 in STD_LOGIC;
		PS_B_CH_B_BIT:	 in STD_LOGIC;
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_1:	 in STD_LOGIC;
		MS_MPLY_DOT_MQ_DOT_B:	 in STD_LOGIC;
		MS_RA_OR_RS_DOT_1_DOT_B_DOT_X_OR_Y:	 in STD_LOGIC;
		MS_MPLY_DOT_N_DOT_C:	 in STD_LOGIC;
		PS_LOGIC_GATE_C_1:	 in STD_LOGIC;
		PS_MPLY_DIV_LAST_LATCH:	 in STD_LOGIC;
		PS_USE_B_CH_ZONES_STAR_ARITH:	 out STD_LOGIC;
		MS_1401_MINUS_SIGN:	 out STD_LOGIC;
		MS_1401_PLUS_SIGN:	 out STD_LOGIC;
		MS_1401_DIV_EARLY_END:	 out STD_LOGIC;
		PS_USE_NO_ZONES_STAR_ARITH:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_3: STD_LOGIC := '1';
	signal MS_DIV_DOT_U_OR_Y_OR_X_DOT_B: STD_LOGIC := '1';
	signal MS_DIV_DOT_2_DOT_D: STD_LOGIC := '1';
	signal MS_DIV_DOT_MQ_DOT_B_DOT_NOT_MDL: STD_LOGIC := '1';
	signal MS_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_U_DOT_1401: STD_LOGIC := '1';
	signal MS_A_OR_S_DOT_B_DOT_Y_OR_X_DOT_NOT_1401: STD_LOGIC := '1';
	signal MS_A_OR_S_DOT_B_DOT_U_DOT_1_DOT_NOT_1401: STD_LOGIC := '1';
	signal PS_B_CH_MINUS: STD_LOGIC := '0';
	signal PS_A_CH_MINUS: STD_LOGIC := '0';
	signal PS_UNITS_LATCH: STD_LOGIC := '0';
	signal PS_B_CH_PLUS: STD_LOGIC := '0';
	signal MS_DIV_DOT_LAST_INSN_RO_CYCLE: STD_LOGIC := '1';
	signal PS_B_CYCLE: STD_LOGIC := '0';
	signal PS_DIV_OP_CODE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_1401_MODE_1: STD_LOGIC := '0';
	signal PS_B_CH_B_BIT: STD_LOGIC := '0';
	signal MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_1: STD_LOGIC := '1';
	signal MS_MPLY_DOT_MQ_DOT_B: STD_LOGIC := '1';
	signal MS_RA_OR_RS_DOT_1_DOT_B_DOT_X_OR_Y: STD_LOGIC := '1';
	signal MS_MPLY_DOT_N_DOT_C: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_C_1: STD_LOGIC := '0';
	signal PS_MPLY_DIV_LAST_LATCH: STD_LOGIC := '0';

	-- Outputs

	signal PS_USE_B_CH_ZONES_STAR_ARITH: STD_LOGIC;
	signal MS_1401_MINUS_SIGN: STD_LOGIC;
	signal MS_1401_PLUS_SIGN: STD_LOGIC;
	signal MS_1401_DIV_EARLY_END: STD_LOGIC;
	signal PS_USE_NO_ZONES_STAR_ARITH: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_16_40_01_1_ASS_ZONE_CONTROLS_BITS_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_3 => MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_3,
		MS_DIV_DOT_U_OR_Y_OR_X_DOT_B => MS_DIV_DOT_U_OR_Y_OR_X_DOT_B,
		MS_DIV_DOT_2_DOT_D => MS_DIV_DOT_2_DOT_D,
		MS_DIV_DOT_MQ_DOT_B_DOT_NOT_MDL => MS_DIV_DOT_MQ_DOT_B_DOT_NOT_MDL,
		MS_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_U_DOT_1401 => MS_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_U_DOT_1401,
		MS_A_OR_S_DOT_B_DOT_Y_OR_X_DOT_NOT_1401 => MS_A_OR_S_DOT_B_DOT_Y_OR_X_DOT_NOT_1401,
		MS_A_OR_S_DOT_B_DOT_U_DOT_1_DOT_NOT_1401 => MS_A_OR_S_DOT_B_DOT_U_DOT_1_DOT_NOT_1401,
		PS_B_CH_MINUS => PS_B_CH_MINUS,
		PS_A_CH_MINUS => PS_A_CH_MINUS,
		PS_UNITS_LATCH => PS_UNITS_LATCH,
		PS_B_CH_PLUS => PS_B_CH_PLUS,
		MS_DIV_DOT_LAST_INSN_RO_CYCLE => MS_DIV_DOT_LAST_INSN_RO_CYCLE,
		PS_B_CYCLE => PS_B_CYCLE,
		PS_DIV_OP_CODE => PS_DIV_OP_CODE,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_1401_MODE_1 => PS_1401_MODE_1,
		PS_B_CH_B_BIT => PS_B_CH_B_BIT,
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_1 => MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_1,
		MS_MPLY_DOT_MQ_DOT_B => MS_MPLY_DOT_MQ_DOT_B,
		MS_RA_OR_RS_DOT_1_DOT_B_DOT_X_OR_Y => MS_RA_OR_RS_DOT_1_DOT_B_DOT_X_OR_Y,
		MS_MPLY_DOT_N_DOT_C => MS_MPLY_DOT_N_DOT_C,
		PS_LOGIC_GATE_C_1 => PS_LOGIC_GATE_C_1,
		PS_MPLY_DIV_LAST_LATCH => PS_MPLY_DIV_LAST_LATCH,
		PS_USE_B_CH_ZONES_STAR_ARITH => PS_USE_B_CH_ZONES_STAR_ARITH,
		MS_1401_MINUS_SIGN => MS_1401_MINUS_SIGN,
		MS_1401_PLUS_SIGN => MS_1401_PLUS_SIGN,
		MS_1401_DIV_EARLY_END => MS_1401_DIV_EARLY_END,
		PS_USE_NO_ZONES_STAR_ARITH => PS_USE_NO_ZONES_STAR_ARITH);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "16.40.01.1        ";

   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      s := tv(7);
      t := tv(8);
      u := tv(9);
      v := tv(10);
      w := tv(11);
      x := tv(12);
      y := tv(13);
      z := tv(14);

		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_3 <= not a;
		MS_DIV_DOT_U_OR_Y_OR_X_DOT_B <= not b;
		MS_DIV_DOT_2_DOT_D <= not c;
		MS_DIV_DOT_MQ_DOT_B_DOT_NOT_MDL <= not d;
		MS_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_U_DOT_1401 <= not e;
		MS_A_OR_S_DOT_B_DOT_Y_OR_X_DOT_NOT_1401 <= not f;
		MS_A_OR_S_DOT_B_DOT_U_DOT_1_DOT_NOT_1401 <= not g;
		MS_MPLY_DOT_U_OR_Y_OR_X_DOT_B_DOT_1 <= not s;
      MS_MPLY_DOT_MQ_DOT_B <= not t;
      MS_RA_OR_RS_DOT_1_DOT_B_DOT_X_OR_Y <= not u;
      MS_MPLY_DOT_N_DOT_C <= not v;
      
      wait for 30 ns;
      
      check1(PS_USE_B_CH_ZONES_STAR_ARITH,a or b or c or d or e or f or g,
         testName,"Use B Ch Zones *Arith");
      check1(PS_USE_NO_ZONES_STAR_ARITH,s or t or u or v,testName,
         "Use No Zones *Arith");
      
   end loop;
   
   for tt in 0 to 2**11 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      h := tv(0);
      j := tv(1);
      k := tv(2);
      l := tv(3);
      n := tv(4);
      o := tv(5);
      p := tv(6);
      q := tv(7);
      r := tv(8);
      w := tv(9);
      x := tv(10);
      
      g1 := w and x;
      g2 := n and o and p and q and r and not g1;
      g4 := j and n and k;
      g3 := (g4 and h) or (not g4 and l);      
      
      -- Reset latches
      
      MS_DIV_DOT_LAST_INSN_RO_CYCLE <= '0';
      wait for 30 ns;
      MS_DIV_DOT_LAST_INSN_RO_CYCLE <= '1';
      wait for 30 ns;
   
      -- Perhaps set latches, and set variables
      
		PS_B_CH_MINUS <= h;
      PS_A_CH_MINUS <= j;
      PS_UNITS_LATCH <= k;
      PS_B_CH_PLUS <= l;
      PS_B_CYCLE <= n;
      PS_DIV_OP_CODE <= o;
      PS_LOGIC_GATE_E_1 <= p;
      PS_1401_MODE_1 <= q;
      PS_B_CH_B_BIT <= r;
      PS_LOGIC_GATE_C_1 <= w;
      PS_MPLY_DIV_LAST_LATCH <= x;         
      wait for 30 ns;

      check1(MS_1401_DIV_EARLY_END,not(g2),testName,"1401 DIV Early End");
      check1(MS_1401_MINUS_SIGN,not(q and g2 and not g3),testName,"1401 -");
      check1(MS_1401_PLUS_SIGN,not(q and g2 and g3),testName,"1401 +");

      -- Reset variables before next iteration, so reset works
      
		PS_B_CH_MINUS <= '0';
      PS_A_CH_MINUS <= '0';
      PS_UNITS_LATCH <= '0';
      PS_B_CH_PLUS <= '0';
      PS_B_CYCLE <= '0';
      PS_DIV_OP_CODE <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_1401_MODE_1 <= '0';
      PS_B_CH_B_BIT <= '0';
      PS_LOGIC_GATE_C_1 <= '0';
      PS_MPLY_DIV_LAST_LATCH <= '0';         
      
      
   end loop;   

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
