-- Test Bench VHDL for IBM SMS ALD page 15.63.04.1
-- Title: F CH REGISTER TRANSFER CTRLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/27/2020 10:53:13 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_63_04_1_F_CH_REGISTER_TRANSFER_CTRLS_tb is
end ALD_15_63_04_1_F_CH_REGISTER_TRANSFER_CTRLS_tb;

architecture behavioral of ALD_15_63_04_1_F_CH_REGISTER_TRANSFER_CTRLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_63_04_1_F_CH_REGISTER_TRANSFER_CTRLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_F_CH_2ND_ADDR_TRF:	 in STD_LOGIC;
		PS_B_CH_GROUP_MARK_DOT_WM:	 in STD_LOGIC;
		PS_X_SYMBOL_OP_MOD_GATED:	 in STD_LOGIC;
		PS_F_CYCLE:	 in STD_LOGIC;
		PS_F_CH_OUTPUT_MODE:	 in STD_LOGIC;
		PS_EARLY_LAST_GATE_I_O:	 in STD_LOGIC;
		PS_GATE_SET_F1_REG_STAR_1414_STAR:	 in STD_LOGIC;
		MS_F_CH_CLOCKED_STROBE_INPUT:	 in STD_LOGIC;
		MS_F_CH_1ST_CHAR_2ND_ADDR:	 in STD_LOGIC;
		PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN:	 in STD_LOGIC;
		PS_UNITS_OR_BODY_LATCH:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_CLAMPED_A:	 in STD_LOGIC;
		MS_F_CH_RESET_1:	 in STD_LOGIC;
		PS_B_CH_NOT_GROUP_MARK_WM:	 in STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK:	 in STD_LOGIC;
		MS_F2_REG_FULL:	 in STD_LOGIC;
		PS_F1_REG_FULL:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_CLAMPED_A:	 in STD_LOGIC;
		PS_SET_F1_REG:	 out STD_LOGIC;
		MS_SET_F1_REG:	 out STD_LOGIC;
		PS_SET_F2_REG:	 out STD_LOGIC;
		MS_SET_F2_REG:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_F_CH_2ND_ADDR_TRF: STD_LOGIC := '0';
	signal PS_B_CH_GROUP_MARK_DOT_WM: STD_LOGIC := '0';
	signal PS_X_SYMBOL_OP_MOD_GATED: STD_LOGIC := '0';
	signal PS_F_CYCLE: STD_LOGIC := '0';
	signal PS_F_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_EARLY_LAST_GATE_I_O: STD_LOGIC := '0';
	signal PS_GATE_SET_F1_REG_STAR_1414_STAR: STD_LOGIC := '0';
	signal MS_F_CH_CLOCKED_STROBE_INPUT: STD_LOGIC := '1';
	signal MS_F_CH_1ST_CHAR_2ND_ADDR: STD_LOGIC := '1';
	signal PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN: STD_LOGIC := '0';
	signal PS_UNITS_OR_BODY_LATCH: STD_LOGIC := '0';
	signal PS_2ND_CLOCK_PULSE_CLAMPED_A: STD_LOGIC := '0';
	signal MS_F_CH_RESET_1: STD_LOGIC := '1';
	signal PS_B_CH_NOT_GROUP_MARK_WM: STD_LOGIC := '0';
	signal PS_LOZENGE_OR_ASTERISK: STD_LOGIC := '0';
	signal MS_F2_REG_FULL: STD_LOGIC := '1';
	signal PS_F1_REG_FULL: STD_LOGIC := '0';
	signal PS_1ST_CLOCK_PULSE_CLAMPED_A: STD_LOGIC := '0';

	-- Outputs

	signal PS_SET_F1_REG: STD_LOGIC;
	signal MS_SET_F1_REG: STD_LOGIC;
	signal PS_SET_F2_REG: STD_LOGIC;
	signal MS_SET_F2_REG: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_63_04_1_F_CH_REGISTER_TRANSFER_CTRLS port map(
		FPGA_CLK => FPGA_CLK,
		PS_F_CH_2ND_ADDR_TRF => PS_F_CH_2ND_ADDR_TRF,
		PS_B_CH_GROUP_MARK_DOT_WM => PS_B_CH_GROUP_MARK_DOT_WM,
		PS_X_SYMBOL_OP_MOD_GATED => PS_X_SYMBOL_OP_MOD_GATED,
		PS_F_CYCLE => PS_F_CYCLE,
		PS_F_CH_OUTPUT_MODE => PS_F_CH_OUTPUT_MODE,
		PS_EARLY_LAST_GATE_I_O => PS_EARLY_LAST_GATE_I_O,
		PS_GATE_SET_F1_REG_STAR_1414_STAR => PS_GATE_SET_F1_REG_STAR_1414_STAR,
		MS_F_CH_CLOCKED_STROBE_INPUT => MS_F_CH_CLOCKED_STROBE_INPUT,
		MS_F_CH_1ST_CHAR_2ND_ADDR => MS_F_CH_1ST_CHAR_2ND_ADDR,
		PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN => PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN,
		PS_UNITS_OR_BODY_LATCH => PS_UNITS_OR_BODY_LATCH,
		PS_2ND_CLOCK_PULSE_CLAMPED_A => PS_2ND_CLOCK_PULSE_CLAMPED_A,
		MS_F_CH_RESET_1 => MS_F_CH_RESET_1,
		PS_B_CH_NOT_GROUP_MARK_WM => PS_B_CH_NOT_GROUP_MARK_WM,
		PS_LOZENGE_OR_ASTERISK => PS_LOZENGE_OR_ASTERISK,
		MS_F2_REG_FULL => MS_F2_REG_FULL,
		PS_F1_REG_FULL => PS_F1_REG_FULL,
		PS_1ST_CLOCK_PULSE_CLAMPED_A => PS_1ST_CLOCK_PULSE_CLAMPED_A,
		PS_SET_F1_REG => PS_SET_F1_REG,
		MS_SET_F1_REG => MS_SET_F1_REG,
		PS_SET_F2_REG => PS_SET_F2_REG,
		MS_SET_F2_REG => MS_SET_F2_REG);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable b,c,d,e,f,g,h,i,j,k,l,m,n,s,w,x,y,z,z2: std_logic;
   variable g1, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable savee1e2: std_logic;

   begin

   -- Your test bench code


   testName := "15.63.04.1        ";

   for tt in 0 to 2**13 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- a := tv(0);
      b := tv(0);
      c := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      -- h := tv(7);
      i := tv(6);
      j := tv(7);
      k := tv(8);
      -- l := tv(11);
      m := tv(9);
      -- n := tv(13);
      -- o := tv(11);
      -- p := tv(12);
      -- q := tv(13);
      -- r := tv(17);
      -- s := tv(18);
      -- t := tv(14);
      -- u := tv(15);
      -- v := tv(16);
      w := tv(10);
      -- x1 := tv(18);
      -- x2 := tv(19);
      -- y := tv(20);
      z := tv(11);
      z2 := tv(12);

      g1 := e and d and j and k and not g; -- Gates 5D and 5E
      -- g2 := o and p and v and q;
      -- g3 := t and (y or x1 or x2) and w and v and u and q;
      g4 := z2 and z and w and k; -- Gate 4D and 4E
      -- g5 := b and c and e and d and k and not j;
      g5 := (not c or j) and b and d and e and d and k and not g;
      g6 := f or g1 or g4 or g5;
      
      -- Reset
      
      MS_F_CH_RESET_1 <= '0';
      wait for 30 ns;
      MS_F_CH_RESET_1 <= '1';
      wait for 30 ns;
      
      check1(PS_SET_F1_REG,'0',testName,"+S Set F1 Reset");
      check1(MS_SET_F1_REG,'1',testName,"+S Set F1 Reset");

      -- Note that the default conditions keep this "reset"
      
      PS_X_SYMBOL_OP_MOD_GATED <= b;
      PS_F_CH_2ND_ADDR_TRF <= c;
      PS_F_CYCLE <= d;
      PS_F_CH_OUTPUT_MODE <= e;
      MS_F_CH_CLOCKED_STROBE_INPUT <= not f;
      MS_F_CH_1ST_CHAR_2ND_ADDR <= not g;
      -- PS_2ND_CLOCK_PULSE_CLAMPED_A <= h;
      PS_B_CH_NOT_GROUP_MARK_WM <= j;
      PS_B_CH_GROUP_MARK_DOT_WM <= not j;
      PS_EARLY_LAST_GATE_I_O <= k;
      -- MS_F_CH_RESET_1 <= ;
      PS_F1_REG_FULL <= '0';
      PS_GATE_SET_F1_REG_STAR_1414_STAR <= m;
      -- PS_1ST_CLOCK_PULSE_CLAMPED_A <= ;
      MS_F2_REG_FULL <= '1';
      PS_LOZENGE_OR_ASTERISK <= w;
      PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN <= z;
      PS_UNITS_OR_BODY_LATCH <= z2;

      wait for 30 ns;
      
      -- Run the clocks
      
      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '1';
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '0';
      wait for 30 ns;

      check1(PS_SET_F1_REG,g6 or m,testName,"+S Set F1 Reg");            
      check1(MS_SET_F1_REG,not (g6 or m),testName,"-S Set F1 Reg");

      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '0';
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '1';
      wait for 30 ns;            
            
      -- Set values back before reset during next loop

      PS_X_SYMBOL_OP_MOD_GATED <= '0';
      PS_F_CH_2ND_ADDR_TRF <= '0';
      PS_F_CYCLE <= '0';
      PS_F_CH_OUTPUT_MODE <= '0';
      MS_F_CH_CLOCKED_STROBE_INPUT <= '1';
      MS_F_CH_1ST_CHAR_2ND_ADDR <= '1';
      -- PS_2ND_CLOCK_PULSE_CLAMPED_A <= h;
      PS_B_CH_NOT_GROUP_MARK_WM <= '0';
      PS_B_CH_GROUP_MARK_DOT_WM <= '0';
      PS_EARLY_LAST_GATE_I_O <= '0';
      -- MS_F_CH_RESET_1 <= ;
      PS_F1_REG_FULL <= '0';
      PS_GATE_SET_F1_REG_STAR_1414_STAR <= '0';      
      -- PS_1ST_CLOCK_PULSE_CLAMPED_A <= ;
      MS_F2_REG_FULL <= '1';
      PS_LOZENGE_OR_ASTERISK <= '0';
      PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN <= '0';
      PS_UNITS_OR_BODY_LATCH <= '0';
      
      -- Now, maybe set E2 (Not dependent upon SET E1 on this page)
      
      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '1';
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '0';
      wait for 30 ns;

      -- These tv(0) and tv(1) are not really related to variables "a" and "b"
      
      PS_F1_REG_FULL <= tv(0);
      MS_F2_REG_FULL <= tv(1);
      savee1e2 := PS_F1_REG_FULL and not MS_F2_REG_FULL;
      wait for 30 ns;

      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '0';
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '1';
      wait for 30 ns;
                 
      check1(PS_SET_F2_REG,savee1e2,testName,"Set F2 Reg");      
      
      PS_F1_REG_FULL <= '0';
      MS_F2_REG_FULL <= '1';
 
      wait for 30 ns;
      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '1';      
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '0';
      wait for 30 ns;            
      PS_1ST_CLOCK_PULSE_CLAMPED_A <= '0';      
      PS_2ND_CLOCK_PULSE_CLAMPED_A <= '1';
                        
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
