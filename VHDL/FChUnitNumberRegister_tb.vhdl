-- Test BenchVHDL for IBM SMS ALD group FChUnitNumberRegister
-- Title: FChUnitNumberRegister
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/17/2020 4:25:01 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity FChUnitNumberRegister_tb is
end FChUnitNumberRegister_tb;

architecture behavioral of FChUnitNumberRegister_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component FChUnitNumberRegister
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_LAST_LOGIC_GATE_1: in STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK: in STD_LOGIC;
		MS_F_CH_RESET: in STD_LOGIC;
		PS_ASSEMBLY_CH_NU_C_BIT: in STD_LOGIC;
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		PS_ASSEMBLY_CH_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		PS_F_CH_U_NU_REG_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_F_CH_U_NU_REG_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_LAST_LOGIC_GATE_1: STD_LOGIC := '0';
	signal PS_LOZENGE_OR_ASTERISK: STD_LOGIC := '0';
	signal MS_F_CH_RESET: STD_LOGIC := '1';
	signal PS_ASSEMBLY_CH_NU_C_BIT: STD_LOGIC := '0';
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";
	signal PS_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";

	-- Outputs

	signal PS_F_CH_U_NU_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_F_CH_U_NU_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: FChUnitNumberRegister port map(
		FPGA_CLK => FPGA_CLK,
		PS_LAST_LOGIC_GATE_1 => PS_LAST_LOGIC_GATE_1,
		PS_LOZENGE_OR_ASTERISK => PS_LOZENGE_OR_ASTERISK,
		MS_F_CH_RESET => MS_F_CH_RESET,
		PS_ASSEMBLY_CH_NU_C_BIT => PS_ASSEMBLY_CH_NU_C_BIT,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		PS_ASSEMBLY_CH_BUS => PS_ASSEMBLY_CH_BUS,
		PS_F_CH_U_NU_REG_NOT_BUS => PS_F_CH_U_NU_REG_NOT_BUS,
		PS_F_CH_U_NU_REG_BUS => PS_F_CH_U_NU_REG_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable tv2: std_logic_vector(2 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.56.01.1, 02.1  ";

   MS_F_CH_RESET <= '0';
   wait for 30 ns;
   MS_F_CH_RESET <= '1';
   wait for 30 ns;
   
   for i in 0 to 32 loop
      tv := std_logic_vector(to_unsigned(i,tv'Length));
      MS_F_CH_RESET <= '0';
      wait for 30 ns;
      MS_F_CH_RESET <= '1';
      wait for 30 ns;
      
      -- Set the appropriate assembly channel bits
      
      PS_ASSEMBLY_CH_BUS <= "000" & tv(3 downto 0);
      PS_ASSEMBLY_CH_NU_C_BIT <= tv(4);      
      
      -- Test that we start out as 0, checking all the combinations of the controls except the one
      -- that will actually set it
      
      for ctrl in 0 to 6 loop
         tv2 := std_logic_vector(to_unsigned(ctrl,tv2'Length));
         PS_LOZENGE_OR_ASTERISK <= tv2(0);
         PS_I_RING_HDL_BUS(5) <= tv2(1);
         PS_LAST_LOGIC_GATE_1 <= tv2(2);
         wait for 30 ns;
         for j in 0 to 3 loop
            check1(PS_F_CH_U_NU_REG_BUS(j),'0',testName,"Zero Test F Ch Unit Bus " & Integer'Image(j));
            check1(PS_F_CH_U_NU_REG_NOT_BUS(j),'1',testName,"Zero Test F Ch Unit Not Bus " & Integer'Image(j));
         end loop;   
         check1(PS_F_CH_U_NU_REG_BUS(HDL_C_BIT),'0',testName,"Zero Test F Ch Unit Bus C Bit");
         check1(PS_F_CH_U_NU_REG_NOT_BUS(HDL_C_BIT),'1',testName,"Zero Test F Ch Unit Not Bus C Bit");
      end loop;
      
      -- Now, set it.
      
      PS_LOZENGE_OR_ASTERISK <= '1';  -- The other two signals are already set 110
      wait for 30 ns; -- Set the latches
      PS_LOZENGE_OR_ASTERISK <= '0';
      PS_I_RING_HDL_BUS(5) <= '0';
      PS_LAST_LOGIC_GATE_1 <= '0';
      wait for 30 ns; -- Latches should stay set
            
      for j in 0 to 3 loop
         check1(PS_F_CH_U_NU_REG_BUS(j),tv(j),testName,"Set Test F Ch Unit Bus " & Integer'Image(j));
         check1(PS_F_CH_U_NU_REG_NOT_BUS(j),not tv(j),testName,"Set Test F Ch Unit Not Bus " & Integer'Image(j));
      end loop;   
      check1(PS_F_CH_U_NU_REG_BUS(HDL_C_BIT),tv(4),testName,"Set Test F Ch Unit Bus C Bit");
      check1(PS_F_CH_U_NU_REG_NOT_BUS(HDL_C_BIT),not tv(4),testName,"Set Test F Ch Unit Not Bus C Bit");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
