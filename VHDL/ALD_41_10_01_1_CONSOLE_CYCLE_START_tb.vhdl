-- Test Bench VHDL for IBM SMS ALD page 41.10.01.1
-- Title: CONSOLE CYCLE START
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/24/2020 9:52:51 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_41_10_01_1_CONSOLE_CYCLE_START_tb is
end ALD_41_10_01_1_CONSOLE_CYCLE_START_tb;

architecture behavioral of ALD_41_10_01_1_CONSOLE_CYCLE_START_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_41_10_01_1_CONSOLE_CYCLE_START
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_STOPPED_AT_CYCLE_END:	 in STD_LOGIC;
		PS_CONSOLE_HOME_POSITION:	 in STD_LOGIC;
		PS_START_KEY_2:	 in STD_LOGIC;
		MS_CONS_CYCLE_START_RESET:	 in STD_LOGIC;
		MV_CONS_MODE_SW_DISPLAY_MODE:	 in STD_LOGIC;
		MV_STORAGE_SCAN_MODE_1:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS:	 in STD_LOGIC;
		PS_STOPPED_AT_LAST_EXEC_CYCLE:	 in STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_NORMAL_2:	 in STD_LOGIC;
		MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ:	 in STD_LOGIC;
		MS_CONS_CYCLE_START_CND:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		MS_PROGRAM_SET_BRANCH_CTRL:	 out STD_LOGIC;
		MS_CONS_RESET_START_CONDITION:	 out STD_LOGIC;
		MS_CONSOLE_CYCLE_START:	 out STD_LOGIC;
		PS_CONSOLE_CYCLE_START:	 out STD_LOGIC;
		MS_CONSOLE_ROUTINE_START:	 out STD_LOGIC;
		PS_CONSOLE_ROUTINE_START:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_STOPPED_AT_CYCLE_END: STD_LOGIC := '0';
	signal PS_CONSOLE_HOME_POSITION: STD_LOGIC := '0';
	signal PS_START_KEY_2: STD_LOGIC := '0';
	signal MS_CONS_CYCLE_START_RESET: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_DISPLAY_MODE: STD_LOGIC := '1';
	signal MV_STORAGE_SCAN_MODE_1: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_3_POS: STD_LOGIC := '0';
	signal PS_STOPPED_AT_LAST_EXEC_CYCLE: STD_LOGIC := '0';
	signal MV_CONS_ADDRESS_ENTRY_NORMAL_2: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ: STD_LOGIC := '1';
	signal MS_CONS_CYCLE_START_CND: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';

	-- Outputs

	signal MS_PROGRAM_SET_BRANCH_CTRL: STD_LOGIC;
	signal MS_CONS_RESET_START_CONDITION: STD_LOGIC;
	signal MS_CONSOLE_CYCLE_START: STD_LOGIC;
	signal PS_CONSOLE_CYCLE_START: STD_LOGIC;
	signal MS_CONSOLE_ROUTINE_START: STD_LOGIC;
	signal PS_CONSOLE_ROUTINE_START: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_41_10_01_1_CONSOLE_CYCLE_START port map(
		FPGA_CLK => FPGA_CLK,
		PS_STOPPED_AT_CYCLE_END => PS_STOPPED_AT_CYCLE_END,
		PS_CONSOLE_HOME_POSITION => PS_CONSOLE_HOME_POSITION,
		PS_START_KEY_2 => PS_START_KEY_2,
		MS_CONS_CYCLE_START_RESET => MS_CONS_CYCLE_START_RESET,
		MV_CONS_MODE_SW_DISPLAY_MODE => MV_CONS_MODE_SW_DISPLAY_MODE,
		MV_STORAGE_SCAN_MODE_1 => MV_STORAGE_SCAN_MODE_1,
		PS_CONS_CLOCK_3_POS => PS_CONS_CLOCK_3_POS,
		PS_STOPPED_AT_LAST_EXEC_CYCLE => PS_STOPPED_AT_LAST_EXEC_CYCLE,
		MV_CONS_ADDRESS_ENTRY_NORMAL_2 => MV_CONS_ADDRESS_ENTRY_NORMAL_2,
		MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ => MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ,
		MS_CONS_CYCLE_START_CND => MS_CONS_CYCLE_START_CND,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		MS_PROGRAM_SET_BRANCH_CTRL => MS_PROGRAM_SET_BRANCH_CTRL,
		MS_CONS_RESET_START_CONDITION => MS_CONS_RESET_START_CONDITION,
		MS_CONSOLE_CYCLE_START => MS_CONSOLE_CYCLE_START,
		PS_CONSOLE_CYCLE_START => PS_CONSOLE_CYCLE_START,
		MS_CONSOLE_ROUTINE_START => MS_CONSOLE_ROUTINE_START,
		PS_CONSOLE_ROUTINE_START => PS_CONSOLE_ROUTINE_START);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "41.10.01.1        ";

   for tt in 0 to 2**12 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      n := tv(11);
      
      g1 := not d and b and c and g;
      g2 := k and a and g1;
      g3 := g1 and h and (e or f);

      -- Reset one of two different ways
         
      MS_CONS_CYCLE_START_CND <= l;
      MS_PROGRAM_RESET_4 <= not l;
      wait for 30 ns;       
      MS_CONS_CYCLE_START_CND <= '1';
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
      
      check1(PS_CONSOLE_CYCLE_START,'0',testName,"+S Console Cycle Start Loop Reset");       
      check1(MS_CONSOLE_CYCLE_START,'1',testName,"-S Console Cycle Start Loop Reset");       

		PS_STOPPED_AT_CYCLE_END <= a;
		PS_CONSOLE_HOME_POSITION <= b;
		PS_START_KEY_2 <= c;
		MS_CONS_CYCLE_START_RESET <= not d;
		MV_CONS_MODE_SW_DISPLAY_MODE <= not e;
		MV_STORAGE_SCAN_MODE_1 <= not f;
		PS_CONS_CLOCK_3_POS <= g;
		PS_STOPPED_AT_LAST_EXEC_CYCLE <= h;
		MV_CONS_ADDRESS_ENTRY_NORMAL_2 <= not j;
		MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ <= not k;
		PS_CONS_CLOCK_1_POS <= n;
		wait for 30 ns; -- Maybe set latch

      check1(PS_CONSOLE_CYCLE_START,g2 or g3,testName,"+S Console Cycle Start");       
      check1(MS_CONSOLE_CYCLE_START,not PS_CONSOLE_CYCLE_START,testName,"-S Console Cycle Start");
      check1(MS_PROGRAM_SET_BRANCH_CTRL,not((g2 or g3) and (f or j)),testName,"Program Set Branch Control");
      check1(MS_CONS_RESET_START_CONDITION,not((g2 or g3) and not k),testName,"Cons Reset Start Condition");
      check1(PS_CONSOLE_ROUTINE_START,(g2 or g3) and n,testName,"+S Console Routine Start");
      check1(MS_CONSOLE_ROUTINE_START,NOT PS_CONSOLE_ROUTINE_START,testName,"+S Console Routine Start");
             
      -- Reset the variables -- should not affect the latch      		

		PS_STOPPED_AT_CYCLE_END <= '0';
		PS_CONSOLE_HOME_POSITION <= '0';
		PS_START_KEY_2 <= '0';
		MS_CONS_CYCLE_START_RESET <= '1';
		MV_CONS_MODE_SW_DISPLAY_MODE <= '1';
		MV_STORAGE_SCAN_MODE_1 <= '1';
		PS_CONS_CLOCK_3_POS <= '0';
		PS_STOPPED_AT_LAST_EXEC_CYCLE <= '0';
		MV_CONS_ADDRESS_ENTRY_NORMAL_2 <= '1';
		MV_CONS_MODE_SW_ADDR_SET_MODE_JRJ <= '1';
		PS_CONS_CLOCK_1_POS <= '0';
		wait for 30 ns; -- Latch should stay put
      
      check1(PS_CONSOLE_CYCLE_START,g2 or g3,testName,"Status quo +S Console Cycle Start");       
      check1(MS_CONSOLE_CYCLE_START,not PS_CONSOLE_CYCLE_START,testName,"Status quo -S Console Cycle Start");
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
