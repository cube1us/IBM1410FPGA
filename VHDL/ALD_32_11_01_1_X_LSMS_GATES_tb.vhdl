-- Test Bench VHDL for IBM SMS ALD page 32.11.01.1
-- Title: X LSMS GATES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/16/2020 2:47:26 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_32_11_01_1_X_LSMS_GATES_tb is
end ALD_32_11_01_1_X_LSMS_GATES_tb;

architecture behavioral of ALD_32_11_01_1_X_LSMS_GATES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_32_11_01_1_X_LSMS_GATES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_10_19:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_00_09:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_30_39:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_20_29:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_50_59:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_40_49:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_70_79:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_60_69:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_80_89:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_90_99:	 in STD_LOGIC;
		MV_GATE_X_LSMS_YY00_09_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY00_09_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY10_19_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY10_19_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY20_29_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY20_29_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY30_39_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY30_39_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY40_49_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY40_49_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY50_59_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY50_59_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY60_60_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY60_69_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY70_79_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY70_79_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY80_89_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY80_89_B:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY90_99_A:	 out STD_LOGIC;
		MV_GATE_X_LSMS_YY90_99_B:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_10_19: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_00_09: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_30_39: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_20_29: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_50_59: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_40_49: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_70_79: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_60_69: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_80_89: STD_LOGIC := '0';
	signal PY_X_LSMS_GATE_SEL_90_99: STD_LOGIC := '0';

	-- Outputs

	signal MV_GATE_X_LSMS_YY00_09_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY00_09_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY10_19_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY10_19_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY20_29_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY20_29_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY30_39_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY30_39_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY40_49_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY40_49_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY50_59_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY50_59_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY60_60_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY60_69_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY70_79_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY70_79_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY80_89_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY80_89_B: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY90_99_A: STD_LOGIC;
	signal MV_GATE_X_LSMS_YY90_99_B: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_32_11_01_1_X_LSMS_GATES port map(
		FPGA_CLK => FPGA_CLK,
		PY_X_LSMS_GATE_SEL_10_19 => PY_X_LSMS_GATE_SEL_10_19,
		PY_X_LSMS_GATE_SEL_00_09 => PY_X_LSMS_GATE_SEL_00_09,
		PY_X_LSMS_GATE_SEL_30_39 => PY_X_LSMS_GATE_SEL_30_39,
		PY_X_LSMS_GATE_SEL_20_29 => PY_X_LSMS_GATE_SEL_20_29,
		PY_X_LSMS_GATE_SEL_50_59 => PY_X_LSMS_GATE_SEL_50_59,
		PY_X_LSMS_GATE_SEL_40_49 => PY_X_LSMS_GATE_SEL_40_49,
		PY_X_LSMS_GATE_SEL_70_79 => PY_X_LSMS_GATE_SEL_70_79,
		PY_X_LSMS_GATE_SEL_60_69 => PY_X_LSMS_GATE_SEL_60_69,
		PY_X_LSMS_GATE_SEL_80_89 => PY_X_LSMS_GATE_SEL_80_89,
		PY_X_LSMS_GATE_SEL_90_99 => PY_X_LSMS_GATE_SEL_90_99,
		MV_GATE_X_LSMS_YY00_09_A => MV_GATE_X_LSMS_YY00_09_A,
		MV_GATE_X_LSMS_YY00_09_B => MV_GATE_X_LSMS_YY00_09_B,
		MV_GATE_X_LSMS_YY10_19_A => MV_GATE_X_LSMS_YY10_19_A,
		MV_GATE_X_LSMS_YY10_19_B => MV_GATE_X_LSMS_YY10_19_B,
		MV_GATE_X_LSMS_YY20_29_A => MV_GATE_X_LSMS_YY20_29_A,
		MV_GATE_X_LSMS_YY20_29_B => MV_GATE_X_LSMS_YY20_29_B,
		MV_GATE_X_LSMS_YY30_39_A => MV_GATE_X_LSMS_YY30_39_A,
		MV_GATE_X_LSMS_YY30_39_B => MV_GATE_X_LSMS_YY30_39_B,
		MV_GATE_X_LSMS_YY40_49_A => MV_GATE_X_LSMS_YY40_49_A,
		MV_GATE_X_LSMS_YY40_49_B => MV_GATE_X_LSMS_YY40_49_B,
		MV_GATE_X_LSMS_YY50_59_A => MV_GATE_X_LSMS_YY50_59_A,
		MV_GATE_X_LSMS_YY50_59_B => MV_GATE_X_LSMS_YY50_59_B,
		MV_GATE_X_LSMS_YY60_60_A => MV_GATE_X_LSMS_YY60_60_A,
		MV_GATE_X_LSMS_YY60_69_B => MV_GATE_X_LSMS_YY60_69_B,
		MV_GATE_X_LSMS_YY70_79_A => MV_GATE_X_LSMS_YY70_79_A,
		MV_GATE_X_LSMS_YY70_79_B => MV_GATE_X_LSMS_YY70_79_B,
		MV_GATE_X_LSMS_YY80_89_A => MV_GATE_X_LSMS_YY80_89_A,
		MV_GATE_X_LSMS_YY80_89_B => MV_GATE_X_LSMS_YY80_89_B,
		MV_GATE_X_LSMS_YY90_99_A => MV_GATE_X_LSMS_YY90_99_A,
		MV_GATE_X_LSMS_YY90_99_B => MV_GATE_X_LSMS_YY90_99_B);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "32.11.01.1        ";

   for tt in 0 to 2**10 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);

		PY_X_LSMS_GATE_SEL_10_19 <= a;
		PY_X_LSMS_GATE_SEL_00_09 <= b;
		PY_X_LSMS_GATE_SEL_30_39 <= c;
		PY_X_LSMS_GATE_SEL_20_29 <= d;
		PY_X_LSMS_GATE_SEL_50_59 <= e;
		PY_X_LSMS_GATE_SEL_40_49 <= f;
		PY_X_LSMS_GATE_SEL_70_79 <= g;
		PY_X_LSMS_GATE_SEL_60_69 <= h;
		PY_X_LSMS_GATE_SEL_80_89 <= j;
		PY_X_LSMS_GATE_SEL_90_99 <= k;
		wait for 30 ns;

		check1(MV_GATE_X_LSMS_YY00_09_A,not b,testName,"00-09 A");
		check1(MV_GATE_X_LSMS_YY00_09_B,not b,testName,"00-09 B");
		check1(MV_GATE_X_LSMS_YY10_19_A,not a,testName,"10-19 A");
		check1(MV_GATE_X_LSMS_YY10_19_B,not a,testName,"10-19 B");
		check1(MV_GATE_X_LSMS_YY20_29_A,not d,testName,"20-29 A");
		check1(MV_GATE_X_LSMS_YY20_29_B,not d,testName,"20-29 B");
		check1(MV_GATE_X_LSMS_YY30_39_A,not c,testName,"30-39 A");
		check1(MV_GATE_X_LSMS_YY30_39_B,not c,testName,"30-39 B");
		check1(MV_GATE_X_LSMS_YY40_49_A,not f,testName,"40-49 A");
		check1(MV_GATE_X_LSMS_YY40_49_B,not f,testName,"40-49 B");
		check1(MV_GATE_X_LSMS_YY50_59_A,not e,testName,"50-59 A");
		check1(MV_GATE_X_LSMS_YY50_59_B,not e,testName,"50-59 B");
		check1(MV_GATE_X_LSMS_YY60_60_A,not h,testName,"60-69 A");
		check1(MV_GATE_X_LSMS_YY60_69_B,not h,testName,"60-69 B");
		check1(MV_GATE_X_LSMS_YY70_79_A,not g,testName,"70-79 A");
		check1(MV_GATE_X_LSMS_YY70_79_B,not g,testName,"70-79 B");
		check1(MV_GATE_X_LSMS_YY80_89_A,not j,testName,"80-89 A");
		check1(MV_GATE_X_LSMS_YY80_89_B,not j,testName,"80-89 B");
		check1(MV_GATE_X_LSMS_YY90_99_A,not k,testName,"90-99 A");
		check1(MV_GATE_X_LSMS_YY90_99_B,not k,testName,"90-99 B");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
