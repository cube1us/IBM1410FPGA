-- Test Bench VHDL for IBM SMS ALD page 13.50.01.1
-- Title: E CH PERCENT+COML AT I-O LATC-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/29/2020 10:18:04 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC_tb is
end ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC_tb;

architecture behavioral of ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_I_CYCLE_1:	 in STD_LOGIC;
		PS_B_CH_8_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_2_BIT:	 in STD_LOGIC;
		PS_I_RING_3_TIME:	 in STD_LOGIC;
		PS_B_CH_4_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_1_BIT:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_ANY_M_OR_L_OR_U_OP:	 in STD_LOGIC;
		MS_I_O_LOZENGE_LATCH:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_B_CH_A_BIT:	 in STD_LOGIC;
		MS_PROGRAM_RESET_2:	 in STD_LOGIC;
		PS_1401_MODE:	 in STD_LOGIC;
		PS_B_CH_NOT_B_BIT:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		MS_1401_MODE:	 in STD_LOGIC;
		MS_I_O_ASTERISK_LATCH:	 in STD_LOGIC;
		PS_B_CH_NOT_A_BIT:	 in STD_LOGIC;
		PS_SET_I_O_CH_SEL_REG:	 out STD_LOGIC;
		PS_I_O_PERCENT_OR_LOZENGE:	 out STD_LOGIC;
		MS_I_O_PERCENT_LATCH:	 out STD_LOGIC;
		PS_I_O_PERCENT_LATCH:	 out STD_LOGIC;
		PS_PERCENT_OR_COML_AT:	 out STD_LOGIC;
		MS_I_O_COML_AT_LATCH:	 out STD_LOGIC;
		MS_RESET_I_O_CH_SEL_REG:	 out STD_LOGIC;
		MS_PERCENT_OR_COML_AT:	 out STD_LOGIC;
		PS_I_O_COML_AT_LATCH:	 out STD_LOGIC;
		PS_COML_AT_OR_ASTERISK:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_I_CYCLE_1: STD_LOGIC := '0';
	signal PS_B_CH_8_BIT: STD_LOGIC := '0';
	signal PS_B_CH_NOT_2_BIT: STD_LOGIC := '0';
	signal PS_I_RING_3_TIME: STD_LOGIC := '0';
	signal PS_B_CH_4_BIT: STD_LOGIC := '0';
	signal PS_B_CH_NOT_1_BIT: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_ANY_M_OR_L_OR_U_OP: STD_LOGIC := '0';
	signal MS_I_O_LOZENGE_LATCH: STD_LOGIC := '1';
	signal PS_B_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_B_CH_A_BIT: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_2: STD_LOGIC := '1';
	signal PS_1401_MODE: STD_LOGIC := '0';
	signal PS_B_CH_NOT_B_BIT: STD_LOGIC := '0';
	signal PS_I_RING_OP_TIME: STD_LOGIC := '0';
	signal MS_1401_MODE: STD_LOGIC := '1';
	signal MS_I_O_ASTERISK_LATCH: STD_LOGIC := '1';
	signal PS_B_CH_NOT_A_BIT: STD_LOGIC := '0';

	-- Outputs

	signal PS_SET_I_O_CH_SEL_REG: STD_LOGIC;
	signal PS_I_O_PERCENT_OR_LOZENGE: STD_LOGIC;
	signal MS_I_O_PERCENT_LATCH: STD_LOGIC;
	signal PS_I_O_PERCENT_LATCH: STD_LOGIC;
	signal PS_PERCENT_OR_COML_AT: STD_LOGIC;
	signal MS_I_O_COML_AT_LATCH: STD_LOGIC;
	signal MS_RESET_I_O_CH_SEL_REG: STD_LOGIC;
	signal MS_PERCENT_OR_COML_AT: STD_LOGIC;
	signal PS_I_O_COML_AT_LATCH: STD_LOGIC;
	signal PS_COML_AT_OR_ASTERISK: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		PS_B_CH_8_BIT => PS_B_CH_8_BIT,
		PS_B_CH_NOT_2_BIT => PS_B_CH_NOT_2_BIT,
		PS_I_RING_3_TIME => PS_I_RING_3_TIME,
		PS_B_CH_4_BIT => PS_B_CH_4_BIT,
		PS_B_CH_NOT_1_BIT => PS_B_CH_NOT_1_BIT,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_ANY_M_OR_L_OR_U_OP => PS_ANY_M_OR_L_OR_U_OP,
		MS_I_O_LOZENGE_LATCH => MS_I_O_LOZENGE_LATCH,
		PS_B_CH_NOT_WM_BIT => PS_B_CH_NOT_WM_BIT,
		PS_B_CH_A_BIT => PS_B_CH_A_BIT,
		MS_PROGRAM_RESET_2 => MS_PROGRAM_RESET_2,
		PS_1401_MODE => PS_1401_MODE,
		PS_B_CH_NOT_B_BIT => PS_B_CH_NOT_B_BIT,
		PS_I_RING_OP_TIME => PS_I_RING_OP_TIME,
		MS_1401_MODE => MS_1401_MODE,
		MS_I_O_ASTERISK_LATCH => MS_I_O_ASTERISK_LATCH,
		PS_B_CH_NOT_A_BIT => PS_B_CH_NOT_A_BIT,
		PS_SET_I_O_CH_SEL_REG => PS_SET_I_O_CH_SEL_REG,
		PS_I_O_PERCENT_OR_LOZENGE => PS_I_O_PERCENT_OR_LOZENGE,
		MS_I_O_PERCENT_LATCH => MS_I_O_PERCENT_LATCH,
		PS_I_O_PERCENT_LATCH => PS_I_O_PERCENT_LATCH,
		PS_PERCENT_OR_COML_AT => PS_PERCENT_OR_COML_AT,
		MS_I_O_COML_AT_LATCH => MS_I_O_COML_AT_LATCH,
		MS_RESET_I_O_CH_SEL_REG => MS_RESET_I_O_CH_SEL_REG,
		MS_PERCENT_OR_COML_AT => MS_PERCENT_OR_COML_AT,
		PS_I_O_COML_AT_LATCH => PS_I_O_COML_AT_LATCH,
		PS_COML_AT_OR_ASTERISK => PS_COML_AT_OR_ASTERISK);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   
   -- Since this isn't a group page, we don't have the
   -- bus vectors to work with.
   
   begin

   -- Your test bench code

   testName := "13.50.01.1        ";
   
   MS_PROGRAM_RESET_2 <= '0';
   wait for 90 ns;
   MS_PROGRAM_RESET_2 <= '1';
   wait for 30 ns;
   
   check1(PS_SET_I_O_CH_SEL_REG,'0',testName,"SA");
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"SB");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"SC");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"SD");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"SE");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"SF");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"SG");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"SH");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"SI");
   check1(MS_RESET_I_O_CH_SEL_REG,'1',testName,"SJ");
   
   PS_ANY_M_OR_L_OR_U_OP <= '1';
   PS_I_CYCLE_1 <= '1';
   PS_I_RING_3_TIME <= '1';
   PS_LOGIC_GATE_E_1 <= '1';
   PS_B_CH_NOT_WM_BIT <= '1';
   PS_B_CH_8_BIT <= '1';
   PS_B_CH_4_BIT <= '1';
   PS_B_CH_NOT_2_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'0',testName,"1A");
   PS_B_CH_NOT_1_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'1',testName,"1B");
   
   PS_B_CH_A_BIT <= '1';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"1C");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"1D");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"1E");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"1F");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"1G");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"1H");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"1I");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"1J");
   PS_B_CH_NOT_B_BIT <= '1';   
   wait for 90 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'1',testName,"1K");
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"1L");
   check1(MS_I_O_PERCENT_LATCH,'0',testName,"1M");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"1N");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"1O");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"1P");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"1Q");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"1R");
   -- Latch should stay set until reset
   PS_ANY_M_OR_L_OR_U_OP <= '0';
   PS_I_CYCLE_1 <= '0';
   PS_I_RING_3_TIME <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   PS_B_CH_NOT_WM_BIT <= '0';
   PS_B_CH_8_BIT <= '0';
   PS_B_CH_4_BIT <= '0';
   PS_B_CH_NOT_2_BIT <= '0';
   PS_B_CH_NOT_1_BIT <= '0';
   PS_B_CH_A_BIT <= '0';
   PS_B_CH_NOT_B_BIT <= '0';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'1',testName,"1S");
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"1T");
   check1(MS_I_O_PERCENT_LATCH,'0',testName,"1U");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"1V");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"1W");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"1X");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"1Y");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"1Z");
   -- Reset the latch
   PS_I_RING_OP_TIME <= '1';
   wait for 30 ns;
   -- Not yet
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"1AA");
   PS_LOGIC_GATE_E_1 <= '1';
   -- Now
   wait for 30 ns;
   PS_I_RING_OP_TIME <= '0';
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"1AB");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"1AC");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"1AD");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"1AE");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"1AF");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"1AG");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"1AH");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"1AI");
   
   MS_1401_MODE <= '1';
   PS_ANY_M_OR_L_OR_U_OP <= '1';
   PS_I_CYCLE_1 <= '1';
   PS_I_RING_3_TIME <= '1';
   PS_LOGIC_GATE_E_1 <= '1';
   PS_B_CH_NOT_WM_BIT <= '1';
   PS_B_CH_8_BIT <= '1';
   PS_B_CH_4_BIT <= '1';
   PS_B_CH_NOT_2_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'0',testName,"2A");
   PS_B_CH_NOT_1_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'1',testName,"2B");
   PS_B_CH_NOT_A_BIT <= '1';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"2C");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"2D");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"2E");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"2F");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"2G");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"2H");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"2I");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"2J");
   PS_B_CH_NOT_B_BIT <= '1';   
   wait for 90 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"2K");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"2L");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"2M");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"2N");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"2O");
   check1(PS_I_O_COML_AT_LATCH,'1',testName,"2P");
   check1(MS_I_O_COML_AT_LATCH,'0',testName,"2Q");
   check1(PS_COML_AT_OR_ASTERISK,'1',testName,"2R");
   -- Latch should stay set until reset
   PS_ANY_M_OR_L_OR_U_OP <= '0';
   PS_I_CYCLE_1 <= '0';
   PS_I_RING_3_TIME <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   PS_B_CH_NOT_WM_BIT <= '0';
   PS_B_CH_8_BIT <= '0';
   PS_B_CH_4_BIT <= '0';
   PS_B_CH_NOT_2_BIT <= '0';
   PS_B_CH_NOT_1_BIT <= '0';
   PS_B_CH_NOT_A_BIT <= '0';
   PS_B_CH_NOT_B_BIT <= '0';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"2S");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"2T");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"2U");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"2V");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"2W");
   check1(PS_I_O_COML_AT_LATCH,'1',testName,"2X");
   check1(MS_I_O_COML_AT_LATCH,'0',testName,"2Y");
   check1(PS_COML_AT_OR_ASTERISK,'1',testName,"2Z");
   -- Reset the latch
   PS_I_RING_OP_TIME <= '1';
   wait for 30 ns;
   -- Not yet
   check1(PS_I_O_COML_AT_LATCH,'1',testName,"1AA");
   PS_LOGIC_GATE_E_1 <= '1';
   -- Now
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"2AB");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"2AC");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"2AD");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"2AE");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"2AF");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"2AG");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"2AH");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"2AI");
   PS_I_RING_OP_TIME <= '0';

   -- Now, re run the two tests in 1401 mode, which yields
   -- different results.  In 1401 mode, NOT A and NOT B
   -- sets the percent latch, not the coml at latch
   
   PS_1401_MODE <= '1';
   MS_1401_MODE <= '0';
  
   PS_ANY_M_OR_L_OR_U_OP <= '1';
   PS_I_CYCLE_1 <= '1';
   PS_I_RING_3_TIME <= '1';
   PS_LOGIC_GATE_E_1 <= '1';
   PS_B_CH_NOT_WM_BIT <= '1';
   PS_B_CH_8_BIT <= '1';
   PS_B_CH_4_BIT <= '1';
   PS_B_CH_NOT_2_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'0',testName,"3A");
   PS_B_CH_NOT_1_BIT <= '1';
   wait for 30 ns;
   check1(PS_SET_I_O_CH_SEL_REG,'1',testName,"3B");
   
   PS_B_CH_NOT_B_BIT <= '1';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"3C");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"3D");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"3E");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"3F");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"3G");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"3H");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"3I");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"3J");
   
   PS_B_CH_A_BIT <= '0';
   PS_B_CH_NOT_A_BIT <= '1';
   wait for 90 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'1',testName,"3K");
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"3L");
   check1(MS_I_O_PERCENT_LATCH,'0',testName,"3M");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"3N");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"3O");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"3P");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"3Q");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"3R");
   -- Latch should stay set until reset
   PS_ANY_M_OR_L_OR_U_OP <= '0';
   PS_I_CYCLE_1 <= '0';
   PS_I_RING_3_TIME <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   PS_B_CH_NOT_WM_BIT <= '0';
   PS_B_CH_8_BIT <= '0';
   PS_B_CH_4_BIT <= '0';
   PS_B_CH_NOT_2_BIT <= '0';
   PS_B_CH_NOT_1_BIT <= '0';
   PS_B_CH_A_BIT <= '0';
   PS_B_CH_NOT_B_BIT <= '0';
   PS_1401_MODE <= '0';
   wait for 30 ns;
   check1(PS_I_O_PERCENT_OR_LOZENGE,'1',testName,"3S");
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"3T");
   check1(MS_I_O_PERCENT_LATCH,'0',testName,"3U");
   check1(PS_PERCENT_OR_COML_AT,'1',testName,"3V");
   check1(MS_PERCENT_OR_COML_AT,'0',testName,"3W");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"3X");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"3Y");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"3Z");
   -- Reset the latch
   PS_I_RING_OP_TIME <= '1';
   wait for 30 ns;
   -- Not yet
   check1(PS_I_O_PERCENT_LATCH,'1',testName,"3AA");
   PS_LOGIC_GATE_E_1 <= '1';
   -- Now
   wait for 30 ns;
   PS_I_RING_OP_TIME <= '0';
   check1(PS_I_O_PERCENT_OR_LOZENGE,'0',testName,"3AB");
   check1(PS_I_O_PERCENT_LATCH,'0',testName,"3AC");
   check1(MS_I_O_PERCENT_LATCH,'1',testName,"3AD");
   check1(PS_PERCENT_OR_COML_AT,'0',testName,"3AE");
   check1(MS_PERCENT_OR_COML_AT,'1',testName,"3AF");
   check1(PS_I_O_COML_AT_LATCH,'0',testName,"3AG");
   check1(MS_I_O_COML_AT_LATCH,'1',testName,"3AH");
   check1(PS_COML_AT_OR_ASTERISK,'0',testName,"3AI");
   
   MS_I_O_ASTERISK_LATCH <= '0';
   wait for 30 ns;
   check1(PS_COML_AT_OR_ASTERISK,'1',testName,"4A");
   MS_I_O_ASTERISK_LATCH <= '1';
   

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
