-- VHDL for IBM SMS ALD page 15.39.08.1
-- Title: A DATA REG WM BIT AND DRIVE-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/9/2020 11:22:46 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_39_08_1_A_DATA_REG_WM_BIT_AND_DRIVE_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_RESET_A_DATA_REG:	 in STD_LOGIC;
		PS_B_CH_WM_BIT_1:	 in STD_LOGIC;
		PS_SW_B_CH_TO_A_REG:	 in STD_LOGIC;
		PS_GATE_A_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_GATE_E2_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_E2_REG_WM_BIT:	 in STD_LOGIC;
		PS_F2_REG_WM_BIT:	 in STD_LOGIC;
		PS_GATE_F2_DATA_REG_TO_A_CH:	 in STD_LOGIC;
		PS_A_DATA_REG_WM_BIT:	 out STD_LOGIC;
		PS_A_CH_NOT_WM_BIT:	 out STD_LOGIC;
		PB_A_CH_WM_BIT:	 out STD_LOGIC;
		PS_A_CH_WM_BIT:	 out STD_LOGIC;
		PB_A_CH_NOT_WM_BIT:	 out STD_LOGIC;
		LAMP_11C8C12:	 out STD_LOGIC);
end ALD_15_39_08_1_A_DATA_REG_WM_BIT_AND_DRIVE_ACC;

architecture behavioral of ALD_15_39_08_1_A_DATA_REG_WM_BIT_AND_DRIVE_ACC is 

	signal OUT_2A_C: STD_LOGIC;
	signal OUT_5B_D: STD_LOGIC;
	signal OUT_5B_D_Latch: STD_LOGIC;
	signal OUT_4B_C: STD_LOGIC;
	signal OUT_4B_C_Latch: STD_LOGIC;
	signal OUT_5C_NoPin: STD_LOGIC;
	signal OUT_5D_P: STD_LOGIC;
	signal OUT_4D_E: STD_LOGIC;
	signal OUT_3D_C: STD_LOGIC;
	signal OUT_5E_K: STD_LOGIC;
	signal OUT_1F_P: STD_LOGIC;
	signal OUT_5G_K: STD_LOGIC;
	signal OUT_2G_C: STD_LOGIC;
	signal OUT_1H_Q: STD_LOGIC;

begin

	OUT_2A_C <= NOT OUT_3D_C;
	LAMP_11C8C12 <= OUT_2A_C;
	OUT_5B_D_Latch <= NOT(OUT_4B_C AND MS_RESET_A_DATA_REG );
	OUT_4B_C_Latch <= NOT(OUT_5B_D AND OUT_5C_NoPin );
	OUT_5C_NoPin <= NOT(PS_B_CH_WM_BIT_1 AND PS_SW_B_CH_TO_A_REG );
	OUT_5D_P <= NOT(OUT_4B_C AND PS_GATE_A_DATA_REG_TO_A_CH );
	OUT_4D_E <= NOT(OUT_5D_P AND OUT_5E_K AND OUT_5G_K );

	SMS_AEK_3D: entity SMS_AEK
	    port map (
		IN1 => OUT_4D_E,	-- Pin D
		OUT1 => OUT_3D_C,
		IN2 => OPEN );

	OUT_5E_K <= NOT(PS_GATE_E2_DATA_REG_TO_A_CH AND PS_E2_REG_WM_BIT );
	OUT_1F_P <= NOT OUT_3D_C;
	OUT_5G_K <= NOT(PS_F2_REG_WM_BIT AND PS_GATE_F2_DATA_REG_TO_A_CH );

	SMS_AEK_2G: entity SMS_AEK
	    port map (
		IN1 => OUT_3D_C,	-- Pin D
		OUT1 => OUT_2G_C,
		IN2 => OPEN );

	OUT_1H_Q <= NOT OUT_2G_C;

	PS_A_DATA_REG_WM_BIT <= OUT_4B_C;
	PS_A_CH_NOT_WM_BIT <= OUT_3D_C;
	PB_A_CH_WM_BIT <= OUT_1F_P;
	PS_A_CH_WM_BIT <= OUT_2G_C;
	PB_A_CH_NOT_WM_BIT <= OUT_1H_Q;

	Latch_5B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5B_D_Latch,
		Q => OUT_5B_D,
		QBar => OPEN );

	Latch_4B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4B_C_Latch,
		Q => OUT_4B_C,
		QBar => OPEN );


end;
