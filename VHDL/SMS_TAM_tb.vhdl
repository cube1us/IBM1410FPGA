-- Test Bench VHDL for IBM SMS TAM card
-- Title: SMS_TAM_tb.vhdl
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 6/20/2020 10:29:27 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity SMS_TAM_tb is
end SMS_TAM_tb;

architecture behavioral of SMS_TAM_tb is

	-- Component Declaration for the Unit Under Test (UUT)

component SMS_TAM
    Port ( 
        FPGA_CLK: IN STD_LOGIC;
        DCSET:    IN STD_LOGIC;
        DCRESET:  IN STD_LOGIC;
        GATEON1:  IN STD_LOGIC;
        ACSET1:   IN STD_LOGIC;
        GATEON2:  IN STD_LOGIC;
        ACSET2:   IN STD_LOGIC;
        GATEOFF1: IN STD_LOGIC;
        ACRESET1: IN STD_LOGIC;
        GATEOFF2: IN STD_LOGIC;
        ACRESET2: IN STD_LOGIC;
        DCRFORCE: IN STD_LOGIC;
	    DCSFORCE: IN STD_LOGIC;
        OUTOFF:  OUT STD_LOGIC;
        OUTON:   OUT STD_LOGIC;
	GROUND:  OUT STD_LOGIC );
	end component;

	-- Inputs

        signal FPGA_CLK: STD_LOGIC := '0';
        signal DCSET:    STD_LOGIC := '1';    -- Pulled to gnd if not connected (pin C)
        signal DCRESET:  STD_LOGIC := '1';    -- Pulled to gnd if not connected (pin H)
        signal GATEON1:  STD_LOGIC := '1';    -- Will likely be pulled to gnd outside gate (pin A)
        signal ACSET1:   STD_LOGIC := '0';    -- Inactive if not connected (pin D)
        signal GATEON2:  STD_LOGIC := '1';    -- Will likely be pulled to gnd outside gate (pin F)
        signal ACSET2:   STD_LOGIC := '0';    -- Inactive if not connected (pin E)
        signal GATEOFF1: STD_LOGIC := '1';    -- Will likely be pulled to gnd outside gate (pin R)
        signal ACRESET1: STD_LOGIC := '0';    -- Inactive if not connected (pin Q)
        signal GATEOFF2: STD_LOGIC := '1';    -- Will likely be pulled to gnd outside gate (pin K)
        signal ACRESET2: STD_LOGIC := '0';    -- Inactive if not connected (pin L)
        signal DCRFORCE: STD_LOGIC := '0';    -- Used for Wired OR output being forced (Virtual pin "T")
	    signal DCSFORCE: STD_LOGIC := '0';    -- used for Wired OR output being forced (Virtual pin "X")

        -- Outputs

        signal OUTOFF:  STD_LOGIC;           -- Pin P
        signal OUTON:   STD_LOGIC;           -- Pin B
	    signal GROUND:  STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;     

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

UUT: SMS_TAM port map(
        FPGA_CLK => FPGA_CLK,
        DCSET => DCSET,
        DCRESET => DCRESET,
        GATEON1 => GATEON1,
        ACSET1 => ACSET1,
        GATEON2 => GATEON2,
        ACSET2 => ACSET2,
        GATEOFF1 => GATEOFF1,
        ACRESET1 => ACRESET1,
        GATEOFF2 => GATEOFF2,
        ACRESET2 => ACRESET2,
        DCRFORCE => DCRFORCE,
	    DCSFORCE => DCSFORCE,
        OUTOFF => OUTOFF,
        OUTON => OUTON,
        GROUND => GROUND);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);

   begin

   -- Your test bench code
   
   testName := "SMS_TAM           ";
   
   DCRESET <= '0';
   wait for 30 ns;
   DCRESET <= '1';
   wait for 30 ns;
   check1(OUTON,'0',testName,"DCReset A");
   check1(OUTOFF,'1',testName,"DCReset B");
   
   DCSET <= '0';
   wait for 30 ns;
   DCSET <= '1';
   wait for 30 ns;
   check1(OUTON,'1',testName,"DCSet A");
   check1(OUTOFF,'0',testName,"DCSet B");
   
   DCRFORCE <= '1';
   wait for 30 ns;
   DCRFORCE <= '0';
   wait for 30 ns;
   check1(OUTON,'0',testName,"DCRForce A");
   check1(OUTOFF,'1',testName,"DCRForce B");

   DCSFORCE <= '1';
   wait for 30 ns;
   DCSFORCE <= '0';
   wait for 30 ns;
   check1(OUTON,'1',testName,"DCSForce A");
   check1(OUTOFF,'0',testName,"DCSForce B");
   
   DCRESET <= '0';
   wait for 30 ns;
   DCRESET <= '1';
   wait for 30 ns;
   
   GATEON1 <= '1';
   wait for 90 ns;
   check1(OUTON,'0',testName,"1A");
   check1(OUTOFF,'1',testName,"1B");
   ACSET1 <= '1';
   wait for 90 ns;
   ACSET1 <= '0';
   GATEON1 <= '0';
   wait for 90 ns;
   check1(OUTON,'1',testName,"1C");
   check1(OUTOFF,'0',testName,"1D");
   
   GATEOFF1 <= '1';
   wait for 90 ns;
   check1(OUTON,'1',testName,"2A");
   check1(OUTOFF,'0',testName,"2B");
   ACRESET1 <= '1';
   wait for 90 ns;
   ACRESET1 <= '0';
   GATEOFF1 <= '0';
   wait for 90 ns;
   check1(OUTON,'0',testName,"2C");
   check1(OUTOFF,'1',testName,"2D");
   
   DCRESET <= '0';
   wait for 30 ns;
   DCRESET <= '1';
   wait for 30 ns;
   
   GATEON2 <= '1';
   wait for 90 ns;
   check1(OUTON,'0',testName,"3A");
   check1(OUTOFF,'1',testName,"3B");
   ACSET2 <= '1';
   wait for 90 ns;
   ACSET2 <= '0';
   GATEON2 <= '0';
   wait for 90 ns;
   check1(OUTON,'1',testName,"3C");
   check1(OUTOFF,'0',testName,"3D");
   
   GATEOFF2 <= '1';
   wait for 90 ns;
   check1(OUTON,'1',testName,"4A");
   check1(OUTOFF,'0',testName,"4B");
   ACRESET2 <= '1';
   wait for 90 ns;
   ACRESET2 <= '0';
   GATEOFF2 <= '0';
   wait for 90 ns;
   check1(OUTON,'0',testName,"4C");
   check1(OUTOFF,'1',testName,"4D");

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
