-- VHDL for IBM SMS ALD page 37.10.02.1
-- Title: INFO INPUT GATING CHAR 1
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/19/2020 1:16:08 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_37_10_02_1_INFO_INPUT_GATING_CHAR_1 is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_ASSEMBLY_CH_1_BIT:	 in STD_LOGIC;
		MY_LD_CHR_1:	 in STD_LOGIC;
		MY_INH_CHAR_1_1_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_2_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_2_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_4_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_4_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_8_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_8_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_A_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_A_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_B_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_B_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_C_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_C_BIT:	 in STD_LOGIC;
		MY_ASSEMBLY_CH_WM_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_WM_BIT:	 in STD_LOGIC;
		MY_INH_CHAR_1_1_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_2_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_4_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_8_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_A_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_B_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_C_BIT_D:	 out STD_LOGIC;
		MY_INH_CHAR_1_WM_BIT_D:	 out STD_LOGIC);
end ALD_37_10_02_1_INFO_INPUT_GATING_CHAR_1;

architecture behavioral of ALD_37_10_02_1_INFO_INPUT_GATING_CHAR_1 is 

	signal OUT_5A_G: STD_LOGIC;
	signal OUT_5B_C: STD_LOGIC;
	signal OUT_5C_F: STD_LOGIC;
	signal OUT_5D_R: STD_LOGIC;
	signal OUT_5E_G: STD_LOGIC;
	signal OUT_5F_C: STD_LOGIC;
	signal OUT_5G_F: STD_LOGIC;
	signal OUT_5H_R: STD_LOGIC;
	signal OUT_DOT_5A: STD_LOGIC;
	signal OUT_DOT_5B: STD_LOGIC;
	signal OUT_DOT_5C: STD_LOGIC;
	signal OUT_DOT_5D: STD_LOGIC;
	signal OUT_DOT_5E: STD_LOGIC;
	signal OUT_DOT_5F: STD_LOGIC;
	signal OUT_DOT_5G: STD_LOGIC;
	signal OUT_DOT_5H: STD_LOGIC;

begin

	OUT_5A_G <= NOT(MY_ASSEMBLY_CH_1_BIT OR MY_LD_CHR_1 );
	OUT_5B_C <= NOT(MY_ASSEMBLY_CH_2_BIT OR MY_LD_CHR_1 );
	OUT_5C_F <= NOT(MY_ASSEMBLY_CH_4_BIT OR MY_LD_CHR_1 );
	OUT_5D_R <= NOT(MY_LD_CHR_1 OR MY_ASSEMBLY_CH_8_BIT );
	OUT_5E_G <= NOT(MY_ASSEMBLY_CH_A_BIT OR MY_LD_CHR_1 );
	OUT_5F_C <= NOT(MY_ASSEMBLY_CH_B_BIT OR MY_LD_CHR_1 );
	OUT_5G_F <= NOT(MY_ASSEMBLY_CH_C_BIT OR MY_LD_CHR_1 );
	OUT_5H_R <= NOT(MY_LD_CHR_1 OR MY_ASSEMBLY_CH_WM_BIT );
	OUT_DOT_5A <= OUT_5A_G OR MY_INH_CHAR_1_1_BIT;
	OUT_DOT_5B <= OUT_5B_C OR MY_INH_CHAR_1_2_BIT;
	OUT_DOT_5C <= OUT_5C_F OR MY_INH_CHAR_1_4_BIT;
	OUT_DOT_5D <= OUT_5D_R OR MY_INH_CHAR_1_8_BIT;
	OUT_DOT_5E <= OUT_5E_G OR MY_INH_CHAR_1_A_BIT;
	OUT_DOT_5F <= OUT_5F_C OR MY_INH_CHAR_1_B_BIT;
	OUT_DOT_5G <= OUT_5G_F OR MY_INH_CHAR_1_C_BIT;
	OUT_DOT_5H <= OUT_5H_R OR MY_INH_CHAR_1_WM_BIT;

	MY_INH_CHAR_1_1_BIT_D <= OUT_DOT_5A;
	MY_INH_CHAR_1_2_BIT_D <= OUT_DOT_5B;
	MY_INH_CHAR_1_4_BIT_D <= OUT_DOT_5C;
	MY_INH_CHAR_1_8_BIT_D <= OUT_DOT_5D;
	MY_INH_CHAR_1_A_BIT_D <= OUT_DOT_5E;
	MY_INH_CHAR_1_B_BIT_D <= OUT_DOT_5F;
	MY_INH_CHAR_1_C_BIT_D <= OUT_DOT_5G;
	MY_INH_CHAR_1_WM_BIT_D <= OUT_DOT_5H;


end;
