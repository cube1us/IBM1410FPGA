-- Test Bench VHDL for IBM SMS ALD page 34.11.01.1
-- Title: Y LSMS GATES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/16/2020 5:11:34 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_34_11_01_1_Y_LSMS_GATES_tb is
end ALD_34_11_01_1_Y_LSMS_GATES_tb;

architecture behavioral of ALD_34_11_01_1_Y_LSMS_GATES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_34_11_01_1_Y_LSMS_GATES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_1K_2K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_0K_1K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_3K_4K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_2K_3K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_5K_6K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_4K_5K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_6K_7K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_7K_8K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_9K_10K:	 in STD_LOGIC;
		PY_Y_LSMS_GATE_SEL_8K_9K:	 in STD_LOGIC;
		MY_GATE_Y_LSMS_00_09XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_00_09XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_10_19XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_10_19XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_20_29XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_20_29XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_30_39XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_30_39XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_40_49XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_40_49XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_50_59XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_50_59XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_60_69XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_60_69XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_70_79XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_70_79XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_80_89XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_80_89XX_B:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_90_99XX_A:	 out STD_LOGIC;
		MY_GATE_Y_LSMS_90_99XX_B:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_1K_2K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_0K_1K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_3K_4K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_2K_3K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_5K_6K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_4K_5K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_6K_7K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_7K_8K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_9K_10K: STD_LOGIC := '0';
	signal PY_Y_LSMS_GATE_SEL_8K_9K: STD_LOGIC := '0';

	-- Outputs

	signal MY_GATE_Y_LSMS_00_09XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_00_09XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_10_19XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_10_19XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_20_29XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_20_29XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_30_39XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_30_39XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_40_49XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_40_49XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_50_59XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_50_59XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_60_69XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_60_69XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_70_79XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_70_79XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_80_89XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_80_89XX_B: STD_LOGIC;
	signal MY_GATE_Y_LSMS_90_99XX_A: STD_LOGIC;
	signal MY_GATE_Y_LSMS_90_99XX_B: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_34_11_01_1_Y_LSMS_GATES port map(
		FPGA_CLK => FPGA_CLK,
		PY_Y_LSMS_GATE_SEL_1K_2K => PY_Y_LSMS_GATE_SEL_1K_2K,
		PY_Y_LSMS_GATE_SEL_0K_1K => PY_Y_LSMS_GATE_SEL_0K_1K,
		PY_Y_LSMS_GATE_SEL_3K_4K => PY_Y_LSMS_GATE_SEL_3K_4K,
		PY_Y_LSMS_GATE_SEL_2K_3K => PY_Y_LSMS_GATE_SEL_2K_3K,
		PY_Y_LSMS_GATE_SEL_5K_6K => PY_Y_LSMS_GATE_SEL_5K_6K,
		PY_Y_LSMS_GATE_SEL_4K_5K => PY_Y_LSMS_GATE_SEL_4K_5K,
		PY_Y_LSMS_GATE_SEL_6K_7K => PY_Y_LSMS_GATE_SEL_6K_7K,
		PY_Y_LSMS_GATE_SEL_7K_8K => PY_Y_LSMS_GATE_SEL_7K_8K,
		PY_Y_LSMS_GATE_SEL_9K_10K => PY_Y_LSMS_GATE_SEL_9K_10K,
		PY_Y_LSMS_GATE_SEL_8K_9K => PY_Y_LSMS_GATE_SEL_8K_9K,
		MY_GATE_Y_LSMS_00_09XX_A => MY_GATE_Y_LSMS_00_09XX_A,
		MY_GATE_Y_LSMS_00_09XX_B => MY_GATE_Y_LSMS_00_09XX_B,
		MY_GATE_Y_LSMS_10_19XX_A => MY_GATE_Y_LSMS_10_19XX_A,
		MY_GATE_Y_LSMS_10_19XX_B => MY_GATE_Y_LSMS_10_19XX_B,
		MY_GATE_Y_LSMS_20_29XX_A => MY_GATE_Y_LSMS_20_29XX_A,
		MY_GATE_Y_LSMS_20_29XX_B => MY_GATE_Y_LSMS_20_29XX_B,
		MY_GATE_Y_LSMS_30_39XX_A => MY_GATE_Y_LSMS_30_39XX_A,
		MY_GATE_Y_LSMS_30_39XX_B => MY_GATE_Y_LSMS_30_39XX_B,
		MY_GATE_Y_LSMS_40_49XX_A => MY_GATE_Y_LSMS_40_49XX_A,
		MY_GATE_Y_LSMS_40_49XX_B => MY_GATE_Y_LSMS_40_49XX_B,
		MY_GATE_Y_LSMS_50_59XX_A => MY_GATE_Y_LSMS_50_59XX_A,
		MY_GATE_Y_LSMS_50_59XX_B => MY_GATE_Y_LSMS_50_59XX_B,
		MY_GATE_Y_LSMS_60_69XX_A => MY_GATE_Y_LSMS_60_69XX_A,
		MY_GATE_Y_LSMS_60_69XX_B => MY_GATE_Y_LSMS_60_69XX_B,
		MY_GATE_Y_LSMS_70_79XX_A => MY_GATE_Y_LSMS_70_79XX_A,
		MY_GATE_Y_LSMS_70_79XX_B => MY_GATE_Y_LSMS_70_79XX_B,
		MY_GATE_Y_LSMS_80_89XX_A => MY_GATE_Y_LSMS_80_89XX_A,
		MY_GATE_Y_LSMS_80_89XX_B => MY_GATE_Y_LSMS_80_89XX_B,
		MY_GATE_Y_LSMS_90_99XX_A => MY_GATE_Y_LSMS_90_99XX_A,
		MY_GATE_Y_LSMS_90_99XX_B => MY_GATE_Y_LSMS_90_99XX_B);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "33.11.01.1        ";

   for tt in 0 to 2**10 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);

		PY_Y_LSMS_GATE_SEL_1K_2K <= a;
		PY_Y_LSMS_GATE_SEL_0K_1K <= b;
		PY_Y_LSMS_GATE_SEL_3K_4K <= c;
		PY_Y_LSMS_GATE_SEL_2K_3K <= d;
		PY_Y_LSMS_GATE_SEL_5K_6K <= e;
		PY_Y_LSMS_GATE_SEL_4K_5K <= f;
		PY_Y_LSMS_GATE_SEL_6K_7K <= g;
		PY_Y_LSMS_GATE_SEL_7K_8K <= h;
		PY_Y_LSMS_GATE_SEL_9K_10K <= j;
		PY_Y_LSMS_GATE_SEL_8K_9K <= k;
      
      wait for 30 ns;
      
		check1(MY_GATE_Y_LSMS_00_09XX_A,not b,testName,"00-09xx A");
      check1(MY_GATE_Y_LSMS_00_09XX_B,not b,testName,"00-09xx B");
      check1(MY_GATE_Y_LSMS_10_19XX_A,not a,testName,"10-19xx A");
      check1(MY_GATE_Y_LSMS_10_19XX_B,not a,testName,"10-19xx B");
      check1(MY_GATE_Y_LSMS_20_29XX_A,not d,testName,"20-29xx A");
      check1(MY_GATE_Y_LSMS_20_29XX_B,not d,testName,"20-29xx B");
      check1(MY_GATE_Y_LSMS_30_39XX_A,not c,testName,"30-39xx A");
      check1(MY_GATE_Y_LSMS_30_39XX_B,not c,testName,"30-39xx B");
      check1(MY_GATE_Y_LSMS_40_49XX_A,not f,testName,"40-49xx A");
      check1(MY_GATE_Y_LSMS_40_49XX_B,not f,testName,"40-49xx B");
      check1(MY_GATE_Y_LSMS_50_59XX_A,not e,testName,"50-59xx A");
      check1(MY_GATE_Y_LSMS_50_59XX_B,not e,testName,"50-59xx B");
      check1(MY_GATE_Y_LSMS_60_69XX_A,not g,testName,"60-69xx A");
      check1(MY_GATE_Y_LSMS_60_69XX_B,not g,testName,"60-69xx B");
      check1(MY_GATE_Y_LSMS_70_79XX_A,not h,testName,"70-79xx A");
      check1(MY_GATE_Y_LSMS_70_79XX_B,not h,testName,"70-79xx B");
      check1(MY_GATE_Y_LSMS_80_89XX_A,not k,testName,"80-89xx A");
      check1(MY_GATE_Y_LSMS_80_89XX_B,not k,testName,"80-89xx B");
      check1(MY_GATE_Y_LSMS_90_99XX_A,not j,testName,"90-99xx A");
      check1(MY_GATE_Y_LSMS_90_99XX_B,not j,testName,"90-99xx B");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
