-- Test Bench VHDL for IBM SMS ALD page 13.66.04.1
-- Title: F CH DATA FLOW CONTROL
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 8/9/2020 9:52:48 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_66_04_1_F_CH_DATA_FLOW_CONTROL_tb is
end ALD_13_66_04_1_F_CH_DATA_FLOW_CONTROL_tb;

architecture behavioral of ALD_13_66_04_1_F_CH_DATA_FLOW_CONTROL_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_13_66_04_1_F_CH_DATA_FLOW_CONTROL
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_F2_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_SET_F2_REG:	 in STD_LOGIC;
		PS_F1_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_F_CH_INPUT_MODE:	 in STD_LOGIC;
		MS_F1_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_F2_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_F1_REG_WM_BIT:	 in STD_LOGIC;
		PS_F1_REG_NOT_WM_BIT:	 in STD_LOGIC;
		PS_F_CH_OUTPUT_MODE:	 in STD_LOGIC;
		PS_COPY_F1_BCD_TO_F2_REG:	 out STD_LOGIC;
		MS_SET_F2_WORD_SEPARATOR:	 out STD_LOGIC;
		PS_COPY_INV_F1_WM_DOT_C_BIT:	 out STD_LOGIC;
		PS_COPY_F1_WM_DOT_C_BIT:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_F2_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_SET_F2_REG: STD_LOGIC := '0';
	signal PS_F1_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_F_CH_INPUT_MODE: STD_LOGIC := '0';
	signal MS_F1_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_F2_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_F1_REG_WM_BIT: STD_LOGIC := '0';
	signal PS_F1_REG_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_F_CH_OUTPUT_MODE: STD_LOGIC := '0';

	-- Outputs

	signal PS_COPY_F1_BCD_TO_F2_REG: STD_LOGIC;
	signal MS_SET_F2_WORD_SEPARATOR: STD_LOGIC;
	signal PS_COPY_INV_F1_WM_DOT_C_BIT: STD_LOGIC;
	signal PS_COPY_F1_WM_DOT_C_BIT: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_13_66_04_1_F_CH_DATA_FLOW_CONTROL port map(
		FPGA_CLK => FPGA_CLK,
		MS_F2_REG_WORD_SEPARATOR => MS_F2_REG_WORD_SEPARATOR,
		PS_SET_F2_REG => PS_SET_F2_REG,
		PS_F1_REG_WORD_SEPARATOR => PS_F1_REG_WORD_SEPARATOR,
		PS_F_CH_INPUT_MODE => PS_F_CH_INPUT_MODE,
		MS_F1_REG_WORD_SEPARATOR => MS_F1_REG_WORD_SEPARATOR,
		PS_F2_REG_WORD_SEPARATOR => PS_F2_REG_WORD_SEPARATOR,
		PS_F1_REG_WM_BIT => PS_F1_REG_WM_BIT,
		PS_F1_REG_NOT_WM_BIT => PS_F1_REG_NOT_WM_BIT,
		PS_F_CH_OUTPUT_MODE => PS_F_CH_OUTPUT_MODE,
		PS_COPY_F1_BCD_TO_F2_REG => PS_COPY_F1_BCD_TO_F2_REG,
		MS_SET_F2_WORD_SEPARATOR => MS_SET_F2_WORD_SEPARATOR,
		PS_COPY_INV_F1_WM_DOT_C_BIT => PS_COPY_INV_F1_WM_DOT_C_BIT,
		PS_COPY_F1_WM_DOT_C_BIT => PS_COPY_F1_WM_DOT_C_BIT);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code
  
   testName := "13.66.04.1        ";
   
   PS_F1_REG_WORD_SEPARATOR <= '1';
   MS_F2_REG_WORD_SEPARATOR <= '1';   
   wait for 30 ns;
   check1(PS_COPY_F1_BCD_TO_F2_REG,'0',testName,"1A");
   PS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_F1_BCD_TO_F2_REG,'1',testName,"1B");
   PS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   MS_F2_REG_WORD_SEPARATOR <= '0';   
   wait for 30 ns;
   check1(PS_COPY_F1_BCD_TO_F2_REG,'1',testName,"1C");
   MS_F2_REG_WORD_SEPARATOR <= '1';   
   PS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   
   MS_F2_REG_WORD_SEPARATOR <= '1';
   PS_SET_F2_REG <= '1';
   wait for 30 ns;
   check1(MS_SET_F2_WORD_SEPARATOR,'1',testName,"2A");
   PS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(MS_SET_F2_WORD_SEPARATOR,'0',testName,"2B");
   PS_SET_F2_REG <= '0';
   wait for 30 ns;
   check1(MS_SET_F2_WORD_SEPARATOR,'1',testName,"2C");
   PS_SET_F2_REG <= '1';
   wait for 30 ns;
   MS_F2_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(MS_SET_F2_WORD_SEPARATOR,'1',testName,"2D");
   MS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(MS_SET_F2_WORD_SEPARATOR,'0',testName,"2E");
   PS_SET_F2_REG <= '0';
   PS_F1_REG_WORD_SEPARATOR <= '0';
   
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"3A");
   PS_F_CH_INPUT_MODE <= '1';
   MS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"3B");
   PS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'1',testName,"3C");
   MS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"3D");
   MS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   PS_F_CH_INPUT_MODE <= '0';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"3E");
   PS_F_CH_INPUT_MODE <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'1',testName,"3F");
   PS_F_CH_INPUT_MODE <= '0';
   PS_F2_REG_WORD_SEPARATOR <= '0';
   
   PS_F1_REG_WORD_SEPARATOR <= '1';
   PS_F2_REG_WORD_SEPARATOR <= '1';
   PS_F1_REG_WM_BIT <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"4A");
   PS_F_CH_OUTPUT_MODE <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'1',testName,"4B");
   PS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"4C");
   PS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   PS_F2_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"4D");
   PS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   PS_F1_REG_WM_BIT <= '0';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'0',testName,"4E");
   PS_F1_REG_WM_BIT <= '1';
   wait for 30 ns;
   check1(PS_COPY_INV_F1_WM_DOT_C_BIT,'1',testName,"4F");
   PS_F1_REG_WORD_SEPARATOR <= '0';
   PS_F2_REG_WORD_SEPARATOR <= '0';
   PS_F1_REG_WM_BIT <= '0';
   PS_F_CH_OUTPUT_MODE <= '0';
   
   
   PS_F1_REG_WORD_SEPARATOR <= '1';
   PS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"5A");
   PS_F1_REG_NOT_WM_BIT <= '1';   
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'1',testName,"5B");
   PS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"5C");
   PS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   PS_F2_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"5D");
   PS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'1',testName,"5E");
   PS_F1_REG_WORD_SEPARATOR <= '0';
   PS_F2_REG_WORD_SEPARATOR <= '0';
   PS_F1_REG_NOT_WM_BIT <= '0';   

   MS_F2_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"6A");
   PS_F_CH_INPUT_MODE <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'1',testName,"6B");
   MS_F2_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"6C");
   PS_F_CH_INPUT_MODE <= '0';
   MS_F2_REG_WORD_SEPARATOR <= '1';
   
   MS_F1_REG_WORD_SEPARATOR <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"7A");
   PS_F_CH_OUTPUT_MODE <= '1';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'1',testName,"7B");
   MS_F1_REG_WORD_SEPARATOR <= '0';
   wait for 30 ns;
   check1(PS_COPY_F1_WM_DOT_C_BIT,'0',testName,"7C");
   PS_F_CH_OUTPUT_MODE <= '0';
   MS_F1_REG_WORD_SEPARATOR <= '1';
  

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
