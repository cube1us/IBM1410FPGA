-- Test Bench VHDL for IBM SMS ALD page 14.18.03.1
-- Title: ZONE ADDR 16K-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 8/25/2020 12:50:32 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_18_03_1_ZONE_ADDR_16K_ACC_tb is
end ALD_14_18_03_1_ZONE_ADDR_16K_ACC_tb;

architecture behavioral of ALD_14_18_03_1_ZONE_ADDR_16K_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_18_03_1_ZONE_ADDR_16K_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_A_CH_A_BIT:	 in STD_LOGIC;
		PS_BIN_REG_A_1_BIT:	 in STD_LOGIC;
		PS_GATE_A_CH_TO_ZONE_ADDER:	 in STD_LOGIC;
		PS_BIN_REG_A_4_BIT:	 in STD_LOGIC;
		PS_GATE_BIN_A12_TO_ZONE_ADDER:	 in STD_LOGIC;
		PS_A_CH_B_BIT:	 in STD_LOGIC;
		PS_GATE_BIN_A48_TO_ZONE_ADDER:	 in STD_LOGIC;
		PS_BIN_REG_A_2_BIT:	 in STD_LOGIC;
		PS_BIN_REG_A_8_BIT:	 in STD_LOGIC;
		PS_B_CH_A_BIT:	 in STD_LOGIC;
		PS_GATE_B_CH_TO_ZONE_ADDER:	 in STD_LOGIC;
		PS_B_CH_B_BIT:	 in STD_LOGIC;
		PS_ZONE_ADDER_A_BITS_EVEN:	 out STD_LOGIC;
		MS_ZONE_ADDER_A_A_DOT_B_A:	 out STD_LOGIC;
		MS_ZONE_ADDER_A_B_DOT_B_B:	 out STD_LOGIC;
		PS_ZONE_ADDER_B_BITS_EVEN:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_A_CH_A_BIT: STD_LOGIC := '0';
	signal PS_BIN_REG_A_1_BIT: STD_LOGIC := '0';
	signal PS_GATE_A_CH_TO_ZONE_ADDER: STD_LOGIC := '0';
	signal PS_BIN_REG_A_4_BIT: STD_LOGIC := '0';
	signal PS_GATE_BIN_A12_TO_ZONE_ADDER: STD_LOGIC := '0';
	signal PS_A_CH_B_BIT: STD_LOGIC := '0';
	signal PS_GATE_BIN_A48_TO_ZONE_ADDER: STD_LOGIC := '0';
	signal PS_BIN_REG_A_2_BIT: STD_LOGIC := '0';
	signal PS_BIN_REG_A_8_BIT: STD_LOGIC := '0';
	signal PS_B_CH_A_BIT: STD_LOGIC := '0';
	signal PS_GATE_B_CH_TO_ZONE_ADDER: STD_LOGIC := '0';
	signal PS_B_CH_B_BIT: STD_LOGIC := '0';

	-- Outputs

	signal PS_ZONE_ADDER_A_BITS_EVEN: STD_LOGIC;
	signal MS_ZONE_ADDER_A_A_DOT_B_A: STD_LOGIC;
	signal MS_ZONE_ADDER_A_B_DOT_B_B: STD_LOGIC;
	signal PS_ZONE_ADDER_B_BITS_EVEN: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      
function to_std_logic(b: boolean) return std_logic is
   begin
   if(b) then return ('1'); else return('0'); end if;
   end function;

   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_18_03_1_ZONE_ADDR_16K_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_A_CH_A_BIT => PS_A_CH_A_BIT,
		PS_BIN_REG_A_1_BIT => PS_BIN_REG_A_1_BIT,
		PS_GATE_A_CH_TO_ZONE_ADDER => PS_GATE_A_CH_TO_ZONE_ADDER,
		PS_BIN_REG_A_4_BIT => PS_BIN_REG_A_4_BIT,
		PS_GATE_BIN_A12_TO_ZONE_ADDER => PS_GATE_BIN_A12_TO_ZONE_ADDER,
		PS_A_CH_B_BIT => PS_A_CH_B_BIT,
		PS_GATE_BIN_A48_TO_ZONE_ADDER => PS_GATE_BIN_A48_TO_ZONE_ADDER,
		PS_BIN_REG_A_2_BIT => PS_BIN_REG_A_2_BIT,
		PS_BIN_REG_A_8_BIT => PS_BIN_REG_A_8_BIT,
		PS_B_CH_A_BIT => PS_B_CH_A_BIT,
		PS_GATE_B_CH_TO_ZONE_ADDER => PS_GATE_B_CH_TO_ZONE_ADDER,
		PS_B_CH_B_BIT => PS_B_CH_B_BIT,
		PS_ZONE_ADDER_A_BITS_EVEN => PS_ZONE_ADDER_A_BITS_EVEN,
		MS_ZONE_ADDER_A_A_DOT_B_A => MS_ZONE_ADDER_A_A_DOT_B_A,
		MS_ZONE_ADDER_A_B_DOT_B_B => MS_ZONE_ADDER_A_B_DOT_B_B,
		PS_ZONE_ADDER_B_BITS_EVEN => PS_ZONE_ADDER_B_BITS_EVEN);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable results: std_logic;
   
   begin

   -- Your test bench code

   testName := "16.18.03.1        ";
   subtest := 1;   
   
   -- First test with A channel A and B Bits
   
   PS_GATE_A_CH_TO_ZONE_ADDER <= '1';
   PS_GATE_B_CH_TO_ZONE_ADDER <= '1';

   for BChABit in std_logic range '0' to '1' loop
      PS_B_CH_A_BIT <= BChABit;
      for BChBBit in std_logic range '0' to '1' loop
         PS_B_CH_B_BIT <= BChBBIt;
         for testABit in std_logic range '0' to '1' loop
            PS_A_CH_A_BIT <= testAbit;
            for testBBit in std_logic range '0' to '1' loop
               PS_A_CH_B_BIT <= testBBit;
               wait for 30 ns;
               check1(PS_ZONE_ADDER_A_BITS_EVEN,
                  to_std_logic(BChABit = testABit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "A");                                 
               check1(PS_ZONE_ADDER_B_BITS_EVEN,
                  to_std_logic(BChBBit = testBBit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "B");
               check1(MS_ZONE_ADDER_A_A_DOT_B_A,NOT(BChABit AND testABit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "C");                                 
               check1(MS_ZONE_ADDER_A_B_DOT_B_B,NOT(BChBBit AND testBBit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "D");                                                                                       
            end loop;
         end loop;
      end loop;   
   end loop;   
   
   -- Next, test with B Ch and BIN REG A 1 Bit
   
   PS_GATE_A_CH_TO_ZONE_ADDER <= '0';
   PS_GATE_BIN_A12_TO_ZONE_ADDER <= '1';
   PS_GATE_B_CH_TO_ZONE_ADDER <= '1';

   for BChABit in std_logic range '0' to '1' loop
      PS_B_CH_A_BIT <= BChABit;
      for BChBBit in std_logic range '0' to '1' loop
         PS_B_CH_B_BIT <= BChBBIt;
         for testABit in std_logic range '0' to '1' loop
            PS_BIN_REG_A_1_BIT <= testAbit;
            for testBBit in std_logic range '0' to '1' loop
               PS_BIN_REG_A_2_BIT <= testBBit;
               wait for 30 ns;
               check1(PS_ZONE_ADDER_A_BITS_EVEN,
                  to_std_logic(BChABit = testABit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "A");                                 
               check1(PS_ZONE_ADDER_B_BITS_EVEN,
                  to_std_logic(BChBBit = testBBit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "B");
               check1(MS_ZONE_ADDER_A_A_DOT_B_A,NOT(BChABit AND testABit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "C");                                 
               check1(MS_ZONE_ADDER_A_B_DOT_B_B,NOT(BChBBit AND testBBit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "D");                                                                                       
            end loop;
         end loop;
      end loop;   
   end loop;   

   PS_GATE_A_CH_TO_ZONE_ADDER <= '0';
   PS_GATE_BIN_A12_TO_ZONE_ADDER <= '0';
   PS_GATE_BIN_A48_TO_ZONE_ADDER <= '1';
   PS_GATE_B_CH_TO_ZONE_ADDER <= '1';

   for BChABit in std_logic range '0' to '1' loop
      PS_B_CH_A_BIT <= BChABit;
      for BChBBit in std_logic range '0' to '1' loop
         PS_B_CH_B_BIT <= BChBBIt;
         for testABit in std_logic range '0' to '1' loop
            PS_BIN_REG_A_4_BIT <= testAbit;
            for testBBit in std_logic range '0' to '1' loop
               PS_BIN_REG_A_8_BIT <= testBBit;
               wait for 30 ns;
               check1(PS_ZONE_ADDER_A_BITS_EVEN,
                  to_std_logic(BChABit = testABit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "A");                                 
               check1(PS_ZONE_ADDER_B_BITS_EVEN,
                  to_std_logic(BChBBit = testBBit),testName,"Subtest " & INTEGER'IMAGE(subtest) & "B");
               check1(MS_ZONE_ADDER_A_A_DOT_B_A,NOT(BChABit AND testABit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "C");                                 
               check1(MS_ZONE_ADDER_A_B_DOT_B_B,NOT(BChBBit AND testBBit),                    
                  testName,"Subtest " & INTEGER'IMAGE(subtest) & "D");                                                                                       
            end loop;
         end loop;
      end loop;   
   end loop;   
   

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
