-- Test Bench VHDL for IBM SMS ALD page 14.71.32.1
-- Title: C AR READOUT
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/6/2020 6:05:27 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_71_32_1_C_AR_READOUT_tb is
end ALD_14_71_32_1_C_AR_READOUT_tb;

architecture behavioral of ALD_14_71_32_1_C_AR_READOUT_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_71_32_1_C_AR_READOUT
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_INDEX_A_AR:	 in STD_LOGIC;
		PS_B_TO_LAST_LOGIC_GATE:	 in STD_LOGIC;
		MS_CONSOLE_INHIBIT_AR_RO:	 in STD_LOGIC;
		PS_LOGIC_GATE_SPECIAL_A:	 in STD_LOGIC;
		MV_CE_RO_C_AR:	 in STD_LOGIC;
		PS_A_CYCLE_CTRL:	 in STD_LOGIC;
		PS_UNITS_CTRL_LATCH:	 in STD_LOGIC;
		PS_TABLE_SEARCH_OP_CODE:	 in STD_LOGIC;
		PS_C_AR_RO_CTRL_STAR_ARITH:	 in STD_LOGIC;
		PS_1401_STORE_AR_OP_CODES:	 in STD_LOGIC;
		PS_1ST_SCAN_CTRL:	 in STD_LOGIC;
		MS_I_RING_3_TIME:	 in STD_LOGIC;
		PS_C_CYCLE_CTRL:	 in STD_LOGIC;
		PS_STORE_ADDR_REGS_OP_CODE:	 in STD_LOGIC;
		PS_CONS_MX_30_POS:	 in STD_LOGIC;
		PS_DISPLAY_ROUTINE_1:	 in STD_LOGIC;
		PS_CONSOLE_STROBE:	 in STD_LOGIC;
		PS_ALTER_ROUTINE:	 in STD_LOGIC;
		PS_CONS_MX_32_POS:	 in STD_LOGIC;
		PS_RO_C_AR:	 out STD_LOGIC;
		MS_TABLE_SEARCH_A_CYCLE_U_CTRL:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_INDEX_A_AR: STD_LOGIC := '0';
	signal PS_B_TO_LAST_LOGIC_GATE: STD_LOGIC := '0';
	signal MS_CONSOLE_INHIBIT_AR_RO: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_SPECIAL_A: STD_LOGIC := '0';
	signal MV_CE_RO_C_AR: STD_LOGIC := '1';
	signal PS_A_CYCLE_CTRL: STD_LOGIC := '0';
	signal PS_UNITS_CTRL_LATCH: STD_LOGIC := '0';
	signal PS_TABLE_SEARCH_OP_CODE: STD_LOGIC := '0';
	signal PS_C_AR_RO_CTRL_STAR_ARITH: STD_LOGIC := '0';
	signal PS_1401_STORE_AR_OP_CODES: STD_LOGIC := '0';
	signal PS_1ST_SCAN_CTRL: STD_LOGIC := '0';
	signal MS_I_RING_3_TIME: STD_LOGIC := '1';
	signal PS_C_CYCLE_CTRL: STD_LOGIC := '0';
	signal PS_STORE_ADDR_REGS_OP_CODE: STD_LOGIC := '0';
	signal PS_CONS_MX_30_POS: STD_LOGIC := '0';
	signal PS_DISPLAY_ROUTINE_1: STD_LOGIC := '0';
	signal PS_CONSOLE_STROBE: STD_LOGIC := '0';
	signal PS_ALTER_ROUTINE: STD_LOGIC := '0';
	signal PS_CONS_MX_32_POS: STD_LOGIC := '0';

	-- Outputs

	signal PS_RO_C_AR: STD_LOGIC;
	signal MS_TABLE_SEARCH_A_CYCLE_U_CTRL: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_71_32_1_C_AR_READOUT port map(
		FPGA_CLK => FPGA_CLK,
		PS_INDEX_A_AR => PS_INDEX_A_AR,
		PS_B_TO_LAST_LOGIC_GATE => PS_B_TO_LAST_LOGIC_GATE,
		MS_CONSOLE_INHIBIT_AR_RO => MS_CONSOLE_INHIBIT_AR_RO,
		PS_LOGIC_GATE_SPECIAL_A => PS_LOGIC_GATE_SPECIAL_A,
		MV_CE_RO_C_AR => MV_CE_RO_C_AR,
		PS_A_CYCLE_CTRL => PS_A_CYCLE_CTRL,
		PS_UNITS_CTRL_LATCH => PS_UNITS_CTRL_LATCH,
		PS_TABLE_SEARCH_OP_CODE => PS_TABLE_SEARCH_OP_CODE,
		PS_C_AR_RO_CTRL_STAR_ARITH => PS_C_AR_RO_CTRL_STAR_ARITH,
		PS_1401_STORE_AR_OP_CODES => PS_1401_STORE_AR_OP_CODES,
		PS_1ST_SCAN_CTRL => PS_1ST_SCAN_CTRL,
		MS_I_RING_3_TIME => MS_I_RING_3_TIME,
		PS_C_CYCLE_CTRL => PS_C_CYCLE_CTRL,
		PS_STORE_ADDR_REGS_OP_CODE => PS_STORE_ADDR_REGS_OP_CODE,
		PS_CONS_MX_30_POS => PS_CONS_MX_30_POS,
		PS_DISPLAY_ROUTINE_1 => PS_DISPLAY_ROUTINE_1,
		PS_CONSOLE_STROBE => PS_CONSOLE_STROBE,
		PS_ALTER_ROUTINE => PS_ALTER_ROUTINE,
		PS_CONS_MX_32_POS => PS_CONS_MX_32_POS,
		PS_RO_C_AR => PS_RO_C_AR,
		MS_TABLE_SEARCH_A_CYCLE_U_CTRL => MS_TABLE_SEARCH_A_CYCLE_U_CTRL);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(18 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s: std_logic;
   variable g1, g2, g3, g4, g5, g6: std_logic;

   begin

   -- Your test bench code

   testName := "14.71.32.1        ";
   
   FPGA_CLK <= '1';  -- Not needed for this combinatorial test.
  
   for tt in 0 to 8*65536 loop  -- 19 bits (8 * 16 bits) 
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      p := tv(15);
      q := tv(16);
      r := tv(17);
      s := tv(18);

      g1 := i or (n and m) or (m and k and j and not l);

	   PS_INDEX_A_AR <= a;
	   PS_B_TO_LAST_LOGIC_GATE <= b;
      MS_CONSOLE_INHIBIT_AR_RO <= not c;
   	PS_LOGIC_GATE_SPECIAL_A <= d;
   	MV_CE_RO_C_AR <= not e;
   	PS_A_CYCLE_CTRL <= f;
   	PS_UNITS_CTRL_LATCH <= g;
   	PS_TABLE_SEARCH_OP_CODE <= h;
   	PS_C_AR_RO_CTRL_STAR_ARITH <= i;
   	PS_1401_STORE_AR_OP_CODES <= j;
   	PS_1ST_SCAN_CTRL <= k;
   	MS_I_RING_3_TIME <= not l;
   	PS_C_CYCLE_CTRL <= m;
   	PS_STORE_ADDR_REGS_OP_CODE <= n;
   	wait for 10 ns;
   	PS_CONS_MX_30_POS <= o;
   	PS_DISPLAY_ROUTINE_1 <= p;  
   	PS_CONSOLE_STROBE <= q;
   	PS_ALTER_ROUTINE <= r;
   	PS_CONS_MX_32_POS <= s;

      wait for 30 ns;
   
      check1(PS_RO_C_AR,
         e or (a and b and not c) or (not c and d and g1) or (o and p and q) or (q and r and s)
         ,testName,"RO C AR");
         
      if(PS_RO_C_AR /= '0' and PS_RO_C_AR /= '1') then
         assert false report "Simulation UNDEFINED" severity failure;
      end if;   
         
      check1 (MS_TABLE_SEARCH_A_CYCLE_U_CTRL,NOT(f and g and h),testName,"TS . A CY . U Ctrl");
      
   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 50 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
