-- Test Bench VHDL for IBM SMS ALD page 15.63.02.1
-- Title: F CHANNEL M-L STORAGE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/26/2020 4:21:26 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_63_02_1_F_CHANNEL_M_L_STORAGE_tb is
end ALD_15_63_02_1_F_CHANNEL_M_L_STORAGE_tb;

architecture behavioral of ALD_15_63_02_1_F_CHANNEL_M_L_STORAGE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_63_02_1_F_CHANNEL_M_L_STORAGE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_F_CH_SELECT_7_BIT_UNIT:	 in STD_LOGIC;
		MS_F_CH_RESET_1:	 in STD_LOGIC;
		PS_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK:	 in STD_LOGIC;
		PS_UNIT_CTRL_OR_MOVE_OP_CODE:	 in STD_LOGIC;
		MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR:	 in STD_LOGIC;
		PS_BRANCH_ON_STATUS_CH_2:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_I_O_INTLK_RESET_CONDITION:	 in STD_LOGIC;
		PS_I_O_LOAD_OP_CODE:	 in STD_LOGIC;
		PS_F_CH_WORD_SEPARATOR_MODE:	 out STD_LOGIC;
		PS_F_CH_MOVE_MODE:	 out STD_LOGIC;
		MS_F_CH_LOAD_MODE:	 out STD_LOGIC;
		PS_F_CH_LOAD_MODE:	 out STD_LOGIC;
		PS_F_CH_INTERLOCK:	 out STD_LOGIC;
		MC_LOAD_MODE_TO_1301_STAR_F_CH:	 out STD_LOGIC;
		MC_LOAD_MODE_TO_1405_STAR_F_CH:	 out STD_LOGIC;
		LAMP_15A1A15:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_F_CH_SELECT_7_BIT_UNIT: STD_LOGIC := '0';
	signal MS_F_CH_RESET_1: STD_LOGIC := '1';
	signal PS_LAST_INSN_RO_CYCLE: STD_LOGIC := '0';
	signal PS_LOZENGE_OR_ASTERISK: STD_LOGIC := '0';
	signal PS_UNIT_CTRL_OR_MOVE_OP_CODE: STD_LOGIC := '0';
	signal MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR: STD_LOGIC := '1';
	signal PS_BRANCH_ON_STATUS_CH_2: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_I_O_INTLK_RESET_CONDITION: STD_LOGIC := '0';
	signal PS_I_O_LOAD_OP_CODE: STD_LOGIC := '0';

	-- Outputs

	signal PS_F_CH_WORD_SEPARATOR_MODE: STD_LOGIC;
	signal PS_F_CH_MOVE_MODE: STD_LOGIC;
	signal MS_F_CH_LOAD_MODE: STD_LOGIC;
	signal PS_F_CH_LOAD_MODE: STD_LOGIC;
	signal PS_F_CH_INTERLOCK: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1301_STAR_F_CH: STD_LOGIC;
	signal MC_LOAD_MODE_TO_1405_STAR_F_CH: STD_LOGIC;
	signal LAMP_15A1A15: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_63_02_1_F_CHANNEL_M_L_STORAGE port map(
		FPGA_CLK => FPGA_CLK,
		PS_F_CH_SELECT_7_BIT_UNIT => PS_F_CH_SELECT_7_BIT_UNIT,
		MS_F_CH_RESET_1 => MS_F_CH_RESET_1,
		PS_LAST_INSN_RO_CYCLE => PS_LAST_INSN_RO_CYCLE,
		PS_LOZENGE_OR_ASTERISK => PS_LOZENGE_OR_ASTERISK,
		PS_UNIT_CTRL_OR_MOVE_OP_CODE => PS_UNIT_CTRL_OR_MOVE_OP_CODE,
		MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR => MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR,
		PS_BRANCH_ON_STATUS_CH_2 => PS_BRANCH_ON_STATUS_CH_2,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_I_O_INTLK_RESET_CONDITION => PS_I_O_INTLK_RESET_CONDITION,
		PS_I_O_LOAD_OP_CODE => PS_I_O_LOAD_OP_CODE,
		PS_F_CH_WORD_SEPARATOR_MODE => PS_F_CH_WORD_SEPARATOR_MODE,
		PS_F_CH_MOVE_MODE => PS_F_CH_MOVE_MODE,
		MS_F_CH_LOAD_MODE => MS_F_CH_LOAD_MODE,
		PS_F_CH_LOAD_MODE => PS_F_CH_LOAD_MODE,
		PS_F_CH_INTERLOCK => PS_F_CH_INTERLOCK,
		MC_LOAD_MODE_TO_1301_STAR_F_CH => MC_LOAD_MODE_TO_1301_STAR_F_CH,
		MC_LOAD_MODE_TO_1405_STAR_F_CH => MC_LOAD_MODE_TO_1405_STAR_F_CH,
		LAMP_15A1A15 => LAMP_15A1A15);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,d,f,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.63.02.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      -- c := tv(2);
      d := tv(2);
      -- e := tv(4);
      f := tv(3);
      -- g := tv(4);
      -- h := tv(7); Reset line
      -- i := tv(7);
      j := tv(4);
      k := tv(5);
      l := tv(6);
      m := tv(7);
      n := tv(8);
      
      g1 := f and b;
      g3 := (d and k and g1) or n; 
      g4 := k and m and g1; -- Load Mode
      g5 := f and j and k and l;
      
      MS_F_CH_RESET_1 <= '0';
      wait for 30 ns;
      MS_F_CH_RESET_1 <= '1';
      wait for 30 ns;
      
      check1(PS_F_CH_MOVE_MODE,'0',testName,"+S Reset Move");
      check1(PS_F_CH_LOAD_MODE,'0',testName,"+S Reset Load");
      check1(MS_F_CH_LOAD_MODE,'1',testName,"-S Reset Load");      
      
      PS_F_CH_SELECT_7_BIT_UNIT <= a;
      PS_LOZENGE_OR_ASTERISK <= b;
      PS_UNIT_CTRL_OR_MOVE_OP_CODE <= d;
      PS_LAST_INSN_RO_CYCLE <= f;
      PS_BRANCH_ON_STATUS_CH_2 <= '0'; -- Test later in reset phase
      PS_LOGIC_GATE_E_1 <= k;
      PS_I_O_INTLK_RESET_CONDITION <= '0'; -- Test later in reset phase
      PS_I_O_LOAD_OP_CODE <= m;
      MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR <= not n;
      
      wait for 30 ns; -- Perhaps set a latch

      check1(PS_F_CH_MOVE_MODE,g3,testName,"+S Set Move");
      check1(PS_F_CH_LOAD_MODE,g4,testName,"+S Set Load");
      check1(MS_F_CH_LOAD_MODE,not g4,testName,"-S Set Load");
      
      check1(PS_F_CH_WORD_SEPARATOR_MODE,a and PS_F_CH_LOAD_MODE,testName,"WS Mode");
      check1(PS_F_CH_INTERLOCK,g3 or g4,testName,"+S Interlock");
      check1(LAMP_15A1A15,PS_F_CH_INTERLOCK,testName,"Lamp Interlock");
      check1(MC_LOAD_MODE_TO_1301_STAR_F_CH,not PS_F_CH_LOAD_MODE,testName,"-C 1301 Load Mode");
      check1(MC_LOAD_MODE_TO_1405_STAR_F_CH,not PS_F_CH_LOAD_MODE,testName,"-C 1405 Load Mode");
      
      
      PS_F_CH_SELECT_7_BIT_UNIT <= '0';
      PS_LOZENGE_OR_ASTERISK <= '0';
      PS_UNIT_CTRL_OR_MOVE_OP_CODE <= '0';
      PS_LAST_INSN_RO_CYCLE <= '0';
      PS_BRANCH_ON_STATUS_CH_2 <= '0'; -- Test later in reset phase
      PS_LOGIC_GATE_E_1 <= '0';
      PS_I_O_INTLK_RESET_CONDITION <= '0'; -- Test later in reset phase
      PS_I_O_LOAD_OP_CODE <= '0';
      MS_F_SET_MOVE_MODE_LATCH_STAR_1414_STAR <= '1';
      
      -- Now, test reset
      
      PS_LAST_INSN_RO_CYCLE <= f;
      PS_BRANCH_ON_STATUS_CH_2 <= j;
      PS_LOGIC_GATE_E_1 <= k;
      PS_I_O_INTLK_RESET_CONDITION <= l;
      wait for 30 ns;      
      
      if (g5 = '1') then  -- Reset condition         
         check1(PS_F_CH_MOVE_MODE,'0',testName,"+S Reset G5 Move");
         check1(PS_F_CH_LOAD_MODE,'0',testName,"+S Reset G5 Load");
         check1(MS_F_CH_LOAD_MODE,'1',testName,"-S Reset G5 Load");    
      else  -- No reset - same as earlier
         check1(PS_F_CH_MOVE_MODE,g3,testName,"+S Set Move");
         check1(PS_F_CH_LOAD_MODE,g4,testName,"+S Set Load");
         check1(MS_F_CH_LOAD_MODE,not g4,testName,"-S Set Load");             
      end if;

      PS_LAST_INSN_RO_CYCLE <= '0';
      PS_BRANCH_ON_STATUS_CH_2 <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_I_O_INTLK_RESET_CONDITION <= '0';
       
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
