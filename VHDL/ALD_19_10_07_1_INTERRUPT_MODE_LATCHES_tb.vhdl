-- Test Bench VHDL for IBM SMS ALD page 19.10.07.1
-- Title: INTERRUPT MODE LATCHES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/8/2020 5:08:10 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_19_10_07_1_INTERRUPT_MODE_LATCHES_tb is
end ALD_19_10_07_1_INTERRUPT_MODE_LATCHES_tb;

architecture behavioral of ALD_19_10_07_1_INTERRUPT_MODE_LATCHES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_19_10_07_1_INTERRUPT_MODE_LATCHES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_INTERRUPT_BRANCH:	 in STD_LOGIC;
		PS_X_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		PS_Y_OP_DOT_TEST_RESET:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_B_CYCLE_1:	 in STD_LOGIC;
		MS_PROGRAM_RESET_6:	 in STD_LOGIC;
		PS_NO_SCAN_1:	 in STD_LOGIC;
		PS_INTERRUPT_TEST_OP_CODE:	 in STD_LOGIC;
		PS_E_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		PS_PRIORITY_ALERT_MODE:	 out STD_LOGIC;
		MS_NORMAL_MODE:	 out STD_LOGIC;
		LAMP_15A1K22:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_INTERRUPT_BRANCH: STD_LOGIC := '0';
	signal PS_X_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal PS_Y_OP_DOT_TEST_RESET: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_B_CYCLE_1: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_6: STD_LOGIC := '1';
	signal PS_NO_SCAN_1: STD_LOGIC := '0';
	signal PS_INTERRUPT_TEST_OP_CODE: STD_LOGIC := '0';
	signal PS_E_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';

	-- Outputs

	signal PS_PRIORITY_ALERT_MODE: STD_LOGIC;
	signal MS_NORMAL_MODE: STD_LOGIC;
	signal LAMP_15A1K22: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_19_10_07_1_INTERRUPT_MODE_LATCHES port map(
		FPGA_CLK => FPGA_CLK,
		PS_INTERRUPT_BRANCH => PS_INTERRUPT_BRANCH,
		PS_X_SYMBOL_OP_MODIFIER => PS_X_SYMBOL_OP_MODIFIER,
		PS_Y_OP_DOT_TEST_RESET => PS_Y_OP_DOT_TEST_RESET,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_B_CYCLE_1 => PS_B_CYCLE_1,
		MS_PROGRAM_RESET_6 => MS_PROGRAM_RESET_6,
		PS_NO_SCAN_1 => PS_NO_SCAN_1,
		PS_INTERRUPT_TEST_OP_CODE => PS_INTERRUPT_TEST_OP_CODE,
		PS_E_SYMBOL_OP_MODIFIER => PS_E_SYMBOL_OP_MODIFIER,
		PS_PRIORITY_ALERT_MODE => PS_PRIORITY_ALERT_MODE,
		MS_NORMAL_MODE => MS_NORMAL_MODE,
		LAMP_15A1K22 => LAMP_15A1K22);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "19.10.07.1        ";

   -- First, test the Priority Alert Latch

   for tt in 0 to 2**8 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);

      g1 := c and j and d;
      g2 := a and e and d;
      g3 := d and e and b and h and g;
      g5 := g2 or g3;
      
      -- Reset the latch
      
      MS_PROGRAM_RESET_6 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_6 <= '1';
      wait for 30 ns;
      
      check1(PS_PRIORITY_ALERT_MODE,'0',testName,"Priority Alert Loop Reset");
      check1(LAMP_15A1K22,PS_PRIORITY_ALERT_MODE,testName,"Priority Alert Lamp Loop Reset");
      
      -- Set the test vector, but make sure at least one reset variable is NOT set, so
      -- the latch isn't pulled in two directions
      
		PS_INTERRUPT_BRANCH <= a;
      PS_X_SYMBOL_OP_MODIFIER <= '0'; -- b;
      PS_Y_OP_DOT_TEST_RESET <= c;
      PS_LOGIC_GATE_E_1 <= d;
      PS_B_CYCLE_1 <= e;
      PS_NO_SCAN_1 <= g;
      PS_INTERRUPT_TEST_OP_CODE <= h;
      PS_E_SYMBOL_OP_MODIFIER <= j;
      wait for 30 ns; -- Maybe set the latch
      
      -- Reset the set variables -- the latch shouold stay set.  This also allows
      -- the reset test to function.

		PS_INTERRUPT_BRANCH <= '0';
      PS_X_SYMBOL_OP_MODIFIER <= '0';
      PS_Y_OP_DOT_TEST_RESET <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_B_CYCLE_1 <= '0';
      PS_NO_SCAN_1 <= '0';
      PS_INTERRUPT_TEST_OP_CODE <= '0';
      PS_E_SYMBOL_OP_MODIFIER <= '0';
      wait for 30 ns;
      
      check1(PS_PRIORITY_ALERT_MODE,g1,testName,"Priority Alert Set");
      check1(LAMP_15A1K22,PS_PRIORITY_ALERT_MODE,testName,"Priority Alert Lamp Set");
      
      -- Now the reset test.  Set all the variables again execept at least one that 
      -- will  prevent it from conflicting with the reset

		PS_INTERRUPT_BRANCH <= a;
      PS_X_SYMBOL_OP_MODIFIER <= b;
      PS_Y_OP_DOT_TEST_RESET <= '0'; -- c
      PS_LOGIC_GATE_E_1 <= d;
      PS_B_CYCLE_1 <= e;
      PS_NO_SCAN_1 <= g;
      PS_INTERRUPT_TEST_OP_CODE <= h;
      PS_E_SYMBOL_OP_MODIFIER <= j;
      wait for 30 ns; -- Maybe reset the latch (if it was even set to begin with)

      -- Put things back again for the next iteration.  If the latch should not change
      
      PS_INTERRUPT_BRANCH <= '0';
      PS_X_SYMBOL_OP_MODIFIER <= '0';
      PS_Y_OP_DOT_TEST_RESET <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_B_CYCLE_1 <= '0';
      PS_NO_SCAN_1 <= '0';
      PS_INTERRUPT_TEST_OP_CODE <= '0';
      PS_E_SYMBOL_OP_MODIFIER <= '0';
      wait for 30 ns;

      -- Latch is still set if it was set earlier and not reset by g5.
      
      check1(PS_PRIORITY_ALERT_MODE,g1 and not g5,testName,"Priority Alert Reset");
      check1(LAMP_15A1K22,PS_PRIORITY_ALERT_MODE,testName,"Priority Alert Lamp Reset");
            
   end loop;

   -- Then test the NORMAL latch

   for tt in 0 to 2**8 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);

      g2 := a and e and d;
      g4 := e and d and g and h and j;
      g7 := b and c and d;
      g6 := g7 or g2;
      
      -- Program Reset SETS this latch
      
      MS_PROGRAM_RESET_6 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_6 <= '1';
      wait for 30 ns;
      
      check1(MS_NORMAL_MODE,'0',testName,"Normal Mode Loop Reset");
      
      -- Set the test vector, but make sure at least one SET variable is NOT set, so
      -- the latch isn't pulled in two directions
      
		PS_INTERRUPT_BRANCH <= '0'; -- a;
      PS_X_SYMBOL_OP_MODIFIER <= '0'; -- b;
      PS_Y_OP_DOT_TEST_RESET <= c;
      PS_LOGIC_GATE_E_1 <= d;
      PS_B_CYCLE_1 <= e;
      PS_NO_SCAN_1 <= g;
      PS_INTERRUPT_TEST_OP_CODE <= h;
      PS_E_SYMBOL_OP_MODIFIER <= j;
      wait for 30 ns; -- Maybe RESET the latch
      
      -- Reset the set variables -- the latch shouold stay reset if it was reset.
      -- This also allows the set test to function.

		PS_INTERRUPT_BRANCH <= '0';
      PS_X_SYMBOL_OP_MODIFIER <= '0';
      PS_Y_OP_DOT_TEST_RESET <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_B_CYCLE_1 <= '0';
      PS_NO_SCAN_1 <= '0';
      PS_INTERRUPT_TEST_OP_CODE <= '0';
      PS_E_SYMBOL_OP_MODIFIER <= '0';
      wait for 30 ns;
      
      check1(MS_NORMAL_MODE,g4,testName,"Normal Mode Reset"); -- if g4 is one, latch is reset
      
      -- Now the SET test.  Set all the variables again execept at least one that 
      -- will prevent it from conflicting with the SET

		PS_INTERRUPT_BRANCH <= a;
      PS_X_SYMBOL_OP_MODIFIER <= b;
      PS_Y_OP_DOT_TEST_RESET <= c;
      PS_LOGIC_GATE_E_1 <= d;
      PS_B_CYCLE_1 <= e;
      PS_NO_SCAN_1 <= g;
      PS_INTERRUPT_TEST_OP_CODE <= h;
      PS_E_SYMBOL_OP_MODIFIER <= '0';
      wait for 30 ns; -- Maybe SET the latch (if it was even reset to begin with)

      -- Put things back again for the next iteration.  The latch should not change
      
      PS_INTERRUPT_BRANCH <= '0';
      PS_X_SYMBOL_OP_MODIFIER <= '0';
      PS_Y_OP_DOT_TEST_RESET <= '0';
      PS_LOGIC_GATE_E_1 <= '0';
      PS_B_CYCLE_1 <= '0';
      PS_NO_SCAN_1 <= '0';
      PS_INTERRUPT_TEST_OP_CODE <= '0';
      PS_E_SYMBOL_OP_MODIFIER <= '0';
      wait for 30 ns;

      -- Latch is still reset if it was reset earlier and not set here
      
      check1(MS_NORMAL_MODE,not g6 and g4,testName,"Normal Mode Set");
            
   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

end;
