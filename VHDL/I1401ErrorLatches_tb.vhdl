-- Test BenchVHDL for IBM SMS ALD group I1401ErrorLatches
-- Title: I1401ErrorLatches
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 11/7/2020 2:18:03 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity I1401ErrorLatches_tb is
end I1401ErrorLatches_tb;

architecture behavioral of I1401ErrorLatches_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component I1401ErrorLatches
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_RESET_READER_ERROR_LATCH: in STD_LOGIC;
		PS_E_CH_CHECK_BUS: in STD_LOGIC;
		MS_PROGRAM_RESET_2: in STD_LOGIC;
		MV_1401_MODE: in STD_LOGIC;
		PS_1401_READ_TRIGGER: in STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_B: in STD_LOGIC;
		PS_LOGIC_GATE_E_1: in STD_LOGIC;
		MS_E_CH_READY_BUS: in STD_LOGIC;
		PS_E_CH_BUSY_BUS: in STD_LOGIC;
		PS_E_CH_CONDITION_BUS: in STD_LOGIC;
		PS_1401_MODE: in STD_LOGIC;
		PS_E_CH_SELECT_UNIT_F: in STD_LOGIC;
		PS_E_CH_WRONG_LENGTH_REC_COND: in STD_LOGIC;
		PS_FILE_WRONG_LENGTH_ADDR_CON: in STD_LOGIC;
		PS_E_CH_WLR_STAR_1311_1401: in STD_LOGIC;
		PS_FILE_OP: in STD_LOGIC;
		PS_FILE_OP_DOT_D_CY_DOT_EXTENSION: in STD_LOGIC;
		MC_FILE_INVALID_ADDRESS_1405: in STD_LOGIC;
		MS_RESET_PROCESS_CK_LAT: in STD_LOGIC;
		MS_MASTER_ERROR: in STD_LOGIC;
		MS_RESET_INQUIRY_ERROR: in STD_LOGIC;
		MS_CONS_CANCEL_KEY_RESET: in STD_LOGIC;
		PS_CONSOLE_READ_OP: in STD_LOGIC;
		PS_A_CH_INVALID: in STD_LOGIC;
		PS_ERROR_SAMPLE: in STD_LOGIC;
		PS_CONSOLE_WRITE_OP: in STD_LOGIC;
		PS_CONS_DATA_CHECK: in STD_LOGIC;
		PS_E2_REG_FULL: in STD_LOGIC;
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		SWITCH_MOM_IO_CHK_RST_PL1: in STD_LOGIC;
		PS_1401_READ_ERROR: out STD_LOGIC;
		MS_1401_I_O_CHECK_RESET: out STD_LOGIC;
		PS_FILE_INVALID_ADDRESS: out STD_LOGIC;
		PS_1401_FILE_VALIDITY_CK: out STD_LOGIC;
		PS_1401_FILE_WRONG_LENG_REC: out STD_LOGIC;
		PS_1401_FILE_ADDR_COMPARE: out STD_LOGIC;
		PS_1401_ANY_FILE_CHECK: out STD_LOGIC;
		PS_FILE_BUSY_LATCH: out STD_LOGIC;
		PS_1401_PROCESS_CHECK: out STD_LOGIC;
		PS_1401_INQUIRY_ERROR: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_RESET_READER_ERROR_LATCH: STD_LOGIC := '1';
	signal PS_E_CH_CHECK_BUS: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_2: STD_LOGIC := '1';
	signal MV_1401_MODE: STD_LOGIC := '1';
	signal PS_1401_READ_TRIGGER: STD_LOGIC := '0';
	signal PS_E_CH_STATUS_SAMPLE_B: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal MS_E_CH_READY_BUS: STD_LOGIC := '1';
	signal PS_E_CH_BUSY_BUS: STD_LOGIC := '0';
	signal PS_E_CH_CONDITION_BUS: STD_LOGIC := '0';
	signal PS_1401_MODE: STD_LOGIC := '0';
	signal PS_E_CH_SELECT_UNIT_F: STD_LOGIC := '0';
	signal PS_E_CH_WRONG_LENGTH_REC_COND: STD_LOGIC := '0';
	signal PS_FILE_WRONG_LENGTH_ADDR_CON: STD_LOGIC := '0';
	signal PS_E_CH_WLR_STAR_1311_1401: STD_LOGIC := '0';
	signal PS_FILE_OP: STD_LOGIC := '0';
	signal PS_FILE_OP_DOT_D_CY_DOT_EXTENSION: STD_LOGIC := '0';
	signal MC_FILE_INVALID_ADDRESS_1405: STD_LOGIC := '1';
	signal MS_RESET_PROCESS_CK_LAT: STD_LOGIC := '1';
	signal MS_MASTER_ERROR: STD_LOGIC := '1';
	signal MS_RESET_INQUIRY_ERROR: STD_LOGIC := '1';
	signal MS_CONS_CANCEL_KEY_RESET: STD_LOGIC := '1';
	signal PS_CONSOLE_READ_OP: STD_LOGIC := '0';
	signal PS_A_CH_INVALID: STD_LOGIC := '0';
	signal PS_ERROR_SAMPLE: STD_LOGIC := '0';
	signal PS_CONSOLE_WRITE_OP: STD_LOGIC := '0';
	signal PS_CONS_DATA_CHECK: STD_LOGIC := '0';
	signal PS_E2_REG_FULL: STD_LOGIC := '0';
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";
	signal SWITCH_MOM_IO_CHK_RST_PL1: STD_LOGIC := '0';

	-- Outputs

	signal PS_1401_READ_ERROR: STD_LOGIC;
	signal MS_1401_I_O_CHECK_RESET: STD_LOGIC;
	signal PS_FILE_INVALID_ADDRESS: STD_LOGIC;
	signal PS_1401_FILE_VALIDITY_CK: STD_LOGIC;
	signal PS_1401_FILE_WRONG_LENG_REC: STD_LOGIC;
	signal PS_1401_FILE_ADDR_COMPARE: STD_LOGIC;
	signal PS_1401_ANY_FILE_CHECK: STD_LOGIC;
	signal PS_FILE_BUSY_LATCH: STD_LOGIC;
	signal PS_1401_PROCESS_CHECK: STD_LOGIC;
	signal PS_1401_INQUIRY_ERROR: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: I1401ErrorLatches port map(
		FPGA_CLK => FPGA_CLK,
		MS_RESET_READER_ERROR_LATCH => MS_RESET_READER_ERROR_LATCH,
		PS_E_CH_CHECK_BUS => PS_E_CH_CHECK_BUS,
		MS_PROGRAM_RESET_2 => MS_PROGRAM_RESET_2,
		MV_1401_MODE => MV_1401_MODE,
		PS_1401_READ_TRIGGER => PS_1401_READ_TRIGGER,
		PS_E_CH_STATUS_SAMPLE_B => PS_E_CH_STATUS_SAMPLE_B,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		MS_E_CH_READY_BUS => MS_E_CH_READY_BUS,
		PS_E_CH_BUSY_BUS => PS_E_CH_BUSY_BUS,
		PS_E_CH_CONDITION_BUS => PS_E_CH_CONDITION_BUS,
		PS_1401_MODE => PS_1401_MODE,
		PS_E_CH_SELECT_UNIT_F => PS_E_CH_SELECT_UNIT_F,
		PS_E_CH_WRONG_LENGTH_REC_COND => PS_E_CH_WRONG_LENGTH_REC_COND,
		PS_FILE_WRONG_LENGTH_ADDR_CON => PS_FILE_WRONG_LENGTH_ADDR_CON,
		PS_E_CH_WLR_STAR_1311_1401 => PS_E_CH_WLR_STAR_1311_1401,
		PS_FILE_OP => PS_FILE_OP,
		PS_FILE_OP_DOT_D_CY_DOT_EXTENSION => PS_FILE_OP_DOT_D_CY_DOT_EXTENSION,
		MC_FILE_INVALID_ADDRESS_1405 => MC_FILE_INVALID_ADDRESS_1405,
		MS_RESET_PROCESS_CK_LAT => MS_RESET_PROCESS_CK_LAT,
		MS_MASTER_ERROR => MS_MASTER_ERROR,
		MS_RESET_INQUIRY_ERROR => MS_RESET_INQUIRY_ERROR,
		MS_CONS_CANCEL_KEY_RESET => MS_CONS_CANCEL_KEY_RESET,
		PS_CONSOLE_READ_OP => PS_CONSOLE_READ_OP,
		PS_A_CH_INVALID => PS_A_CH_INVALID,
		PS_ERROR_SAMPLE => PS_ERROR_SAMPLE,
		PS_CONSOLE_WRITE_OP => PS_CONSOLE_WRITE_OP,
		PS_CONS_DATA_CHECK => PS_CONS_DATA_CHECK,
		PS_E2_REG_FULL => PS_E2_REG_FULL,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		SWITCH_MOM_IO_CHK_RST_PL1 => SWITCH_MOM_IO_CHK_RST_PL1,
		PS_1401_READ_ERROR => PS_1401_READ_ERROR,
		MS_1401_I_O_CHECK_RESET => MS_1401_I_O_CHECK_RESET,
		PS_FILE_INVALID_ADDRESS => PS_FILE_INVALID_ADDRESS,
		PS_1401_FILE_VALIDITY_CK => PS_1401_FILE_VALIDITY_CK,
		PS_1401_FILE_WRONG_LENG_REC => PS_1401_FILE_WRONG_LENG_REC,
		PS_1401_FILE_ADDR_COMPARE => PS_1401_FILE_ADDR_COMPARE,
		PS_1401_ANY_FILE_CHECK => PS_1401_ANY_FILE_CHECK,
		PS_FILE_BUSY_LATCH => PS_FILE_BUSY_LATCH,
		PS_1401_PROCESS_CHECK => PS_1401_PROCESS_CHECK,
		PS_1401_INQUIRY_ERROR => PS_1401_INQUIRY_ERROR);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "12.65.01.1        ";
   
   wait for 30 ns;
   MS_PROGRAM_RESET_2 <= '0'; 
   wait for 30 ns;
   MS_PROGRAM_RESET_2 <= '1'; 
   
   check1(PS_1401_READ_ERROR,'0',testName,"1A");
   PS_E_CH_CHECK_BUS <= '1';
   PS_1401_READ_TRIGGER <= '1';
   wait for 30 ns;
   check1(PS_1401_READ_ERROR,'0',testName,"1B");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns; -- Latch should set
   PS_E_CH_CHECK_BUS <= '0';
   PS_1401_READ_TRIGGER <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- Latch should still be set
   check1(PS_1401_READ_ERROR,'1',testName,"1C");
   MS_RESET_READER_ERROR_LATCH <= '0'; 
   wait for 30 ns;  -- Reset Latch
   MS_RESET_READER_ERROR_LATCH <= '1'; 
   wait for 30 ns;  -- Latch should stay reset
   check1(PS_1401_READ_ERROR,'0',testName,"1D");
   -- Set the latch again
   PS_E_CH_CHECK_BUS <= '1';
   PS_1401_READ_TRIGGER <= '1';
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns; -- Latch should set
   PS_E_CH_CHECK_BUS <= '0';
   PS_1401_READ_TRIGGER <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- Latch should still be set
   check1(PS_1401_READ_ERROR,'1',testName,"1E");
   -- Reset it another way
   SWITCH_MOM_IO_CHK_RST_PL1 <= '1';  -- Switch Output is NOT this value.
   wait for 30 ns;
   check1(PS_1401_READ_ERROR,'0',testName,"1F");
   SWITCH_MOM_IO_CHK_RST_PL1 <= '0';  -- Switch Output is NOT this value.
   wait for 30 ns;
   check1(PS_1401_READ_ERROR,'0',testName,"1G");
   
   testName := "13.65.02.1        ";

   PS_E_CH_SELECT_UNIT_F <= '1';  -- Needed for most tests on this page
   MS_E_CH_READY_BUS <= '0';  -- Ready -- for now
   
   check1(PS_1401_FILE_VALIDITY_CK,'0',testName,"1A");
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"1A1");
   PS_E_CH_CHECK_BUS <= '1';
   wait for 30 ns;
   check1(PS_1401_FILE_VALIDITY_CK,'0',testName,"1B");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns;  -- Should set latch
   PS_E_CH_CHECK_BUS <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- Should still be set
   check1(PS_1401_FILE_VALIDITY_CK,'1',testName,"1C");
   check1(PS_1401_ANY_FILE_CHECK,'1',testName,"1C1");
   PS_FILE_OP <= '1';
   wait for 30 ns;
   check1(PS_1401_FILE_VALIDITY_CK,'1',testName,"1D");
   PS_I_RING_HDL_BUS(9) <= '1';
   wait for 30 ns; -- Should reset
   check1(PS_1401_FILE_VALIDITY_CK,'0',testName,"1E");
   PS_FILE_OP <= '0';
   PS_I_RING_HDL_BUS(9) <= '0';
   wait for 30 ns; -- Should still be reset
   check1(PS_1401_FILE_VALIDITY_CK,'0',testName,"1F");
   
   PS_FILE_OP_DOT_D_CY_DOT_EXTENSION <= '1';
   PS_FILE_WRONG_LENGTH_ADDR_CON <= '1';
   wait for 30 ns;
   check1(PS_1401_FILE_WRONG_LENG_REC,'0',testName,"2A");   
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"2A1");
   PS_LOGIC_GATE_E_1 <= '1';
   wait for 30 ns; -- Latch should set
   PS_FILE_OP_DOT_D_CY_DOT_EXTENSION <= '0';
   PS_FILE_WRONG_LENGTH_ADDR_CON <= '0';
   PS_LOGIC_GATE_E_1 <= '0';
   wait for 30 ns; -- Should still be set
   check1(PS_1401_FILE_WRONG_LENG_REC,'1',testName,"2B");
   check1(PS_1401_ANY_FILE_CHECK,'1',testName,"2B1");
   MS_PROGRAM_RESET_2 <= '0';
   wait for 30 ns; -- Latch should reset
   MS_PROGRAM_RESET_2 <= '1';
   wait for 30 ns;  -- Latch should stay reset
   check1(PS_1401_FILE_WRONG_LENG_REC,'0',testName,"2C");
   PS_E_CH_WRONG_LENGTH_REC_COND <= '1';
   wait for 30 ns;
   check1(PS_1401_FILE_WRONG_LENG_REC,'0',testName,"2D");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns;  -- Latch should set
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   PS_E_CH_WRONG_LENGTH_REC_COND <= '0';
   wait for 30 ns; -- Latchs should stay set
   check1(PS_1401_FILE_WRONG_LENG_REC,'1',testName,"2E");
   PS_FILE_OP <= '1';
   PS_I_RING_HDL_BUS(9) <= '1';
   wait for 30 ns; -- Latch should reset
   PS_FILE_OP <= '0';
   PS_I_RING_HDL_BUS(9) <= '0';
   wait for 30 ns; -- And stay reset
   check1(PS_1401_FILE_WRONG_LENG_REC,'0',testName,"2G");
   
   check1(PS_1401_FILE_ADDR_COMPARE,'0',testname,"3A");
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"3A1");
   PS_E_CH_CONDITION_BUS <= '1';
   wait for 30 ns;
   check1(PS_1401_FILE_ADDR_COMPARE,'0',testname,"3B");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns; -- Latch should set      
   PS_E_CH_CONDITION_BUS <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns;  -- Latch should stay set
   check1(PS_1401_FILE_ADDR_COMPARE,'1',testname,"3C");
   check1(PS_1401_ANY_FILE_CHECK,'1',testName,"3C1");
   PS_FILE_OP <= '1';
   PS_I_RING_HDL_BUS(9) <= '1';
   wait for 30 ns; -- Latch should reset
   PS_FILE_OP <= '0';
   PS_I_RING_HDL_BUS(9) <= '0';
   wait for 30 ns; -- And stay reset
   check1(PS_1401_FILE_ADDR_COMPARE,'0',testname,"3D");
   
   check1(PS_FILE_INVALID_ADDRESS,'0',testName,"4A");
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"4A1");
   MC_FILE_INVALID_ADDRESS_1405 <= '0';
   wait for 30 ns; -- Latch should set (collector pullover)
   MC_FILE_INVALID_ADDRESS_1405 <= '1';
   wait for 30 ns; -- Latch should stay set
   check1(PS_FILE_INVALID_ADDRESS,'1',testName,"4B");
   check1(PS_1401_ANY_FILE_CHECK,'1',testName,"4B1");
   PS_FILE_OP <= '1';
   PS_I_RING_HDL_BUS(9) <= '1';
   wait for 30 ns; -- Latch should reset
   PS_FILE_OP <= '0';
   PS_I_RING_HDL_BUS(9) <= '0';
   wait for 30 ns; -- And stay reset
   check1(PS_FILE_INVALID_ADDRESS,'0',testName,"4C");
   MS_E_CH_READY_BUS <= '1'; -- NOT ready
   wait for 30 ns;
   check1(PS_FILE_INVALID_ADDRESS,'0',testName,"4D");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns; -- Latch should set
   MS_E_CH_READY_BUS <= '0';  -- Back to our normal testing state
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- And stay set
   check1(PS_FILE_INVALID_ADDRESS,'1',testName,"4E");
   wait for 30 ns; -- Reset
   MS_PROGRAM_RESET_2 <= '0'; 
   wait for 30 ns;
   MS_PROGRAM_RESET_2 <= '1'; 
   wait for 30 ns;
   check1(PS_FILE_INVALID_ADDRESS,'0',testName,"4F");
   
   check1(PS_FILE_BUSY_LATCH,'0',testName,"5A");
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"5B");
   PS_1401_MODE <= '1';
   PS_E_CH_BUSY_BUS <= '1';
   wait for 30 ns;
   check1(PS_FILE_BUSY_LATCH,'0',testName,"5C");
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns; -- Latch should set
   PS_1401_MODE <= '0';
   PS_E_CH_BUSY_BUS <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- Latch should stay set
   check1(PS_FILE_BUSY_LATCH,'1',testName,"5D");
   check1(PS_1401_ANY_FILE_CHECK,'1',testName,"5E");
   wait for 30 ns; -- Reset
   MS_PROGRAM_RESET_2 <= '0'; 
   wait for 30 ns;
   MS_PROGRAM_RESET_2 <= '1'; 
   wait for 30 ns;
   check1(PS_FILE_BUSY_LATCH,'0',testName,"5F");
   check1(PS_1401_ANY_FILE_CHECK,'0',testName,"5G");
   PS_E_CH_SELECT_UNIT_F <= '0';
   
   testName := "13.65.03.1        ";
   
   check1(PS_1401_PROCESS_CHECK,'0',testName,"1A");
   MS_MASTER_ERROR <= '0';
   wait for 30 ns;      
   MS_MASTER_ERROR <= '1';
   wait for 30 ns; -- Latch should still be set
   check1(PS_1401_PROCESS_CHECK,'1',testName,"1B");
   MS_RESET_PROCESS_CK_LAT <= '0';
   wait for 30 ns;
   MS_RESET_PROCESS_CK_LAT <= '1';
   wait for 30 ns;
   check1(PS_1401_PROCESS_CHECK,'0',testName,"1C");
   
   testname := "13.65.08.1        ";
   
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"1A");
   MS_CONS_CANCEL_KEY_RESET <= '0';
   wait for 30 ns; -- Sets latch
   MS_CONS_CANCEL_KEY_RESET <= '1';
   wait for 30 ns; -- Latch still set
   check1(PS_1401_INQUIRY_ERROR,'1',testName,"1B");
   MS_RESET_INQUIRY_ERROR <= '0';
   wait for 30 ns;
   MS_RESET_INQUIRY_ERROR <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"1C");
   
   PS_CONSOLE_READ_OP <= '1';   
   PS_A_CH_INVALID <= '1';
   wait for 30 ns;     
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"2A");
   PS_CONSOLE_READ_OP <= '0';   
   PS_ERROR_SAMPLE <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"2B");
   PS_CONSOLE_READ_OP <= '1';   
   PS_A_CH_INVALID <= '0';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"2C");
   PS_A_CH_INVALID <= '1';
   wait for 30 ns; -- Sets latch
   PS_CONSOLE_READ_OP <= '0';   
   PS_A_CH_INVALID <= '0';
   PS_ERROR_SAMPLE <= '0';   
   wait for 30 ns; -- latch still set
   check1(PS_1401_INQUIRY_ERROR,'1',testName,"2D");
   MS_RESET_INQUIRY_ERROR <= '0';
   wait for 30 ns;
   MS_RESET_INQUIRY_ERROR <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"2E");
   
   PS_CONSOLE_WRITE_OP <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"3A");
   PS_CONSOLE_WRITE_OP <= '0';
   PS_CONS_DATA_CHECK <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"3B");
   PS_CONSOLE_WRITE_OP <= '1';
   wait for 30 ns; -- Sets latch
   PS_CONS_DATA_CHECK <= '0';
   PS_CONS_DATA_CHECK <= '0';
   wait for 30 ns; -- latch still set
   check1(PS_1401_INQUIRY_ERROR,'1',testName,"3C");
   MS_RESET_INQUIRY_ERROR <= '0';
   wait for 30 ns;
   MS_RESET_INQUIRY_ERROR <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"3D");
   
   PS_E2_REG_FULL <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"4A");
   PS_E2_REG_FULL <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"4B");
   PS_E2_REG_FULL <= '1';
   wait for 30 ns; -- Sets latch
   PS_E2_REG_FULL <= '0';
   PS_E_CH_STATUS_SAMPLE_B <= '0';
   wait for 30 ns; -- Latch still set
   check1(PS_1401_INQUIRY_ERROR,'1',testName,"4C");
   MS_RESET_INQUIRY_ERROR <= '0';
   wait for 30 ns;
   MS_RESET_INQUIRY_ERROR <= '1';
   wait for 30 ns;
   check1(PS_1401_INQUIRY_ERROR,'0',testName,"4D");
   
      
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
