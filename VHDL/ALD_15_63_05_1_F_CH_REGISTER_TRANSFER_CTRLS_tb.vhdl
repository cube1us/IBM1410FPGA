-- Test Bench VHDL for IBM SMS ALD page 15.63.05.1
-- Title: F CH REGISTER TRANSFER CTRLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/27/2020 3:34:55 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_63_05_1_F_CH_REGISTER_TRANSFER_CTRLS_tb is
end ALD_15_63_05_1_F_CH_REGISTER_TRANSFER_CTRLS_tb;

architecture behavioral of ALD_15_63_05_1_F_CH_REGISTER_TRANSFER_CTRLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_63_05_1_F_CH_REGISTER_TRANSFER_CTRLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN:	 in STD_LOGIC;
		PS_LOGIC_GATE_EARLY_F:	 in STD_LOGIC;
		PS_LOZENGE_OR_ASTERISK:	 in STD_LOGIC;
		PS_GATE_RESET_F2_FULL_STAR_1414_STAR:	 in STD_LOGIC;
		MS_F_CH_CLOCKED_STROBE_OUTPUT:	 in STD_LOGIC;
		PS_INPUT_CYCLE_DOT_LOAD:	 in STD_LOGIC;
		PS_INPUT_CYCLE_NOT_LAST_INPUT:	 in STD_LOGIC;
		PS_F_CYCLE:	 in STD_LOGIC;
		MS_F_CH_RESET:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		MS_SET_F2_REG:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_1:	 in STD_LOGIC;
		PS_EARLY_LAST_GATE_I_O:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_CLAMPED_A:	 out STD_LOGIC;
		PS_RESET_F2_FULL_LATCH:	 out STD_LOGIC;
		MS_RESET_F2_FULL_LATCH:	 out STD_LOGIC;
		PS_1ST_CLOCK_PULSE_CLAMPED_A:	 out STD_LOGIC;
		PS_SET_F2_REG_DELAYED:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_EARLY_F: STD_LOGIC := '0';
	signal PS_LOZENGE_OR_ASTERISK: STD_LOGIC := '0';
	signal PS_GATE_RESET_F2_FULL_STAR_1414_STAR: STD_LOGIC := '0';
	signal MS_F_CH_CLOCKED_STROBE_OUTPUT: STD_LOGIC := '1';
	signal PS_INPUT_CYCLE_DOT_LOAD: STD_LOGIC := '0';
	signal PS_INPUT_CYCLE_NOT_LAST_INPUT: STD_LOGIC := '0';
	signal PS_F_CYCLE: STD_LOGIC := '0';
	signal MS_F_CH_RESET: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal MS_SET_F2_REG: STD_LOGIC := '1';
	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC := '0';
	signal PS_EARLY_LAST_GATE_I_O: STD_LOGIC := '0';

	-- Outputs

	signal PS_2ND_CLOCK_PULSE_CLAMPED_A: STD_LOGIC;
	signal PS_RESET_F2_FULL_LATCH: STD_LOGIC;
	signal MS_RESET_F2_FULL_LATCH: STD_LOGIC;
	signal PS_1ST_CLOCK_PULSE_CLAMPED_A: STD_LOGIC;
	signal PS_SET_F2_REG_DELAYED: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_63_05_1_F_CH_REGISTER_TRANSFER_CTRLS port map(
		FPGA_CLK => FPGA_CLK,
		PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN => PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN,
		PS_LOGIC_GATE_EARLY_F => PS_LOGIC_GATE_EARLY_F,
		PS_LOZENGE_OR_ASTERISK => PS_LOZENGE_OR_ASTERISK,
		PS_GATE_RESET_F2_FULL_STAR_1414_STAR => PS_GATE_RESET_F2_FULL_STAR_1414_STAR,
		MS_F_CH_CLOCKED_STROBE_OUTPUT => MS_F_CH_CLOCKED_STROBE_OUTPUT,
		PS_INPUT_CYCLE_DOT_LOAD => PS_INPUT_CYCLE_DOT_LOAD,
		PS_INPUT_CYCLE_NOT_LAST_INPUT => PS_INPUT_CYCLE_NOT_LAST_INPUT,
		PS_F_CYCLE => PS_F_CYCLE,
		MS_F_CH_RESET => MS_F_CH_RESET,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		MS_SET_F2_REG => MS_SET_F2_REG,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		PS_EARLY_LAST_GATE_I_O => PS_EARLY_LAST_GATE_I_O,
		PS_2ND_CLOCK_PULSE_CLAMPED_A => PS_2ND_CLOCK_PULSE_CLAMPED_A,
		PS_RESET_F2_FULL_LATCH => PS_RESET_F2_FULL_LATCH,
		MS_RESET_F2_FULL_LATCH => MS_RESET_F2_FULL_LATCH,
		PS_1ST_CLOCK_PULSE_CLAMPED_A => PS_1ST_CLOCK_PULSE_CLAMPED_A,
		PS_SET_F2_REG_DELAYED => PS_SET_F2_REG_DELAYED);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.63.05.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- a := tv(0);
      -- b := tv(1);
      -- c := tv(0);
      -- d := tv(1);
      -- e := tv(2);
      -- f := tv(3);
      g := tv(0);
      h := tv(1);
      -- i := tv(6);
      j := tv(2);
      k := tv(3);
      l := tv(4);
      m := tv(5);
      n := tv(6);
      o := tv(7);
      p := tv(8);


      g1 := n and o and p and m;
      g2 := g and j and h;
      
      MS_F_CH_RESET <= '0';
      wait for 30 ns;
      MS_F_CH_RESET <= '1';
      wait for 30 ns;
      
      -- 1st CP sets
      
      PS_1ST_CLOCK_PULSE_1 <= '0';
      PS_2ND_CLOCK_PULSE_2 <= '1';
      wait for 30 ns;

      check1(PS_1ST_CLOCK_PULSE_CLAMPED_A,PS_1ST_CLOCK_PULSE_1,testName,"1ST CP 21 A");
      check1(PS_2ND_CLOCK_PULSE_CLAMPED_A,PS_2ND_CLOCK_PULSE_2,testName,"2ND CP 21 A");
      
      -- Initial conditions are such that the latch will be RESET at this point
      
      check1(PS_RESET_F2_FULL_LATCH,'0',testName,"Init Set +S Reset E2 Full");           
      check1(MS_RESET_F2_FULL_LATCH,'1',testName,"Init Set -S Reset E2 Full");                       
      
      PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN <= g;
      PS_LOGIC_GATE_EARLY_F <= h;
      PS_LOZENGE_OR_ASTERISK <= j;
      PS_GATE_RESET_F2_FULL_STAR_1414_STAR <= k;
      MS_F_CH_CLOCKED_STROBE_OUTPUT <= not l;
      PS_EARLY_LAST_GATE_I_O <= m;
      PS_F_CYCLE <= n;
      PS_INPUT_CYCLE_NOT_LAST_INPUT <= o;
      PS_INPUT_CYCLE_DOT_LOAD <= p;
                  
      PS_1ST_CLOCK_PULSE_1 <= '1';
      PS_2ND_CLOCK_PULSE_2 <= '0';
      wait for 30 ns;

      check1(PS_RESET_F2_FULL_LATCH,g1 or l or g2 or k,testName,"Set +S Reset E2 Full");
      check1(MS_RESET_F2_FULL_LATCH,NOT(g1 or l or g2 or k),testName,"Set +S Reset E2 Full");
      
      PS_FILE_OP_DOT_D_CY_DOT_NO_SCAN <= '0';
      PS_LOGIC_GATE_EARLY_F <= '0';
      PS_LOZENGE_OR_ASTERISK <= '0';
      PS_GATE_RESET_F2_FULL_STAR_1414_STAR <= '0';
      MS_F_CH_CLOCKED_STROBE_OUTPUT <= '1';
      PS_EARLY_LAST_GATE_I_O <= '0';
      PS_F_CYCLE <= '0';
      PS_INPUT_CYCLE_NOT_LAST_INPUT <= '0';
      PS_INPUT_CYCLE_DOT_LOAD <= '0';

      PS_1ST_CLOCK_PULSE_1 <= '0';
      PS_2ND_CLOCK_PULSE_2 <= '1';      
      wait for 30 ns;
      
      check1(PS_1ST_CLOCK_PULSE_CLAMPED_A,PS_1ST_CLOCK_PULSE_1,testName,"1ST CP 21 B");
      check1(PS_2ND_CLOCK_PULSE_CLAMPED_A,PS_2ND_CLOCK_PULSE_2,testName,"2ND CP 21 B");
      
      check1(PS_RESET_F2_FULL_LATCH,'0',testName,"Finish +S Set E2 Full");           
      check1(MS_RESET_F2_FULL_LATCH,'1',testName,"Finish -S Set E2 Full");                       
      
   end loop;

   check1(PS_SET_F2_REG_DELAYED,'0',testName,"F2 Reg Delayed A");
   MS_SET_F2_REG <= '0';
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'0',testName,"F2 Reg Delayed B");
   MS_SET_F2_REG <= '0';
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'0',testName,"F2 Reg Delayed C");
   PS_1ST_CLOCK_PULSE_1 <= '1';
   wait for 30 ns;
   PS_1ST_CLOCK_PULSE_1 <= '0';
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'0',testName,"F2 Reg Delayed D");
   
   MS_SET_F2_REG <= '1';
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'1',testName,"F2 Reg Delayed E");
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'1',testName,"F2 Reg Delayed F");
   
   PS_1ST_CLOCK_PULSE_1 <= '1';
   wait for 30 ns;
   PS_1ST_CLOCK_PULSE_1 <= '0';
   wait for 30 ns;
   check1(PS_SET_F2_REG_DELAYED,'0',testName,"F2 Reg Delayed G");

   
   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
