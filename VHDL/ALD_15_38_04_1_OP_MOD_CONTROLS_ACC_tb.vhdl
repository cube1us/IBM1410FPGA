-- Test Bench VHDL for IBM SMS ALD page 15.38.04.1
-- Title: OP MOD CONTROLS-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/9/2020 10:40:44 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_38_04_1_OP_MOD_CONTROLS_ACC_tb is
end ALD_15_38_04_1_OP_MOD_CONTROLS_ACC_tb;

architecture behavioral of ALD_15_38_04_1_OP_MOD_CONTROLS_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_38_04_1_OP_MOD_CONTROLS_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		PS_I_RING_1_TIME:	 in STD_LOGIC;
		PS_2_CHAR_ONLY_OP_CODES:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_I_RING_6_TIME:	 in STD_LOGIC;
		PS_1_ADDR_PLUS_MOD_OP_CODES:	 in STD_LOGIC;
		PS_I_CYCLE:	 in STD_LOGIC;
		PS_I_RING_11_TIME:	 in STD_LOGIC;
		PS_2_ADDR_PLUS_MOD_OP_CODES:	 in STD_LOGIC;
		MS_1401_DATA_MOVE_OP:	 in STD_LOGIC;
		PS_A_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_CHAR_TEST_BRANCH_OP_CODE:	 in STD_LOGIC;
		MS_1401_MODE:	 in STD_LOGIC;
		PS_I_RING_8_TIME:	 in STD_LOGIC;
		PS_B_CH_WM_BIT_2:	 in STD_LOGIC;
		PS_LOGIC_GATE_D_1:	 in STD_LOGIC;
		PS_1401_MODE:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_B_CH_NOT_B_AND_NOT_A_BIT:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		MS_PROGRAM_RESET_1:	 in STD_LOGIC;
		PS_1401_DATA_MOVE_OP_CODES:	 in STD_LOGIC;
		PS_I_RING_2_TIME:	 in STD_LOGIC;
		PS_SET_OP_MOD_REG:	 out STD_LOGIC;
		PS_OP_MOD_TIME:	 out STD_LOGIC;
		MS_OP_MOD_CHAR_TIME_STAR_ARS:	 out STD_LOGIC;
		MS_1401_DOT_I_CYCLE:	 out STD_LOGIC;
		MS_RESET_OP_MOD_REG:	 out STD_LOGIC;
		PS_1401_DATA_MOVE_SET_OP_MOD:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal PS_I_RING_1_TIME: STD_LOGIC := '0';
	signal PS_2_CHAR_ONLY_OP_CODES: STD_LOGIC := '0';
	signal PS_B_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_I_RING_6_TIME: STD_LOGIC := '0';
	signal PS_1_ADDR_PLUS_MOD_OP_CODES: STD_LOGIC := '0';
	signal PS_I_CYCLE: STD_LOGIC := '0';
	signal PS_I_RING_11_TIME: STD_LOGIC := '0';
	signal PS_2_ADDR_PLUS_MOD_OP_CODES: STD_LOGIC := '0';
	signal MS_1401_DATA_MOVE_OP: STD_LOGIC := '1';
	signal PS_A_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_CHAR_TEST_BRANCH_OP_CODE: STD_LOGIC := '0';
	signal MS_1401_MODE: STD_LOGIC := '1';
	signal PS_I_RING_8_TIME: STD_LOGIC := '0';
	signal PS_B_CH_WM_BIT_2: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_D_1: STD_LOGIC := '0';
	signal PS_1401_MODE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_E_1: STD_LOGIC := '0';
	signal PS_B_CH_NOT_B_AND_NOT_A_BIT: STD_LOGIC := '0';
	signal PS_I_RING_OP_TIME: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_1: STD_LOGIC := '1';
	signal PS_1401_DATA_MOVE_OP_CODES: STD_LOGIC := '0';
	signal PS_I_RING_2_TIME: STD_LOGIC := '0';

	-- Outputs

	signal PS_SET_OP_MOD_REG: STD_LOGIC;
	signal PS_OP_MOD_TIME: STD_LOGIC;
	signal MS_OP_MOD_CHAR_TIME_STAR_ARS: STD_LOGIC;
	signal MS_1401_DOT_I_CYCLE: STD_LOGIC;
	signal MS_RESET_OP_MOD_REG: STD_LOGIC;
	signal PS_1401_DATA_MOVE_SET_OP_MOD: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_38_04_1_OP_MOD_CONTROLS_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		PS_I_RING_1_TIME => PS_I_RING_1_TIME,
		PS_2_CHAR_ONLY_OP_CODES => PS_2_CHAR_ONLY_OP_CODES,
		PS_B_CH_NOT_WM_BIT => PS_B_CH_NOT_WM_BIT,
		PS_I_RING_6_TIME => PS_I_RING_6_TIME,
		PS_1_ADDR_PLUS_MOD_OP_CODES => PS_1_ADDR_PLUS_MOD_OP_CODES,
		PS_I_CYCLE => PS_I_CYCLE,
		PS_I_RING_11_TIME => PS_I_RING_11_TIME,
		PS_2_ADDR_PLUS_MOD_OP_CODES => PS_2_ADDR_PLUS_MOD_OP_CODES,
		MS_1401_DATA_MOVE_OP => MS_1401_DATA_MOVE_OP,
		PS_A_CH_NOT_WM_BIT => PS_A_CH_NOT_WM_BIT,
		PS_CHAR_TEST_BRANCH_OP_CODE => PS_CHAR_TEST_BRANCH_OP_CODE,
		MS_1401_MODE => MS_1401_MODE,
		PS_I_RING_8_TIME => PS_I_RING_8_TIME,
		PS_B_CH_WM_BIT_2 => PS_B_CH_WM_BIT_2,
		PS_LOGIC_GATE_D_1 => PS_LOGIC_GATE_D_1,
		PS_1401_MODE => PS_1401_MODE,
		PS_LOGIC_GATE_E_1 => PS_LOGIC_GATE_E_1,
		PS_B_CH_NOT_B_AND_NOT_A_BIT => PS_B_CH_NOT_B_AND_NOT_A_BIT,
		PS_I_RING_OP_TIME => PS_I_RING_OP_TIME,
		MS_PROGRAM_RESET_1 => MS_PROGRAM_RESET_1,
		PS_1401_DATA_MOVE_OP_CODES => PS_1401_DATA_MOVE_OP_CODES,
		PS_I_RING_2_TIME => PS_I_RING_2_TIME,
		PS_SET_OP_MOD_REG => PS_SET_OP_MOD_REG,
		PS_OP_MOD_TIME => PS_OP_MOD_TIME,
		MS_OP_MOD_CHAR_TIME_STAR_ARS => MS_OP_MOD_CHAR_TIME_STAR_ARS,
		MS_1401_DOT_I_CYCLE => MS_1401_DOT_I_CYCLE,
		MS_RESET_OP_MOD_REG => MS_RESET_OP_MOD_REG,
		PS_1401_DATA_MOVE_SET_OP_MOD => PS_1401_DATA_MOVE_SET_OP_MOD);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(16 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.38.04.1        ";
   
   for tt in 0 to 65536 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      p := tv(15);
      
      g1 := b and c;
      g2 := e and f;
      g3 := h and i;
      g4 := m and g and not j;
      g5 := g1 or g2 or g3 or g4;
      g6 := d and a and g and p and g5;
      g7 := g5 and k and not m and g;
      
      
   	PS_2ND_CLOCK_PULSE_2 <= a;
      PS_I_RING_1_TIME <= b;
      PS_2_CHAR_ONLY_OP_CODES <= c;
      PS_B_CH_NOT_WM_BIT <= d;
      PS_I_RING_6_TIME <= e;
      PS_1_ADDR_PLUS_MOD_OP_CODES <= f;
      PS_I_CYCLE <= g;
      PS_I_RING_11_TIME <= h;
      PS_2_ADDR_PLUS_MOD_OP_CODES <= i;
      MS_1401_DATA_MOVE_OP <= not j;
      PS_A_CH_NOT_WM_BIT <= k;
      PS_CHAR_TEST_BRANCH_OP_CODE <= l;
      MS_1401_MODE <= not m;
      PS_I_RING_8_TIME <= n;
      PS_B_CH_WM_BIT_2 <= o;
      PS_LOGIC_GATE_D_1 <= p;
      PS_1401_MODE <= m;
            
      wait for 30 ns;
      
      check1(PS_SET_OP_MOD_REG,g6,testName,"Set Op Mod Reg");
      check1(MS_OP_MOD_CHAR_TIME_STAR_ARS,not g7,testName,"OP MOD CHAR TIME *ARS");
      check1(PS_OP_MOD_TIME,g5,testName,"OP Mod Time");
      check1(MS_1401_DOT_I_CYCLE,NOT g4,testName,"-S 1401.I Cycle");
                        
   end loop;

   for tt in 0 to 65536 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      b := tv(0); 
      m := tv(1);
      n := tv(2);
      o := tv(3);
      p := tv(4);
      r := tv(5);
      s := tv(6);
      t := tv(7);
      u := tv(8);
      v := tv(9);
      w := tv(10);

      g8 := not m and p and n;
      g9 := l and m and o and p and n;
      g10:= s and m and r and t;            
      
      PS_I_RING_1_TIME <= b;
      MS_1401_MODE <= not m;
      PS_I_RING_8_TIME <= n;
      PS_B_CH_WM_BIT_2 <= o;
      PS_LOGIC_GATE_D_1 <= p;
      PS_1401_MODE <= m;
   	PS_LOGIC_GATE_E_1 <= r;
      PS_B_CH_NOT_B_AND_NOT_A_BIT <= s;
      PS_I_RING_OP_TIME <= t;
      MS_PROGRAM_RESET_1 <= not u;
      PS_1401_DATA_MOVE_OP_CODES <= v;
      PS_I_RING_2_TIME <= w;
                 
      wait for 30 ns;

      check1(MS_RESET_OP_MOD_REG,NOT((b and v) or g8 or g9 or g10 or u),
         testName,"Reset Op Mod Reg");
      check1(PS_1401_DATA_MOVE_SET_OP_MOD,v and w,testName,"1401 Data Move Set Op Mod");
                              
   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
