-- Test BenchVHDL for IBM SMS ALD group AddressChannelControls
-- Title: AddressChannelControls
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/8/2020 2:21:05 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AddressChannelControls_tb is
end AddressChannelControls_tb;

architecture behavioral of AddressChannelControls_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AddressChannelControls
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_ANY_LAST_GATE: in STD_LOGIC;
		PS_LOGIC_GATE_Z: in STD_LOGIC;
		PS_LOGIC_GATE_F_1: in STD_LOGIC;
		MS_LOGIC_GATE_G: in STD_LOGIC;
		PS_LOGIC_GATE_H: in STD_LOGIC;
		PS_LOGIC_GATE_W: in STD_LOGIC;
		MS_X_CYCLE: in STD_LOGIC;
		MS_ADDRESS_SET_ROUTINE: in STD_LOGIC;
		PS_LOGIC_GATE_A_OR_R: in STD_LOGIC;
		PS_I_CYCLE: in STD_LOGIC;
		PS_X_CYCLE: in STD_LOGIC;
		PS_KEYBOARD_UNLOCK: in STD_LOGIC;
		MS_ADDR_SET_KEYBOARD_LOCK: in STD_LOGIC;
		MS_OP_MOD_CHAR_TIME_STAR_ARS: in STD_LOGIC;
		MS_STORAGE_SCAN_ROUTINE: in STD_LOGIC;
		PS_LOGIC_GATE_J: in STD_LOGIC;
		PS_LOGIC_GATE_K: in STD_LOGIC;
		PS_I_RING_1_OR_6_TIME: in STD_LOGIC;
		MS_I_CYCLE: in STD_LOGIC;
		MS_1401_MODE_1: in STD_LOGIC;
		MS_1401_DOT_X_CYCLE_DOT_A_RING_4_TIME: in STD_LOGIC;
		MS_1401_DOT_I_CYCLE_DOT_I_RING_5_OR_10: in STD_LOGIC;
		PS_OP_OR_OP_MOD_POSITION: in STD_LOGIC;
		MS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (11 downTo 0);
		PS_CONS_MX_X_POS_BUS: in STD_LOGIC_VECTOR (8 downTo 1);
		PS_A_CH_NOT_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		PS_A_RING_BUS: in STD_LOGIC_VECTOR (6 downTo 1);
		MS_INSERT_ZERO_ON_ADDR_CH: out STD_LOGIC;
		PS_SET_NU_TO_ADDR_CH: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_ANY_LAST_GATE: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_Z: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_F_1: STD_LOGIC := '0';
	signal MS_LOGIC_GATE_G: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_H: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_W: STD_LOGIC := '0';
	signal MS_X_CYCLE: STD_LOGIC := '1';
	signal MS_ADDRESS_SET_ROUTINE: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_A_OR_R: STD_LOGIC := '0';
	signal PS_I_CYCLE: STD_LOGIC := '0';
	signal PS_X_CYCLE: STD_LOGIC := '0';
	signal PS_KEYBOARD_UNLOCK: STD_LOGIC := '0';
	signal MS_ADDR_SET_KEYBOARD_LOCK: STD_LOGIC := '1';
	signal MS_OP_MOD_CHAR_TIME_STAR_ARS: STD_LOGIC := '1';
	signal MS_STORAGE_SCAN_ROUTINE: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_J: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_K: STD_LOGIC := '0';
	signal PS_I_RING_1_OR_6_TIME: STD_LOGIC := '0';
	signal MS_I_CYCLE: STD_LOGIC := '1';
	signal MS_1401_MODE_1: STD_LOGIC := '1';
	signal MS_1401_DOT_X_CYCLE_DOT_A_RING_4_TIME: STD_LOGIC := '1';
	signal MS_1401_DOT_I_CYCLE_DOT_I_RING_5_OR_10: STD_LOGIC := '1';
	signal PS_OP_OR_OP_MOD_POSITION: STD_LOGIC := '0';
	signal MS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (11 downTo 0) := "111111111111";
	signal PS_CONS_MX_X_POS_BUS: STD_LOGIC_VECTOR (8 downTo 1) := "00000000";
	signal PS_A_CH_NOT_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";
	signal PS_A_RING_BUS: STD_LOGIC_VECTOR (6 downTo 1) := "000000";

	-- Outputs

	signal MS_INSERT_ZERO_ON_ADDR_CH: STD_LOGIC;
	signal PS_SET_NU_TO_ADDR_CH: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AddressChannelControls port map(
		FPGA_CLK => FPGA_CLK,
		MS_ANY_LAST_GATE => MS_ANY_LAST_GATE,
		PS_LOGIC_GATE_Z => PS_LOGIC_GATE_Z,
		PS_LOGIC_GATE_F_1 => PS_LOGIC_GATE_F_1,
		MS_LOGIC_GATE_G => MS_LOGIC_GATE_G,
		PS_LOGIC_GATE_H => PS_LOGIC_GATE_H,
		PS_LOGIC_GATE_W => PS_LOGIC_GATE_W,
		MS_X_CYCLE => MS_X_CYCLE,
		MS_ADDRESS_SET_ROUTINE => MS_ADDRESS_SET_ROUTINE,
		PS_LOGIC_GATE_A_OR_R => PS_LOGIC_GATE_A_OR_R,
		PS_I_CYCLE => PS_I_CYCLE,
		PS_X_CYCLE => PS_X_CYCLE,
		PS_KEYBOARD_UNLOCK => PS_KEYBOARD_UNLOCK,
		MS_ADDR_SET_KEYBOARD_LOCK => MS_ADDR_SET_KEYBOARD_LOCK,
		MS_OP_MOD_CHAR_TIME_STAR_ARS => MS_OP_MOD_CHAR_TIME_STAR_ARS,
		MS_STORAGE_SCAN_ROUTINE => MS_STORAGE_SCAN_ROUTINE,
		PS_LOGIC_GATE_J => PS_LOGIC_GATE_J,
		PS_LOGIC_GATE_K => PS_LOGIC_GATE_K,
		PS_I_RING_1_OR_6_TIME => PS_I_RING_1_OR_6_TIME,
		MS_I_CYCLE => MS_I_CYCLE,
		MS_1401_MODE_1 => MS_1401_MODE_1,
		MS_1401_DOT_X_CYCLE_DOT_A_RING_4_TIME => MS_1401_DOT_X_CYCLE_DOT_A_RING_4_TIME,
		MS_1401_DOT_I_CYCLE_DOT_I_RING_5_OR_10 => MS_1401_DOT_I_CYCLE_DOT_I_RING_5_OR_10,
		PS_OP_OR_OP_MOD_POSITION => PS_OP_OR_OP_MOD_POSITION,
		MS_I_RING_HDL_BUS => MS_I_RING_HDL_BUS,
		PS_CONS_MX_X_POS_BUS => PS_CONS_MX_X_POS_BUS,
		PS_A_CH_NOT_BUS => PS_A_CH_NOT_BUS,
		PS_A_RING_BUS => PS_A_RING_BUS,
		MS_INSERT_ZERO_ON_ADDR_CH => MS_INSERT_ZERO_ON_ADDR_CH,
		PS_SET_NU_TO_ADDR_CH => PS_SET_NU_TO_ADDR_CH);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--constant clk_period : time := 10 ns;

--begin
--   fpga_clk <= '0';
--   wait for clk_period / 2;
--   fpga_clk <= '1';
--   wait for clk_period / 2;
--end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(15 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7: std_logic;

   begin

   -- Your test bench code

   testName := "14.71.60.1        ";
   
   for tt in 0 to 256 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      -- d := tv(3);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      i := tv(7);

		PS_LOGIC_GATE_Z <= a;
		MS_ADDRESS_SET_ROUTINE <= not b;
		MS_ANY_LAST_GATE <= not c;
		-- PS_ZERO_TO_ADDR_CH can't test here - internal only signal
		PS_LOGIC_GATE_W <= e;
		PS_LOGIC_GATE_H <= f;
		MS_X_CYCLE <= not g;
		MS_LOGIC_GATE_G <= not h;
		PS_LOGIC_GATE_F_1 <= i;
	   
	   wait for 30 ns;

      check1(MS_INSERT_ZERO_ON_ADDR_CH,not(h or i or e or (f and not g) or 
         (a and not c and NOT b)),testName,"Insert Zero on Addr Ch");
      
   end loop;

   check1(MS_INSERT_ZERO_ON_ADDR_CH,'1',testName,"Verify NOT Insert Zero on Addr Ch");

   testName := "14.71.61.1        ";
   
   for tt in 0 to 2048 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);

      g1 := f and g and h and not i and not j and not k;
      
		PS_CONS_MX_X_POS_BUS(MX_X1A_POS) <= a;
      PS_KEYBOARD_UNLOCK <= b;
      MS_ADDR_SET_KEYBOARD_LOCK <= not c;
      PS_X_CYCLE <= d;
      PS_LOGIC_GATE_H <= e;
      PS_LOGIC_GATE_A_OR_R <= f;
      PS_I_CYCLE <= g;
      PS_A_CH_NOT_BUS(HDL_WM_BIT) <= h;
      MS_OP_MOD_CHAR_TIME_STAR_ARS <= not i;
      MS_STORAGE_SCAN_ROUTINE <= not j;
      MS_I_RING_HDL_BUS(0) <= not k; -- Op time
      	   
	   wait for 30 ns;
	   
	   check1(PS_SET_NU_TO_ADDR_CH,(a and b and not c) or (d and e) or g1,
	     testName,"Set NU to Addr CH");

   end loop;

   testName := "14.71.62.1        ";
   
   for tt in 0 to 16384 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);

      g1 := a and not b and not c;
      g2 := not c and not b and e;
      g3 := h and e and i;
      g4 := g and not f and n and not d;
      g5 := i and j and l;
      g6 := not d and n and not m;
      g7 := not d and n and k;

      MS_X_CYCLE <= '0';  -- Prevent issues with destination page true on LGH
		PS_LOGIC_GATE_J <= a;
		MS_1401_DOT_X_CYCLE_DOT_A_RING_4_TIME <= not b;
		MS_1401_DOT_I_CYCLE_DOT_I_RING_5_OR_10 <= not c;
		MS_ADDRESS_SET_ROUTINE <= not d;
		PS_LOGIC_GATE_K <= e;
		MS_1401_MODE_1 <= not f;
		PS_OP_OR_OP_MOD_POSITION <= g;
		PS_A_RING_BUS(4) <= h;
		PS_X_CYCLE <= i;
		PS_A_RING_BUS(6) <= j;
		PS_I_RING_1_OR_6_TIME <= k;
		PS_LOGIC_GATE_H <= l;
		MS_I_CYCLE <= not m;
		PS_LOGIC_GATE_A_OR_R <= n;      
      
	   wait for 30 ns;
	   
	   -- Output from this page is internal only, so used destination page signal
	   -- There don't seem to be any overlapping terms owing to different signal
	   -- polarity inputs for X Cycle
	   
	   check1(MS_INSERT_ZERO_ON_ADDR_CH,
	     not(g1 or g2 or g3 or g4 or g5 or g6 or g7),
	     testName,"ZERO TO ADDR CH");

   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
