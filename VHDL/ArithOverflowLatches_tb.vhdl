-- Test BenchVHDL for IBM SMS ALD group ArithOverflowLatches
-- Title: ArithOverflowLatches
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 11/7/2020 10:34:32 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ArithOverflowLatches_tb is
end ArithOverflowLatches_tb;

architecture behavioral of ArithOverflowLatches_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ArithOverflowLatches
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_LAST_LOGIC_GATE_2: in STD_LOGIC;
		PS_LAST_LOGIC_GATE_1: in STD_LOGIC;
		MS_SET_NO_DIV_OVERFLOW: in STD_LOGIC;
		MS_RESET_DIV_OVERFLOW: in STD_LOGIC;
		MS_COMPUTER_RESET_1: in STD_LOGIC;
		MS_1401_MODE_1: in STD_LOGIC;
		MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC: in STD_LOGIC;
		MS_SET_NO_OVERFLOW: in STD_LOGIC;
		MS_RESET_OVERFLOW: in STD_LOGIC;
		MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC: in STD_LOGIC;
		MS_1401_DIVIDE_OVERFLOW: in STD_LOGIC;
		PS_DIV_OVERFLOW: out STD_LOGIC;
		PS_NOT_DIV_OVERFLOW: out STD_LOGIC;
		PS_OVERFLOW: out STD_LOGIC;
		PS_NO_OVERFLOW: out STD_LOGIC;
		LAMP_15A1H12: out STD_LOGIC;
		LAMP_15A1F12: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_LAST_LOGIC_GATE_2: STD_LOGIC := '0';
	signal PS_LAST_LOGIC_GATE_1: STD_LOGIC := '0';
	signal MS_SET_NO_DIV_OVERFLOW: STD_LOGIC := '1';
	signal MS_RESET_DIV_OVERFLOW: STD_LOGIC := '1';
	signal MS_COMPUTER_RESET_1: STD_LOGIC := '1';
	signal MS_1401_MODE_1: STD_LOGIC := '1';
	signal MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC: STD_LOGIC := '1';
	signal MS_SET_NO_OVERFLOW: STD_LOGIC := '1';
	signal MS_RESET_OVERFLOW: STD_LOGIC := '1';
	signal MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC: STD_LOGIC := '1';
	signal MS_1401_DIVIDE_OVERFLOW: STD_LOGIC := '1';

	-- Outputs

	signal PS_DIV_OVERFLOW: STD_LOGIC;
	signal PS_NOT_DIV_OVERFLOW: STD_LOGIC;
	signal PS_OVERFLOW: STD_LOGIC;
	signal PS_NO_OVERFLOW: STD_LOGIC;
	signal LAMP_15A1H12: STD_LOGIC;
	signal LAMP_15A1F12: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ArithOverflowLatches port map(
		FPGA_CLK => FPGA_CLK,
		PS_LAST_LOGIC_GATE_2 => PS_LAST_LOGIC_GATE_2,
		PS_LAST_LOGIC_GATE_1 => PS_LAST_LOGIC_GATE_1,
		MS_SET_NO_DIV_OVERFLOW => MS_SET_NO_DIV_OVERFLOW,
		MS_RESET_DIV_OVERFLOW => MS_RESET_DIV_OVERFLOW,
		MS_COMPUTER_RESET_1 => MS_COMPUTER_RESET_1,
		MS_1401_MODE_1 => MS_1401_MODE_1,
		MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC => MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC,
		MS_SET_NO_OVERFLOW => MS_SET_NO_OVERFLOW,
		MS_RESET_OVERFLOW => MS_RESET_OVERFLOW,
		MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC => MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC,
		MS_1401_DIVIDE_OVERFLOW => MS_1401_DIVIDE_OVERFLOW,
		PS_DIV_OVERFLOW => PS_DIV_OVERFLOW,
		PS_NOT_DIV_OVERFLOW => PS_NOT_DIV_OVERFLOW,
		PS_OVERFLOW => PS_OVERFLOW,
		PS_NO_OVERFLOW => PS_NO_OVERFLOW,
		LAMP_15A1H12 => LAMP_15A1H12,
		LAMP_15A1F12 => LAMP_15A1F12);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "16.45.*.1         ";

   MS_COMPUTER_RESET_1 <= '0';
   wait for 30 ns;
   MS_COMPUTER_RESET_1 <= '1';
   wait for 30 ns;
   
   check1(PS_NOT_DIV_OVERFLOW,'1',testName,"Computer Reset Not Div Overflow");
   check1(PS_DIV_OVERFLOW,'0',testName,"Computer Reset Div Overflow");
   check1(LAMP_15A1H12,'0',testName,"Computer Reset Div Overflow Lamp");

   for tt in 0 to 2**2 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- Enter with No Div Overflow SET
      check1(PS_NOT_DIV_OVERFLOW,'1',testName,"Check Not Div Overflow Set");
      MS_SET_NO_DIV_OVERFLOW <= '1';
      MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC <= not tv(0);
      PS_LAST_LOGIC_GATE_2 <= tv(1);
      wait for 30 ns; -- Perhaps reset no div overflow
      MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC <= '1';
      PS_LAST_LOGIC_GATE_2 <= '0';
      wait for 30 ns;  -- If reset, should stay reset
      check1(PS_NOT_DIV_OVERFLOW,not(tv(0) and tv(1)),testName,"Reset Not Div Overflow");
      -- Set No Div Overflow again, regardless
      MS_SET_NO_DIV_OVERFLOW <= '0';
      wait for 30 ns;
      MS_SET_NO_DIV_OVERFLOW <= '1';
      wait for 30 ns;      
      check1(PS_NOT_DIV_OVERFLOW,'1',testname,"Set Not Div Overflow");                  
   end loop;

   MS_COMPUTER_RESET_1 <= '0';
   wait for 30 ns;
   MS_COMPUTER_RESET_1 <= '1';
   wait for 30 ns;

   for tt in 0 to 2**3 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));   
      -- Enter with Div Overflow RESET
      check1(PS_DIV_OVERFLOW,'0',testName,"Check Div Overflow Reset");
      MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC <= not tv(0);
      MS_1401_MODE_1 <= not tv(1);
      PS_LAST_LOGIC_GATE_1 <= tv(2);
      wait for 30 ns; -- Perhaps set latch
      MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_RC <= '1';
      MS_1401_MODE_1 <= '1';
      PS_LAST_LOGIC_GATE_1 <= '0';
      wait for 30 ns;
      check1(PS_DIV_OVERFLOW,tv(0) and not tv(1) and tv(2),testName,"Set Div Overflow");
      check1(LAMP_15A1H12,PS_DIV_OVERFLOW,testName,"Set Div Overflow Lamp");
      -- Reset
      MS_RESET_DIV_OVERFLOW <= '0';
      wait for 30 ns;
      MS_RESET_DIV_OVERFLOW <= '1';
      wait for 30 ns;
      check1(PS_DIV_OVERFLOW,'0',testName,"Reset Div Overflow");
      check1(LAMP_15A1H12,PS_DIV_OVERFLOW,testName,"Reset Div Overflow Lamp");
   end loop;   

   MS_COMPUTER_RESET_1 <= '0';
   wait for 30 ns;
   MS_COMPUTER_RESET_1 <= '1';
   wait for 30 ns;

   for tt in 0 to 2**3 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- Enter with No Overflow SET   
      check1(PS_NO_OVERFLOW,'1',testName,"Check No Overflow Set");
      PS_LAST_LOGIC_GATE_1 <= tv(0);
      MS_1401_DIVIDE_OVERFLOW <= not tv(1);
      MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC <= not tv(2);
      wait for 30 ns; -- Perhaps reset
      PS_LAST_LOGIC_GATE_1 <= '0';
      MS_1401_DIVIDE_OVERFLOW <= '1';
      MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC <= '1';
      wait for 30 ns;
      check1(PS_NO_OVERFLOW,not(tv(0) and (tv(1) or tv(2))),testName,
         "Reset No Overflow");
      -- Now force the latchs et
      MS_SET_NO_OVERFLOW <= '0';
      wait for 30 ns;
      MS_SET_NO_OVERFLOW <= '1';
      wait for 30 ns;
      check1(PS_NO_OVERFLOW,'1',testName,"Set No Overflow");
   end loop;   

   MS_COMPUTER_RESET_1 <= '0';
   wait for 30 ns;
   MS_COMPUTER_RESET_1 <= '1';
   wait for 30 ns;

   for tt in 0 to 2**3 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- Enter with Overflow RESET
      check1(PS_OVERFLOW,'0',testName,"Check Overflow Reset");
      PS_LAST_LOGIC_GATE_2 <= tv(0);
      MS_1401_DIVIDE_OVERFLOW <= not tv(1);
      MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC <= not tv(2);
      wait for 30 ns; -- Perhaps set overflow
      PS_LAST_LOGIC_GATE_2 <= '0';
      MS_1401_DIVIDE_OVERFLOW <= '1';
      MB_A_OR_S_DOT_B_DOT_1_DOT_T_DOT_BW_DOT_RC <= '1';
      wait for 30 ns;
      check1(PS_OVERFLOW,tv(0) and (tv(1) or tv(2)),testName,"Set Overflow");
      check1(LAMP_15A1F12,PS_OVERFLOW,testName,"Overflow Lamp");
      MS_RESET_OVERFLOW <= '0';
      wait for 30 ns;
      MS_RESET_OVERFLOW <= '1';
      wait for 30 ns;
      check1(PS_OVERFLOW,'0',testName,"Reset Overflow");      
   end loop;
   
   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
