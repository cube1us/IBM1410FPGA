-- Test BenchVHDL for IBM SMS ALD group FChUnitNumberDecode
-- Title: FChUnitNumberDecode
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/17/2020 4:41:46 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity FChUnitNumberDecode_tb is
end FChUnitNumberDecode_tb;

architecture behavioral of FChUnitNumberDecode_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component FChUnitNumberDecode
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_F_CH_U_NU_REG_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F_CH_U_NU_REG_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MS_F_CH_UNIT_NUMBER_0: out STD_LOGIC;
		MC_UNIT_NU_0_TO_TAU_STAR_F_CH: out STD_LOGIC;
		PS_F_CH_UNIT_NUMBER_0: out STD_LOGIC;
		MC_SEEK_STAR_F_CH_1405: out STD_LOGIC;
		MC_UNIT_NU_1_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_1: out STD_LOGIC;
		PS_F_CH_UNIT_NUMBER_1: out STD_LOGIC;
		MC_SINGLE_REC_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_2_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_2: out STD_LOGIC;
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_4: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_3: out STD_LOGIC;
		PS_F_CH_UNIT_NUMBER_3: out STD_LOGIC;
		MC_UNIT_NU_3_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_CHECK_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_4_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_WRITE_ADDR_STAR_F_CH_TO_1405: out STD_LOGIC;
		MC_UNIT_NU_5_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MS_F_CH_UNIT_NUMBER_9: out STD_LOGIC;
		MC_UNIT_NU_6_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_7_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_8_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_UNIT_NU_9_TO_TAU_STAR_F_CH: out STD_LOGIC;
		MC_F_CH_UNIT_STAR_1301_STAR_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_F_CH_U_NU_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_F_CH_U_NU_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal MS_F_CH_UNIT_NUMBER_0: STD_LOGIC;
	signal MC_UNIT_NU_0_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal PS_F_CH_UNIT_NUMBER_0: STD_LOGIC;
	signal MC_SEEK_STAR_F_CH_1405: STD_LOGIC;
	signal MC_UNIT_NU_1_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_1: STD_LOGIC;
	signal PS_F_CH_UNIT_NUMBER_1: STD_LOGIC;
	signal MC_SINGLE_REC_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_2_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_2: STD_LOGIC;
	signal MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_4: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_3: STD_LOGIC;
	signal PS_F_CH_UNIT_NUMBER_3: STD_LOGIC;
	signal MC_UNIT_NU_3_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_CHECK_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_4_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_WRITE_ADDR_STAR_F_CH_TO_1405: STD_LOGIC;
	signal MC_UNIT_NU_5_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MS_F_CH_UNIT_NUMBER_9: STD_LOGIC;
	signal MC_UNIT_NU_6_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_7_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_8_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_UNIT_NU_9_TO_TAU_STAR_F_CH: STD_LOGIC;
	signal MC_F_CH_UNIT_STAR_1301_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: FChUnitNumberDecode port map(
		FPGA_CLK => FPGA_CLK,
		PS_F_CH_U_NU_REG_NOT_BUS => PS_F_CH_U_NU_REG_NOT_BUS,
		PS_F_CH_U_NU_REG_BUS => PS_F_CH_U_NU_REG_BUS,
		MS_F_CH_UNIT_NUMBER_0 => MS_F_CH_UNIT_NUMBER_0,
		MC_UNIT_NU_0_TO_TAU_STAR_F_CH => MC_UNIT_NU_0_TO_TAU_STAR_F_CH,
		PS_F_CH_UNIT_NUMBER_0 => PS_F_CH_UNIT_NUMBER_0,
		MC_SEEK_STAR_F_CH_1405 => MC_SEEK_STAR_F_CH_1405,
		MC_UNIT_NU_1_TO_TAU_STAR_F_CH => MC_UNIT_NU_1_TO_TAU_STAR_F_CH,
		MS_F_CH_UNIT_NUMBER_1 => MS_F_CH_UNIT_NUMBER_1,
		PS_F_CH_UNIT_NUMBER_1 => PS_F_CH_UNIT_NUMBER_1,
		MC_SINGLE_REC_STAR_F_CH_TO_1405 => MC_SINGLE_REC_STAR_F_CH_TO_1405,
		MC_UNIT_NU_2_TO_TAU_STAR_F_CH => MC_UNIT_NU_2_TO_TAU_STAR_F_CH,
		MS_F_CH_UNIT_NUMBER_2 => MS_F_CH_UNIT_NUMBER_2,
		MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH => MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,
		MS_F_CH_UNIT_NUMBER_4 => MS_F_CH_UNIT_NUMBER_4,
		MS_F_CH_UNIT_NUMBER_3 => MS_F_CH_UNIT_NUMBER_3,
		PS_F_CH_UNIT_NUMBER_3 => PS_F_CH_UNIT_NUMBER_3,
		MC_UNIT_NU_3_TO_TAU_STAR_F_CH => MC_UNIT_NU_3_TO_TAU_STAR_F_CH,
		MC_WRITE_CHECK_STAR_F_CH_TO_1405 => MC_WRITE_CHECK_STAR_F_CH_TO_1405,
		MC_UNIT_NU_4_TO_TAU_STAR_F_CH => MC_UNIT_NU_4_TO_TAU_STAR_F_CH,
		MC_WRITE_ADDR_STAR_F_CH_TO_1405 => MC_WRITE_ADDR_STAR_F_CH_TO_1405,
		MC_UNIT_NU_5_TO_TAU_STAR_F_CH => MC_UNIT_NU_5_TO_TAU_STAR_F_CH,
		MS_F_CH_UNIT_NUMBER_9 => MS_F_CH_UNIT_NUMBER_9,
		MC_UNIT_NU_6_TO_TAU_STAR_F_CH => MC_UNIT_NU_6_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_7_TO_TAU_STAR_F_CH => MC_UNIT_NU_7_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_8_TO_TAU_STAR_F_CH => MC_UNIT_NU_8_TO_TAU_STAR_F_CH,
		MC_UNIT_NU_9_TO_TAU_STAR_F_CH => MC_UNIT_NU_9_TO_TAU_STAR_F_CH,
		MC_F_CH_UNIT_STAR_1301_STAR_BUS => MC_F_CH_UNIT_STAR_1301_STAR_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable unit, count: integer;

   begin

   -- Your test bench code
   testName := "15.56.04.1 - 06.1 ";

   for tt in 0 to 128 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      unit := tt mod 16;  -- Just the last 4 bits
      PS_F_CH_U_NU_REG_BUS(3 downto 0) <= tv(3 downto 0);
      PS_F_CH_U_NU_REG_BUS(HDL_C_BIT) <= tv(4);
      PS_F_CH_U_NU_REG_NOT_BUS <= not (tv(4) & "000" & tv(3 downto 0));
      wait for 30 ns;
      
      for i in 0 to 3 loop
         check1(MC_F_CH_UNIT_STAR_1301_STAR_BUS(i),not tv(i),testName,"Unit*1301 " & Integer'Image(i));
      end loop;
      check1(MC_F_CH_UNIT_STAR_1301_STAR_BUS(HDL_C_BIT),not tv(4),testName,"Unit*1301 C Bit");
            
      count := 0;
      for bitnum in 0 to 4 loop
         if(tv(bitnum) = '1') then
            count := count + 1;
         end if;
      end loop;
            
      if(count mod 2 = 0) then  -- even parity - nothing should be on
         check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Even Parity tt=" & Integer'Image(tt));
         check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Even Parity tt=" & Integer'Image(tt));
         check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Even Parity tt=" & Integer'Image(tt));
         check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Even Parity tt=" & Integer'Image(tt));
         check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
         check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
         check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
         check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
         check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
      else -- odd parity
         case unit is
         when 10 => -- Unit zero is 8 + 2 bits
            check1(PS_F_CH_UNIT_NUMBER_0,'1',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'0',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'0',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 1 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'1',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'0',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'0',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 2 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'0',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'0',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 3 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'1',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'0',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'0',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 4 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'0',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'0',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 5 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 6 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 7 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 8 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when 9 => 
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'0',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'0',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         when others =>  -- do nothing for now
            check1(PS_F_CH_UNIT_NUMBER_0,'0',testName,"+S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_0,'1',testName,"-S E Ch Unit 0 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_1,'0',testName,"+S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_1,'1',testName,"-S E Ch Unit 1 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_2,'1',testName,"-S E Ch Unit 2 Odd Parity tt=" & Integer'Image(tt));
            check1(PS_F_CH_UNIT_NUMBER_3,'0',testName,"+S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_3,'1',testName,"-S E Ch Unit 3 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_4,'1',testName,"-S E Ch Unit 4 Odd Parity tt=" & Integer'Image(tt));
            check1(MS_F_CH_UNIT_NUMBER_9,'1',testName,"-S E Ch Unit 9 Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_0_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 0 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_1_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 1 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_2_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 2 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_3_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 3 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_4_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 4 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_5_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 5 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_6_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 6 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_7_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 7 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_8_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 8 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_UNIT_NU_9_TO_TAU_STAR_F_CH,'1',testName,"-C Unit 9 to TAU Odd Parity tt=" & Integer'Image(tt));
            check1(MC_SEEK_STAR_F_CH_1405,'1',testname,"-C Seek * 1405 " & Integer'Image(tt));
            check1(MC_SINGLE_REC_STAR_F_CH_TO_1405,'1',testname,"-C Single Rec * 1405 " & Integer'Image(tt));
            check1(MC_FULL_TRACK_WITHOUT_IA_STAR_1405_F_CH,'1',testname,"-C Full Track * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_CHECK_STAR_F_CH_TO_1405,'1',testname,"-C Write Check * 1405 " & Integer'Image(tt));
            check1(MC_WRITE_ADDR_STAR_F_CH_TO_1405,'1',testname,"-C Write Addr * 1405 " & Integer'Image(tt));
         end case;
      end if;
         
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
