-- VHDL for IBM SMS ALD page 15.60.27.1
-- Title: E CH REGISTERS C BIT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/18/2020 5:45:12 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_60_27_1_E_CH_REGISTERS_C_BIT_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_E1_INPUT_C_BIT:	 in STD_LOGIC;
		PS_SET_E1_REG:	 in STD_LOGIC;
		PS_E1_INPUT_C_BIT:	 in STD_LOGIC;
		PS_COPY_E1_WM_DOT_C_BIT:	 in STD_LOGIC;
		PS_SET_E2_REG:	 in STD_LOGIC;
		MS_SET_E2_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_COPY_INV_E1_WM_DOT_C_BIT:	 in STD_LOGIC;
		MS_E2_REG_C_BIT:	 out STD_LOGIC;
		PS_E2_REG_C_BIT:	 out STD_LOGIC);
end ALD_15_60_27_1_E_CH_REGISTERS_C_BIT_ACC;

architecture behavioral of ALD_15_60_27_1_E_CH_REGISTERS_C_BIT_ACC is 

	signal OUT_4B_NoPin: STD_LOGIC;
	signal OUT_3B_G: STD_LOGIC;
	signal OUT_3B_G_Latch: STD_LOGIC;
	signal OUT_2B_A: STD_LOGIC;
	signal OUT_2B_A_Latch: STD_LOGIC;
	signal OUT_4C_Q: STD_LOGIC;
	signal OUT_4E_F: STD_LOGIC;
	signal OUT_4F_E: STD_LOGIC;
	signal OUT_3F_NoPin: STD_LOGIC;
	signal OUT_3F_NoPin_Latch: STD_LOGIC;
	signal OUT_2F_P: STD_LOGIC;
	signal OUT_2F_P_Latch: STD_LOGIC;
	signal OUT_1F_C: STD_LOGIC;
	signal OUT_4G_D: STD_LOGIC;
	signal OUT_1G_B: STD_LOGIC;
	signal OUT_4H_C: STD_LOGIC;
	signal OUT_2H_P: STD_LOGIC;
	signal OUT_DOT_2F: STD_LOGIC;

begin

	OUT_4B_NoPin <= NOT(MS_E1_INPUT_C_BIT AND PS_SET_E1_REG );
	OUT_3B_G_Latch <= NOT(OUT_4B_NoPin AND OUT_2B_A );
	OUT_2B_A_Latch <= NOT(OUT_3B_G AND OUT_4C_Q );
	OUT_4C_Q <= NOT(PS_SET_E1_REG AND PS_E1_INPUT_C_BIT );
	OUT_4E_F <= NOT(OUT_3B_G AND PS_COPY_E1_WM_DOT_C_BIT AND PS_SET_E2_REG );
	OUT_4F_E <= NOT(OUT_2B_A AND PS_SET_E2_REG AND PS_COPY_INV_E1_WM_DOT_C_BIT );
	OUT_3F_NoPin_Latch <= NOT(OUT_4E_F AND OUT_4F_E AND OUT_DOT_2F );
	OUT_2F_P_Latch <= NOT(OUT_3F_NoPin AND MS_SET_E2_WORD_SEPARATOR );
	OUT_1F_C <= NOT OUT_DOT_2F;
	OUT_4G_D <= NOT(OUT_2B_A AND PS_SET_E2_REG AND PS_COPY_E1_WM_DOT_C_BIT );
	OUT_1G_B <= NOT OUT_3F_NoPin;
	OUT_4H_C <= NOT(OUT_3B_G AND PS_SET_E2_REG AND PS_COPY_INV_E1_WM_DOT_C_BIT );
	OUT_2H_P <= NOT(OUT_4G_D AND OUT_4H_C );
	OUT_DOT_2F <= OUT_2F_P OR OUT_2H_P;

	MS_E2_REG_C_BIT <= OUT_1F_C;
	PS_E2_REG_C_BIT <= OUT_1G_B;

	Latch_3B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3B_G_Latch,
		Q => OUT_3B_G,
		QBar => OPEN );

	Latch_2B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2B_A_Latch,
		Q => OUT_2B_A,
		QBar => OPEN );

	Latch_3F: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3F_NoPin_Latch,
		Q => OUT_3F_NoPin,
		QBar => OPEN );

	Latch_2F: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2F_P_Latch,
		Q => OUT_2F_P,
		QBar => OPEN );


end;
