-- VHDL for IBM SMS ALD page 13.50.01.1
-- Title: E CH PERCENT+COML AT I-O LATC-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/29/2020 12:32:30 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_I_CYCLE_1:	 in STD_LOGIC;
		PS_B_CH_8_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_2_BIT:	 in STD_LOGIC;
		PS_I_RING_3_TIME:	 in STD_LOGIC;
		PS_B_CH_4_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_1_BIT:	 in STD_LOGIC;
		PS_LOGIC_GATE_E_1:	 in STD_LOGIC;
		PS_ANY_M_OR_L_OR_U_OP:	 in STD_LOGIC;
		MS_I_O_LOZENGE_LATCH:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_B_CH_A_BIT:	 in STD_LOGIC;
		MS_PROGRAM_RESET_2:	 in STD_LOGIC;
		PS_1401_MODE:	 in STD_LOGIC;
		PS_B_CH_NOT_B_BIT:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		MS_1401_MODE:	 in STD_LOGIC;
		MS_I_O_ASTERISK_LATCH:	 in STD_LOGIC;
		PS_B_CH_NOT_A_BIT:	 in STD_LOGIC;
		PS_SET_I_O_CH_SEL_REG:	 out STD_LOGIC;
		PS_I_O_PERCENT_OR_LOZENGE:	 out STD_LOGIC;
		MS_I_O_PERCENT_LATCH:	 out STD_LOGIC;
		PS_I_O_PERCENT_LATCH:	 out STD_LOGIC;
		PS_PERCENT_OR_COML_AT:	 out STD_LOGIC;
		MS_I_O_COML_AT_LATCH:	 out STD_LOGIC;
		MS_RESET_I_O_CH_SEL_REG:	 out STD_LOGIC;
		MS_PERCENT_OR_COML_AT:	 out STD_LOGIC;
		PS_I_O_COML_AT_LATCH:	 out STD_LOGIC;
		PS_COML_AT_OR_ASTERISK:	 out STD_LOGIC);
end ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC;

architecture behavioral of ALD_13_50_01_1_E_CH_PERCENT_COML_AT_I_O_LATC_ACC is 

	signal OUT_5A_G: STD_LOGIC;
	signal OUT_4A_B: STD_LOGIC;
	signal OUT_5B_G: STD_LOGIC;
	signal OUT_2B_C: STD_LOGIC;
	signal OUT_1B_D: STD_LOGIC;
	signal OUT_5C_C: STD_LOGIC;
	signal OUT_3C_NoPin: STD_LOGIC;
	signal OUT_3C_NoPin_Latch: STD_LOGIC;
	signal OUT_2C_P: STD_LOGIC;
	signal OUT_2C_P_Latch: STD_LOGIC;
	signal OUT_1C_B: STD_LOGIC;
	signal OUT_3D_E: STD_LOGIC;
	signal OUT_1D_B: STD_LOGIC;
	signal OUT_3E_G: STD_LOGIC;
	signal OUT_1E_H: STD_LOGIC;
	signal OUT_3F_C: STD_LOGIC;
	signal OUT_1F_F: STD_LOGIC;
	signal OUT_5G_B: STD_LOGIC;
	signal OUT_3G_K: STD_LOGIC;
	signal OUT_2G_C: STD_LOGIC;
	signal OUT_5H_D: STD_LOGIC;
	signal OUT_3H_NoPin: STD_LOGIC;
	signal OUT_3H_NoPin_Latch: STD_LOGIC;
	signal OUT_2H_P: STD_LOGIC;
	signal OUT_2H_P_Latch: STD_LOGIC;
	signal OUT_1H_R: STD_LOGIC;
	signal OUT_5I_R: STD_LOGIC;
	signal OUT_4I_D: STD_LOGIC;
	signal OUT_3I_D: STD_LOGIC;
	signal OUT_1I_B: STD_LOGIC;
	signal OUT_DOT_5A: STD_LOGIC;
	signal OUT_DOT_1B: STD_LOGIC;
	signal OUT_DOT_3E: STD_LOGIC;
	signal OUT_DOT_5G: STD_LOGIC;
	signal OUT_DOT_3H: STD_LOGIC;
	signal OUT_DOT_4I: STD_LOGIC;

begin

	OUT_5A_G <= NOT(PS_B_CH_8_BIT AND PS_B_CH_NOT_2_BIT AND PS_I_CYCLE_1 );
	OUT_4A_B <= NOT OUT_DOT_5A;
	OUT_5B_G <= NOT(PS_B_CH_4_BIT AND PS_B_CH_NOT_1_BIT AND PS_I_RING_3_TIME );
	OUT_2B_C <= NOT OUT_2C_P;
	OUT_1B_D <= NOT OUT_2B_C;
	OUT_5C_C <= NOT(PS_ANY_M_OR_L_OR_U_OP AND PS_LOGIC_GATE_E_1 AND PS_B_CH_NOT_WM_BIT );
	OUT_3C_NoPin_Latch <= NOT(OUT_2C_P AND MS_PROGRAM_RESET_2 AND OUT_DOT_5G );
	OUT_2C_P_Latch <= NOT(OUT_3C_NoPin AND OUT_3D_E AND OUT_DOT_3E );
	OUT_1C_B <= NOT MS_I_O_LOZENGE_LATCH;
	OUT_3D_E <= NOT(OUT_4A_B AND PS_B_CH_A_BIT AND PS_B_CH_NOT_B_BIT );
	OUT_1D_B <= NOT OUT_3C_NoPin;
	OUT_3E_G <= NOT(OUT_4A_B AND PS_1401_MODE );

	SMS_AEK_1E: entity SMS_AEK
	    port map (
		IN1 => OUT_2B_C,	-- Pin P
		IN2 => OUT_1F_F,	-- Pin B
		OUT1 => OUT_1E_H );

	OUT_3F_C <= NOT(PS_B_CH_NOT_B_BIT AND PS_B_CH_NOT_A_BIT );
	OUT_1F_F <= NOT OUT_2G_C;
	OUT_5G_B <= NOT PS_I_RING_OP_TIME;
	OUT_3G_K <= NOT(MS_1401_MODE );
	OUT_2G_C <= NOT OUT_2H_P;
	OUT_5H_D <= NOT PS_LOGIC_GATE_E_1;
	OUT_3H_NoPin_Latch <= NOT(OUT_2H_P AND OUT_DOT_5G AND MS_PROGRAM_RESET_2 );
	OUT_2H_P_Latch <= NOT(OUT_3H_NoPin AND OUT_DOT_3H );
	OUT_1H_R <= NOT OUT_1E_H;
	OUT_5I_R <= NOT MS_I_O_ASTERISK_LATCH;
	OUT_4I_D <= NOT OUT_2G_C;
	OUT_3I_D <= NOT(OUT_4A_B AND PS_B_CH_NOT_B_BIT AND PS_B_CH_NOT_A_BIT );
	OUT_1I_B <= NOT OUT_3H_NoPin;
	OUT_DOT_5A <= OUT_5A_G OR OUT_5B_G OR OUT_5C_C;
	OUT_DOT_1B <= OUT_1B_D OR OUT_1C_B;
	OUT_DOT_3E <= OUT_3E_G OR OUT_3F_C;
	OUT_DOT_5G <= OUT_5G_B OR OUT_5H_D;
	OUT_DOT_3H <= OUT_3G_K OR OUT_3I_D;
	OUT_DOT_4I <= OUT_5I_R OR OUT_4I_D;

	PS_SET_I_O_CH_SEL_REG <= OUT_4A_B;
	MS_I_O_PERCENT_LATCH <= OUT_2B_C;
	PS_I_O_PERCENT_LATCH <= OUT_1D_B;
	PS_PERCENT_OR_COML_AT <= OUT_1E_H;
	MS_I_O_COML_AT_LATCH <= OUT_2G_C;
	MS_PERCENT_OR_COML_AT <= OUT_1H_R;
	PS_I_O_COML_AT_LATCH <= OUT_1I_B;
	PS_I_O_PERCENT_OR_LOZENGE <= OUT_DOT_1B;
	MS_RESET_I_O_CH_SEL_REG <= OUT_DOT_5G;
	PS_COML_AT_OR_ASTERISK <= OUT_DOT_4I;

	Latch_3C: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3C_NoPin_Latch,
		Q => OUT_3C_NoPin,
		QBar => OPEN );

	Latch_2C: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2C_P_Latch,
		Q => OUT_2C_P,
		QBar => OPEN );

	Latch_3H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3H_NoPin_Latch,
		Q => OUT_3H_NoPin,
		QBar => OPEN );

	Latch_2H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2H_P_Latch,
		Q => OUT_2H_P,
		QBar => OPEN );


end;
