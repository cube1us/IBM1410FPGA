-- Test Bench VHDL for IBM SMS ALD page 45.50.02.1
-- Title: CONSOLE I-O PRINTER STROBE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/18/2020 4:48:24 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_50_02_1_CONSOLE_I_O_PRINTER_STROBE_tb is
end ALD_45_50_02_1_CONSOLE_I_O_PRINTER_STROBE_tb;

architecture behavioral of ALD_45_50_02_1_CONSOLE_I_O_PRINTER_STROBE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_50_02_1_CONSOLE_I_O_PRINTER_STROBE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MV_CONS_PRINTER_SPACE_NO:	 in STD_LOGIC;
		PS_CONS_CHECK_STROBE:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS_1:	 in STD_LOGIC;
		MV_CONS_PRINTER_C1_CAM_NO:	 in STD_LOGIC;
		PS_CONS_CHAR_CONTROL:	 in STD_LOGIC;
		PS_CONS_CYCLE_LATCH_SET:	 in STD_LOGIC;
		MS_CONSOLE_CHECK_STROBE_1:	 in STD_LOGIC;
		MS_CONS_BACK_SPACE_CONTROL:	 in STD_LOGIC;
		MS_WM_INPUT:	 in STD_LOGIC;
		MV_CONS_PRINTER_C1_CAM_NC:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		PS_CONS_PRINTER_STROBE:	 out STD_LOGIC;
		MV_CONS_PRINTER_SPACE_NO_JRJ:	 out STD_LOGIC;
		MS_CONS_WM_INPUT_RESET:	 out STD_LOGIC;
		MS_CONS_PRINTER_STROBE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MV_CONS_PRINTER_SPACE_NO: STD_LOGIC := '1';
	signal PS_CONS_CHECK_STROBE: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_3_POS_1: STD_LOGIC := '0';
	signal MV_CONS_PRINTER_C1_CAM_NO: STD_LOGIC := '1';
	signal PS_CONS_CHAR_CONTROL: STD_LOGIC := '0';
	signal PS_CONS_CYCLE_LATCH_SET: STD_LOGIC := '0';
	signal MS_CONSOLE_CHECK_STROBE_1: STD_LOGIC := '1';
	signal MS_CONS_BACK_SPACE_CONTROL: STD_LOGIC := '1';
	signal MS_WM_INPUT: STD_LOGIC := '1';
	signal MV_CONS_PRINTER_C1_CAM_NC: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';

	-- Outputs

	signal PS_CONS_PRINTER_STROBE: STD_LOGIC;
	signal MV_CONS_PRINTER_SPACE_NO_JRJ: STD_LOGIC;
	signal MS_CONS_WM_INPUT_RESET: STD_LOGIC;
	signal MS_CONS_PRINTER_STROBE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_50_02_1_CONSOLE_I_O_PRINTER_STROBE port map(
		FPGA_CLK => FPGA_CLK,
		MV_CONS_PRINTER_SPACE_NO => MV_CONS_PRINTER_SPACE_NO,
		PS_CONS_CHECK_STROBE => PS_CONS_CHECK_STROBE,
		PS_CONS_CLOCK_3_POS_1 => PS_CONS_CLOCK_3_POS_1,
		MV_CONS_PRINTER_C1_CAM_NO => MV_CONS_PRINTER_C1_CAM_NO,
		PS_CONS_CHAR_CONTROL => PS_CONS_CHAR_CONTROL,
		PS_CONS_CYCLE_LATCH_SET => PS_CONS_CYCLE_LATCH_SET,
		MS_CONSOLE_CHECK_STROBE_1 => MS_CONSOLE_CHECK_STROBE_1,
		MS_CONS_BACK_SPACE_CONTROL => MS_CONS_BACK_SPACE_CONTROL,
		MS_WM_INPUT => MS_WM_INPUT,
		MV_CONS_PRINTER_C1_CAM_NC => MV_CONS_PRINTER_C1_CAM_NC,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		PS_CONS_PRINTER_STROBE => PS_CONS_PRINTER_STROBE,
		MV_CONS_PRINTER_SPACE_NO_JRJ => MV_CONS_PRINTER_SPACE_NO_JRJ,
		MS_CONS_WM_INPUT_RESET => MS_CONS_WM_INPUT_RESET,
		MS_CONS_PRINTER_STROBE => MS_CONS_PRINTER_STROBE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "45.50.02.1        ";

   for tt in 0 to 2**10 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := not d;
      
      wait for 30 ns;
      
      -- Reset the Print Strobe Reset latch and Printer Strobe Trigger
      -- (Note that at this point the Console Strobe Gate Latch is in an undefined state)
      
      MS_PROGRAM_RESET_4 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_PRINTER_STROBE,'0',testName,"Init +S Console Printer Strobe");
      check1(MS_CONS_PRINTER_STROBE,'1',testName,"Init -S Console Printer Strobe");      
      
      -- Maybe set the Console Strobe Gate Latch
      
		MV_CONS_PRINTER_SPACE_NO <= not a;
      PS_CONS_CHECK_STROBE <= b;
      MV_CONS_PRINTER_C1_CAM_NO <= not d;
      PS_CONS_CHAR_CONTROL <= e;
      PS_CONS_CYCLE_LATCH_SET <= f;
      MS_CONSOLE_CHECK_STROBE_1 <= not g;
      MS_CONS_BACK_SPACE_CONTROL <= not h;
      MS_WM_INPUT <= not j;
      MV_CONS_PRINTER_C1_CAM_NC <= not k;
      wait for 30 ns;
      
      check1(MV_CONS_PRINTER_SPACE_NO,not a,testName,"Cons Printer Space NO");
      check1(MS_CONS_WM_INPUT_RESET,not(e and f and not h and not j),testName,"Cons WM Input Reset"); 
      
      check1(PS_CONS_PRINTER_STROBE,'0',testName,"+S Console Printer Strobe Step 1");
      check1(MS_CONS_PRINTER_STROBE,not PS_CONS_PRINTER_STROBE,testName,
         "-S Console Printer Strobe Step 1");      

      -- Run CC1 - nothing should really change
      
      PS_CONS_CLOCK_1_POS <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_1_POS <= '0';
      wait for 30 ns;

      check1(PS_CONS_PRINTER_STROBE,'0',testName,"+S Console Printer Strobe Step CC1");
      check1(MS_CONS_PRINTER_STROBE,not PS_CONS_PRINTER_STROBE,testName,
         "-S Console Printer Strobe Step CC1");
         
      -- Run CC3.  This MIGHT set the Console Strobe Gate
      -- (No CC2 in this test)      
      
      g1 := (d or (a and b)) and ((b and e) or a);
      
      PS_CONS_CLOCK_3_POS_1 <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_3_POS_1 <= '0';
      wait for 30 ns;

      -- Then run CC1 again, which will set Console Printer Strobe IF the
      -- Console Strobe Gate latch is set      
      
      PS_CONS_CLOCK_1_POS <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_1_POS <= '0';
      wait for 30 ns;

      check1(PS_CONS_PRINTER_STROBE,g1,testName,"+S Console Printer Strobe Step CC3-CC1");
      check1(MS_CONS_PRINTER_STROBE,not PS_CONS_PRINTER_STROBE,testName,
         "-S Console Printer Strobe Step CC3-CC1");
      
      -- If the console printer strobe is not set, move to the next iteration.
                  
      if(g1 = '0') then
         next;
      end if;      

      -- If it was set, we need to proceed through reset, so run CC3 again
      -- This should reset the Console Strobe Gate Latch, but not change the
      -- Console Printer Strobe Latch.  We have to turn on Console Check Strobe
      -- so that the Print Strobe Reset latch isn't held reset.
      
      PS_CONS_CLOCK_3_POS_1 <= '1';
      MS_CONSOLE_CHECK_STROBE_1 <= '0';
      wait for 30 ns;
      PS_CONS_CLOCK_3_POS_1 <= '0';
      wait for 30 ns;

      check1(PS_CONS_PRINTER_STROBE,g1,testName,"+S Console Printer Strobe Step CC3-CC1-CC3");
      check1(MS_CONS_PRINTER_STROBE,not PS_CONS_PRINTER_STROBE,testName,
         "-S Console Printer Strobe Step CC3-CC1-CC3");
      
      -- Now, run CC1 and the console printer strobe should reset

      PS_CONS_CLOCK_1_POS <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_1_POS <= '0';
      wait for 30 ns;

      check1(PS_CONS_PRINTER_STROBE,'0',testName,"+S Console Printer Strobe Step RESET");
      check1(MS_CONS_PRINTER_STROBE,not PS_CONS_PRINTER_STROBE,testName,
         "-S Console Printer Strobe Step RESET");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

end;
