-- Test Bench VHDL for IBM SMS ALD page 45.20.03.1
-- Title: CONS CYCLE CTRL MATRIX Y3+Y4-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/28/2020 1:43:57 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_20_03_1_CONS_CYCLE_CTRL_MATRIX_Y3_Y4_ACC_tb is
end ALD_45_20_03_1_CONS_CYCLE_CTRL_MATRIX_Y3_Y4_ACC_tb;

architecture behavioral of ALD_45_20_03_1_CONS_CYCLE_CTRL_MATRIX_Y3_Y4_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_20_03_1_CONS_CYCLE_CTRL_MATRIX_Y3_Y4_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_CONS_MX_X6_POS:	 in STD_LOGIC;
		MS_DISPLAY_ROUTINE:	 in STD_LOGIC;
		MS_ALTER_ROUTINE:	 in STD_LOGIC;
		MS_END_STOP_DATA:	 in STD_LOGIC;
		PS_CONS_MX_X6_POS:	 in STD_LOGIC;
		PS_CONS_MX_ADDR_DRIVE:	 in STD_LOGIC;
		PS_CONS_MX_Y_DRIVE_1:	 in STD_LOGIC;
		MS_CONS_MX_Y_DC_RESET:	 in STD_LOGIC;
		MS_CONSOLE_READ_OP:	 in STD_LOGIC;
		MS_CONSOLE_WRITE_OP:	 in STD_LOGIC;
		PS_RESET_CONS_MX_Y2_POS:	 in STD_LOGIC;
		PS_CONS_MX_Y2_POS:	 in STD_LOGIC;
		PS_ADDRESS_SET_ROUTINE:	 in STD_LOGIC;
		MS_CONS_MX_Y4_POS:	 out STD_LOGIC;
		PS_CONS_MX_Y4_POS:	 out STD_LOGIC;
		MS_CONSOLE_OP_COMPLETE:	 out STD_LOGIC;
		PS_SET_CONS_MX_Y3_POS:	 out STD_LOGIC;
		MS_CONS_MX_Y3_POS:	 out STD_LOGIC;
		PS_CONS_MX_Y3_POS:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_CONS_MX_X6_POS: STD_LOGIC := '1';
	signal MS_DISPLAY_ROUTINE: STD_LOGIC := '1';
	signal MS_ALTER_ROUTINE: STD_LOGIC := '1';
	signal MS_END_STOP_DATA: STD_LOGIC := '1';
	signal PS_CONS_MX_X6_POS: STD_LOGIC := '0';
	signal PS_CONS_MX_ADDR_DRIVE: STD_LOGIC := '0';
	signal PS_CONS_MX_Y_DRIVE_1: STD_LOGIC := '0';
	signal MS_CONS_MX_Y_DC_RESET: STD_LOGIC := '1';
	signal MS_CONSOLE_READ_OP: STD_LOGIC := '1';
	signal MS_CONSOLE_WRITE_OP: STD_LOGIC := '1';
	signal PS_RESET_CONS_MX_Y2_POS: STD_LOGIC := '0';
	signal PS_CONS_MX_Y2_POS: STD_LOGIC := '0';
	signal PS_ADDRESS_SET_ROUTINE: STD_LOGIC := '0';

	-- Outputs

	signal MS_CONS_MX_Y4_POS: STD_LOGIC;
	signal PS_CONS_MX_Y4_POS: STD_LOGIC;
	signal MS_CONSOLE_OP_COMPLETE: STD_LOGIC;
	signal PS_SET_CONS_MX_Y3_POS: STD_LOGIC;
	signal MS_CONS_MX_Y3_POS: STD_LOGIC;
	signal PS_CONS_MX_Y3_POS: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_20_03_1_CONS_CYCLE_CTRL_MATRIX_Y3_Y4_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_CONS_MX_X6_POS => MS_CONS_MX_X6_POS,
		MS_DISPLAY_ROUTINE => MS_DISPLAY_ROUTINE,
		MS_ALTER_ROUTINE => MS_ALTER_ROUTINE,
		MS_END_STOP_DATA => MS_END_STOP_DATA,
		PS_CONS_MX_X6_POS => PS_CONS_MX_X6_POS,
		PS_CONS_MX_ADDR_DRIVE => PS_CONS_MX_ADDR_DRIVE,
		PS_CONS_MX_Y_DRIVE_1 => PS_CONS_MX_Y_DRIVE_1,
		MS_CONS_MX_Y_DC_RESET => MS_CONS_MX_Y_DC_RESET,
		MS_CONSOLE_READ_OP => MS_CONSOLE_READ_OP,
		MS_CONSOLE_WRITE_OP => MS_CONSOLE_WRITE_OP,
		PS_RESET_CONS_MX_Y2_POS => PS_RESET_CONS_MX_Y2_POS,
		PS_CONS_MX_Y2_POS => PS_CONS_MX_Y2_POS,
		PS_ADDRESS_SET_ROUTINE => PS_ADDRESS_SET_ROUTINE,
		MS_CONS_MX_Y4_POS => MS_CONS_MX_Y4_POS,
		PS_CONS_MX_Y4_POS => PS_CONS_MX_Y4_POS,
		MS_CONSOLE_OP_COMPLETE => MS_CONSOLE_OP_COMPLETE,
		PS_SET_CONS_MX_Y3_POS => PS_SET_CONS_MX_Y3_POS,
		MS_CONS_MX_Y3_POS => MS_CONS_MX_Y3_POS,
		PS_CONS_MX_Y3_POS => PS_CONS_MX_Y3_POS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable y3gateon1, y3gateon2, y3gateoff1, y3gateoff2, y3set, y4set: std_logic;

   begin

   -- Your test bench code

   testName := "45.20.03.1        ";

   for tt in 0 to 2**11 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      j := tv(6);
      k := tv(7);
      l := tv(8);
      m := tv(9);
      n := tv(10);

      y3gateon1 := (not a and m) or (not c and not j and not k and e and m);
      y3gateon2 := l;
      y3gateoff1 := n;  -- Y3 itself is implied
      y3gateoff2 := a or (not b and not c and e); -- Y3 itself is implied
      y3set := (y3gateon1 and not f) or (y3gateon2 and f);
      y4set := (not a or (not b and not c and e) or d) and not f;  -- assumes y3 is set...
           
      -- Reset

      MS_CONS_MX_Y_DC_RESET <= '0';
      wait for 30 ns;
      MS_CONS_MX_Y_DC_RESET <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_MX_Y3_POS,'0',testname,"Init +S Y3");      
      check1(MS_CONS_MX_Y3_POS,'1',testname,"Init -S Y3");
      check1(PS_CONS_MX_Y4_POS,'0',testname,"Init +S Y4");      
      check1(MS_CONS_MX_Y4_POS,'1',testname,"Init -S Y4");

      -- Now maybe set the trigger.  First, the setup.
      -- Since all of the GateOff inputs are qualified by the trigger itself,
      -- we can use all of the non AC variables.
      -- Also, since y3 is not set, Y4 will not set at this point either.
      
		MS_CONS_MX_X6_POS <= not a;
      MS_DISPLAY_ROUTINE <= not b;
      MS_ALTER_ROUTINE <= not c;
      MS_END_STOP_DATA <= '1';  -- Don't set yet, as it can set Y4
      PS_CONS_MX_X6_POS <= e;
      MS_CONSOLE_READ_OP <= not j;
      MS_CONSOLE_WRITE_OP <= not k;
      PS_RESET_CONS_MX_Y2_POS <= l;
      PS_CONS_MX_Y2_POS <= m;
      PS_ADDRESS_SET_ROUTINE <= n;            
      wait for 30 ns;
      
      -- Run one of the clocks
      
      PS_CONS_MX_ADDR_DRIVE <= f;
      PS_CONS_MX_Y_DRIVE_1 <= not f;
      wait for 90 ns;
      PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;
      
      check1(PS_CONS_MX_Y3_POS,y3set,testName,"+S Y3 Set");
      check1(MS_CONS_MX_Y3_POS,not PS_CONS_MX_Y3_POS,testName,"-S Y3 Set");
      check1(PS_SET_CONS_MX_Y3_POS,y3gateon1,testname,"Set Cons MX Y3");

      check1(PS_CONS_MX_Y4_POS,'0',testname,"Y3 Set - +S Y4");      
      check1(MS_CONS_MX_Y4_POS,'1',testname,"Y3 Set - -S Y4");
      
      if(y3set = '0') then
         next;
      end if;
      
      -- Set up for a possible reset by removing the gate on signals
      -- At this point Y4 may ALSO set
      
      PS_CONS_MX_Y2_POS <= '0';
      PS_RESET_CONS_MX_Y2_POS <= '0';
      MS_END_STOP_DATA <= not d;  -- Set this now.  It may reset Y3 and set Y4       
      wait for 30 ns;
      
      -- Again, run one of the clocks (note that coming into this point Y3 is set)
      
      PS_CONS_MX_ADDR_DRIVE <= f;
      PS_CONS_MX_Y_DRIVE_1 <= not f;
      wait for 90 ns;
      PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;
      
      check1(PS_CONS_MX_Y3_POS,not(n and f) and not(y4set),testName,"Reset +S Y3 Pos");
      check1(MS_CONS_MX_Y3_POS,not PS_CONS_MX_Y3_POS,testName,"Reset -S Y3 Pos");         

      -- Check the possible y4 set
      
      check1(PS_CONS_MX_Y4_POS,y4set or (n and f),testName,"+S Y4 Set");
      check1(MS_CONS_MX_Y4_POS,not PS_CONS_MX_Y4_POS,testName,"-S Y4 Set");
      
      check1(MS_CONSOLE_OP_COMPLETE,not(PS_CONS_MX_Y4_POS and PS_CONS_MX_X6_POS),
         testName,"Console Op Complete");
      
      -- With the next clock of EITHER sort, Y4 should reset
      -- Just need to make sure it isn't forced set.
      
      PS_CONS_MX_ADDR_DRIVE <= f;
      PS_CONS_MX_Y_DRIVE_1 <= not f;
      MS_END_STOP_DATA <= '1';       
      wait for 90 ns;
      PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_Y4_POS,'0',testname,"+S Y4 Reset");      
      check1(MS_CONS_MX_Y4_POS,'1',testname,"-S Y4 Reset");
                              
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
