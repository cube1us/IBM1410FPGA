-- Test BenchVHDL for IBM SMS ALD group BChannelDrive
-- Title: BChannelDrive
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/8/2020 5:32:29 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity BChannelDrive_tb is
end BChannelDrive_tb;

architecture behavioral of BChannelDrive_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component BChannelDrive
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MB_ASSEMBLY_CH_NOT_ZONE_C_BIT: in STD_LOGIC;
		PS_CHAR_SEL_ERROR_CHK_1: in STD_LOGIC;
		PS_CHAR_SEL_ERROR_CHK_2: in STD_LOGIC;
		PS_ERROR_SAMPLE: in STD_LOGIC;
		PS_B_DATA_REG_STAR_0_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_1_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_2_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_3_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_CH_WM_BIT_2: out STD_LOGIC;
		PS_B_CH_WM_BIT_1: out STD_LOGIC;
		MS_B_CHAR_SEL_ERROR: out STD_LOGIC;
		LAMP_15A1K20: out STD_LOGIC;
		PS_B_CH_NOT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PS_B_CH_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PB_B_CH_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		PB_B_CH_NOT_BUS: out STD_LOGIC_VECTOR (6 downTo 0);
		LAMPS_B_CH: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MB_ASSEMBLY_CH_NOT_ZONE_C_BIT: STD_LOGIC := '1';
	signal PS_CHAR_SEL_ERROR_CHK_1: STD_LOGIC := '0';
	signal PS_CHAR_SEL_ERROR_CHK_2: STD_LOGIC := '0';
	signal PS_ERROR_SAMPLE: STD_LOGIC := '0';
	signal PS_B_DATA_REG_STAR_0_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_1_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_2_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_3_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal PS_B_CH_WM_BIT_2: STD_LOGIC;
	signal PS_B_CH_WM_BIT_1: STD_LOGIC;
	signal MS_B_CHAR_SEL_ERROR: STD_LOGIC;
	signal LAMP_15A1K20: STD_LOGIC;
	signal PS_B_CH_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PS_B_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PB_B_CH_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal PB_B_CH_NOT_BUS: STD_LOGIC_VECTOR (6 downTo 0);
	signal LAMPS_B_CH: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: BChannelDrive port map(
		FPGA_CLK => FPGA_CLK,
		MB_ASSEMBLY_CH_NOT_ZONE_C_BIT => MB_ASSEMBLY_CH_NOT_ZONE_C_BIT,
		PS_CHAR_SEL_ERROR_CHK_1 => PS_CHAR_SEL_ERROR_CHK_1,
		PS_CHAR_SEL_ERROR_CHK_2 => PS_CHAR_SEL_ERROR_CHK_2,
		PS_ERROR_SAMPLE => PS_ERROR_SAMPLE,
		PS_B_DATA_REG_STAR_0_STAR_BUS => PS_B_DATA_REG_STAR_0_STAR_BUS,
		PS_B_DATA_REG_STAR_1_STAR_BUS => PS_B_DATA_REG_STAR_1_STAR_BUS,
		PS_B_DATA_REG_STAR_2_STAR_BUS => PS_B_DATA_REG_STAR_2_STAR_BUS,
		PS_B_DATA_REG_STAR_3_STAR_BUS => PS_B_DATA_REG_STAR_3_STAR_BUS,
		PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS => PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS,
		PS_B_CH_WM_BIT_2 => PS_B_CH_WM_BIT_2,
		PS_B_CH_WM_BIT_1 => PS_B_CH_WM_BIT_1,
		MS_B_CHAR_SEL_ERROR => MS_B_CHAR_SEL_ERROR,
		LAMP_15A1K20 => LAMP_15A1K20,
		PS_B_CH_NOT_BUS => PS_B_CH_NOT_BUS,
		PS_B_CH_BUS => PS_B_CH_BUS,
		PB_B_CH_BUS => PB_B_CH_BUS,
		PB_B_CH_NOT_BUS => PB_B_CH_NOT_BUS,
		LAMPS_B_CH => LAMPS_B_CH);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(15 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p: std_logic;
   variable g1, g2, g3, g4, g5, g6: std_logic;

   begin

   -- Your test bench code
   
   testName := "15.30.xx.1        ";
   
   for insignal in 1 to 5 loop
      
      -- Set up 
      PS_B_DATA_REG_STAR_0_STAR_BUS <= "00000000";
      PS_B_DATA_REG_STAR_1_STAR_BUS <= "00000000";
      PS_B_DATA_REG_STAR_2_STAR_BUS <= "00000000";
      PS_B_DATA_REG_STAR_3_STAR_BUS <= "00000000";
      PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS  <= "00000000";
      wait for 10 ns;                        
   
      for b in 0 to 255 loop
         tv := std_logic_vector(to_unsigned(b,tv'Length));
         case insignal is
            when 1 => PS_B_DATA_REG_STAR_0_STAR_BUS <= tv(7 downto 0);
            when 2 => PS_B_DATA_REG_STAR_1_STAR_BUS <= tv(7 downto 0);
            when 3 => PS_B_DATA_REG_STAR_2_STAR_BUS <= tv(7 downto 0);
            when 4 => PS_B_DATA_REG_STAR_3_STAR_BUS <= tv(7 downto 0);
            when 5 => PS_B_DATA_REG_STAR_FROM_M2_STAR_BUS  <= tv(7 downto 0);                        
         end case;
         wait for 30 ns;
         for i in 0 to 7 loop
            check1(PS_B_CH_NOT_BUS(i),not tv(i),testName,"+S B CH NOT BUS " & INTEGER'IMAGE(i));
            check1(PB_B_CH_BUS(i),tv(i),testName,"+B B CH BUS " & INTEGER'IMAGE(i));
            check1(LAMPS_B_CH(i),tv(i),testName,"LAMPS B CH BUS " & INTEGER'IMAGE(i));
            
            -- +B B CH NOT Bus has no C bit
            
            if(i /= 7) then
               check1(PB_B_CH_NOT_BUS(i),not tv(i),testName,"+B B CH NOT BUS " & INTEGER'IMAGE(i));
            end if;
            
            -- +S B CH WM BIT has no bus bit.  Instead, it generates TWO signals, ...1 and ...1
            
            if(i /= 6) then
               check1(PS_B_CH_BUS(i),tv(i),testName,"+S B CH BUS " & INTEGER'IMAGE(i));
            else
               check1(PS_B_CH_WM_BIT_1,tv(6),testName,"+S B CH WM BIT 1");
               check1(PS_B_CH_WM_BIT_2,tv(6),testName,"+S B CH WM BIT 2");
            end if;
         end loop;         
      end loop;
   end loop;
   
   testName := "15.30.10.1        ";
   
   for i in 0 to 7 loop
      tv := std_logic_vector(to_unsigned(i,tv'length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      
      PS_CHAR_SEL_ERROR_CHK_1 <= a;
      PS_CHAR_SEL_ERROR_CHK_2 <= b;
      PS_ERROR_SAMPLE <= c;
      wait for 30 ns;
      check1(MS_B_CHAR_SEL_ERROR,NOT(c and ((a and b) or (not a and not b))),testName,"B CHAR Sel Error");
      check1(LAMP_15A1K20,c and ((a and b) or (not a and not b)),testName,"B CHAR Sel Error");      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

END;
