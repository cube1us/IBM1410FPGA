-- Test Bench VHDL for IBM SMS ALD page 18.12.02.1
-- Title: CHAN B ZONES VALIDITY CHECK-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/11/2020 3:58:20 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_18_12_02_1_CHAN_B_ZONES_VALIDITY_CHECK_ACC_tb is
end ALD_18_12_02_1_CHAN_B_ZONES_VALIDITY_CHECK_ACC_tb;

architecture behavioral of ALD_18_12_02_1_CHAN_B_ZONES_VALIDITY_CHECK_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_18_12_02_1_CHAN_B_ZONES_VALIDITY_CHECK_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_B_CH_A_BIT:	 in STD_LOGIC;
		MV_3RD_CHECK_TEST_SWITCH:	 in STD_LOGIC;
		PS_B_CH_NOT_A_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_B_BIT:	 in STD_LOGIC;
		PS_B_CH_B_BIT:	 in STD_LOGIC;
		PS_B_CH_C_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_C_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_B_CH_WM_BIT_1:	 in STD_LOGIC;
		PS_B_CH_NOT_B_AND_NOT_A_BIT:	 out STD_LOGIC;
		PS_B_CH_VC_ZONE_C_BIT:	 out STD_LOGIC;
		PS_B_CH_B_AND_A_BIT:	 out STD_LOGIC;
		PS_B_CH_B_AND_NOT_A_BIT:	 out STD_LOGIC;
		PS_B_CH_VC_NU_C_BIT:	 out STD_LOGIC;
		PS_B_CH_VC_NOT_ZONE_C_BIT:	 out STD_LOGIC;
		PS_B_CH_NOT_B_AND_A_BIT:	 out STD_LOGIC;
		PS_B_CH_VC_NOT_NU_C_BIT:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_B_CH_A_BIT: STD_LOGIC := '0';
	signal MV_3RD_CHECK_TEST_SWITCH: STD_LOGIC := '1';
	signal PS_B_CH_NOT_A_BIT: STD_LOGIC := '0';
	signal PS_B_CH_NOT_B_BIT: STD_LOGIC := '0';
	signal PS_B_CH_B_BIT: STD_LOGIC := '0';
	signal PS_B_CH_C_BIT: STD_LOGIC := '0';
	signal PS_B_CH_NOT_C_BIT: STD_LOGIC := '0';
	signal PS_B_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_B_CH_WM_BIT_1: STD_LOGIC := '0';

	-- Outputs

	signal PS_B_CH_NOT_B_AND_NOT_A_BIT: STD_LOGIC;
	signal PS_B_CH_VC_ZONE_C_BIT: STD_LOGIC;
	signal PS_B_CH_B_AND_A_BIT: STD_LOGIC;
	signal PS_B_CH_B_AND_NOT_A_BIT: STD_LOGIC;
	signal PS_B_CH_VC_NU_C_BIT: STD_LOGIC;
	signal PS_B_CH_VC_NOT_ZONE_C_BIT: STD_LOGIC;
	signal PS_B_CH_NOT_B_AND_A_BIT: STD_LOGIC;
	signal PS_B_CH_VC_NOT_NU_C_BIT: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_18_12_02_1_CHAN_B_ZONES_VALIDITY_CHECK_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_B_CH_A_BIT => PS_B_CH_A_BIT,
		MV_3RD_CHECK_TEST_SWITCH => MV_3RD_CHECK_TEST_SWITCH,
		PS_B_CH_NOT_A_BIT => PS_B_CH_NOT_A_BIT,
		PS_B_CH_NOT_B_BIT => PS_B_CH_NOT_B_BIT,
		PS_B_CH_B_BIT => PS_B_CH_B_BIT,
		PS_B_CH_C_BIT => PS_B_CH_C_BIT,
		PS_B_CH_NOT_C_BIT => PS_B_CH_NOT_C_BIT,
		PS_B_CH_NOT_WM_BIT => PS_B_CH_NOT_WM_BIT,
		PS_B_CH_WM_BIT_1 => PS_B_CH_WM_BIT_1,
		PS_B_CH_NOT_B_AND_NOT_A_BIT => PS_B_CH_NOT_B_AND_NOT_A_BIT,
		PS_B_CH_VC_ZONE_C_BIT => PS_B_CH_VC_ZONE_C_BIT,
		PS_B_CH_B_AND_A_BIT => PS_B_CH_B_AND_A_BIT,
		PS_B_CH_B_AND_NOT_A_BIT => PS_B_CH_B_AND_NOT_A_BIT,
		PS_B_CH_VC_NU_C_BIT => PS_B_CH_VC_NU_C_BIT,
		PS_B_CH_VC_NOT_ZONE_C_BIT => PS_B_CH_VC_NOT_ZONE_C_BIT,
		PS_B_CH_NOT_B_AND_A_BIT => PS_B_CH_NOT_B_AND_A_BIT,
		PS_B_CH_VC_NOT_NU_C_BIT => PS_B_CH_VC_NOT_NU_C_BIT);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "18.12.02.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      
      g1 := (a nor e) nor (c nor d);
      g2 := (d nor a) nor (c nor e);
      g3 := (f and j) nor (g and h);
      g4 := (f and h) nor (j and g);

		PS_B_CH_A_BIT <= a;
		MV_3RD_CHECK_TEST_SWITCH <= not b;
		PS_B_CH_NOT_A_BIT <= c;
		PS_B_CH_NOT_B_BIT <= d;
		PS_B_CH_B_BIT <= e;
		PS_B_CH_C_BIT <= f;
		PS_B_CH_NOT_C_BIT <= g;
		PS_B_CH_NOT_WM_BIT <= h;
		PS_B_CH_WM_BIT_1 <= j;
      
      wait for 30 ns;
      
      check1(PS_B_CH_NOT_B_AND_NOT_A_BIT,not e and not a,testName,"B Ch Not B and Not A");
      check1(PS_B_CH_B_AND_A_BIT,not c and not d,testName,"B Ch B and A");
      check1(PS_B_CH_B_AND_NOT_A_BIT,not d and not a,testName,"B Ch B and Not A");
      check1(PS_B_CH_NOT_B_AND_A_BIT,not e and not c,testName,"B Ch Not B and A");
      
      check1(PS_B_CH_VC_ZONE_C_BIT,g2,testName,"B Ch VC Zone C");
      check1(PS_B_CH_VC_NOT_ZONE_C_BIT,g1,testName,"B Ch VC Not Zone C");
      check1(PS_B_CH_VC_NU_C_BIT,((g2 and g4) nor (g1 and g3)) or b,testName,
         "B Ch VC Nu C");
      check1(PS_B_CH_VC_NOT_NU_C_BIT,((g2 and g3) nor (g4 and g1)) or b,testName,
         "B Ch VC Not NU C");
      
                  
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
