-- Test BenchVHDL for IBM SMS ALD group MEMAr
-- Title: MEMAr
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 8/22/2020 3:48:56 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity MEMAr_tb is
end MEMAr_tb;

architecture behavioral of MEMAr_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component MEMAr
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MY_LOGIC_GATE_B_OR_S: in STD_LOGIC;
		PS_SET_MEM_AR_TO_I_AR: in STD_LOGIC;
		PS_SET_MEM_AR_1_GATED: in STD_LOGIC;
		PS_ADDR_SCNR_2_POS: in STD_LOGIC;
		PS_SET_MEM_AR_2_GATED: in STD_LOGIC;
		MY_LOGIC_GATE_C_OR_T: in STD_LOGIC;
		PS_ADDR_SCNR_3_POS: in STD_LOGIC;
		MY_LOGIC_GATE_D_OR_U: in STD_LOGIC;
		PS_ADDR_SCNR_4_POS: in STD_LOGIC;
		MY_LOGIC_GATE_E_OR_V: in STD_LOGIC;
		PS_ADDR_SCNR_5_POS: in STD_LOGIC;
		MY_LOGIC_GATE_F_OR_W: in STD_LOGIC;
		PS_ADDR_SCNR_6_POS: in STD_LOGIC;
		PS_AR_BUS_UP_BUS: in STD_LOGIC_VECTOR (4 downTo 0);
		PS_AR_BUS_TP_BUS: in STD_LOGIC_VECTOR (4 downTo 0);
		PS_AR_BUS_HP_BUS: in STD_LOGIC_VECTOR (4 downTo 0);
		PS_AR_BUS_THP_BUS: in STD_LOGIC_VECTOR (4 downTo 0);
		PS_AR_BUS_TTHP_BUS: in STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_TTPH4B: out STD_LOGIC;
		MS_MEM_AR_TO_I_AR_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_AR_BUS_GTD_OUT_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PY_MEM_AR_UP_TO_ADDR_MOD_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_UP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_MEM_AR_TO_I_AR_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_AR_BUS_GTD_OUT_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PY_MEM_AR_TP_TO_ADDR_MOD_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_TP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_MEM_AR_TO_I_AR_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_AR_BUS_GTD_OUT_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PY_MEM_AR_HP_TO_ADDR_MOD_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_HP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_MEM_AR_TO_I_AR_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_AR_BUS_GTD_OUT_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_NOT_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PY_MEM_AR_THP_TO_ADDR_MOD_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_THP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_MEM_AR_TO_I_AR_TTHP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MS_AR_BUS_GTD_OUT_TTHP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		PY_MEM_AR_TTHP_TO_ADDR_MOD_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		MY_MEM_AR_TTHP_BUS: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_UP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_TP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_HP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_THP: out STD_LOGIC_VECTOR (4 downTo 0);
		LAMPS_MAR_TTHP: out STD_LOGIC_VECTOR (4 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MY_LOGIC_GATE_B_OR_S: STD_LOGIC := '1';
	signal PS_SET_MEM_AR_TO_I_AR: STD_LOGIC := '0';
	signal PS_SET_MEM_AR_1_GATED: STD_LOGIC := '0';
	signal PS_ADDR_SCNR_2_POS: STD_LOGIC := '0';
	signal PS_SET_MEM_AR_2_GATED: STD_LOGIC := '0';
	signal MY_LOGIC_GATE_C_OR_T: STD_LOGIC := '1';
	signal PS_ADDR_SCNR_3_POS: STD_LOGIC := '0';
	signal MY_LOGIC_GATE_D_OR_U: STD_LOGIC := '1';
	signal PS_ADDR_SCNR_4_POS: STD_LOGIC := '0';
	signal MY_LOGIC_GATE_E_OR_V: STD_LOGIC := '1';
	signal PS_ADDR_SCNR_5_POS: STD_LOGIC := '0';
	signal MY_LOGIC_GATE_F_OR_W: STD_LOGIC := '1';
	signal PS_ADDR_SCNR_6_POS: STD_LOGIC := '0';
	signal PS_AR_BUS_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0) := "00000";
	signal PS_AR_BUS_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0) := "00000";
	signal PS_AR_BUS_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0) := "00000";
	signal PS_AR_BUS_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0) := "00000";
	signal PS_AR_BUS_TTHP_BUS: STD_LOGIC_VECTOR (4 downTo 0) := "00000";

	-- Outputs

	signal MY_MEM_AR_NOT_TTPH4B: STD_LOGIC;
	signal MS_MEM_AR_TO_I_AR_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_AR_BUS_GTD_OUT_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PY_MEM_AR_UP_TO_ADDR_MOD_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_UP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_MEM_AR_TO_I_AR_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_AR_BUS_GTD_OUT_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PY_MEM_AR_TP_TO_ADDR_MOD_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_TP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_MEM_AR_TO_I_AR_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_AR_BUS_GTD_OUT_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PY_MEM_AR_HP_TO_ADDR_MOD_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_HP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_MEM_AR_TO_I_AR_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_AR_BUS_GTD_OUT_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_NOT_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PY_MEM_AR_THP_TO_ADDR_MOD_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_THP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_MEM_AR_TO_I_AR_TTHP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MS_AR_BUS_GTD_OUT_TTHP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal PY_MEM_AR_TTHP_TO_ADDR_MOD_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal MY_MEM_AR_TTHP_BUS: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_UP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_TP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_HP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_THP: STD_LOGIC_VECTOR (4 downTo 0);
	signal LAMPS_MAR_TTHP: STD_LOGIC_VECTOR (4 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: MEMAr port map(
		FPGA_CLK => FPGA_CLK,
		MY_LOGIC_GATE_B_OR_S => MY_LOGIC_GATE_B_OR_S,
		PS_SET_MEM_AR_TO_I_AR => PS_SET_MEM_AR_TO_I_AR,
		PS_SET_MEM_AR_1_GATED => PS_SET_MEM_AR_1_GATED,
		PS_ADDR_SCNR_2_POS => PS_ADDR_SCNR_2_POS,
		PS_SET_MEM_AR_2_GATED => PS_SET_MEM_AR_2_GATED,
		MY_LOGIC_GATE_C_OR_T => MY_LOGIC_GATE_C_OR_T,
		PS_ADDR_SCNR_3_POS => PS_ADDR_SCNR_3_POS,
		MY_LOGIC_GATE_D_OR_U => MY_LOGIC_GATE_D_OR_U,
		PS_ADDR_SCNR_4_POS => PS_ADDR_SCNR_4_POS,
		MY_LOGIC_GATE_E_OR_V => MY_LOGIC_GATE_E_OR_V,
		PS_ADDR_SCNR_5_POS => PS_ADDR_SCNR_5_POS,
		MY_LOGIC_GATE_F_OR_W => MY_LOGIC_GATE_F_OR_W,
		PS_ADDR_SCNR_6_POS => PS_ADDR_SCNR_6_POS,
		PS_AR_BUS_UP_BUS => PS_AR_BUS_UP_BUS,
		PS_AR_BUS_TP_BUS => PS_AR_BUS_TP_BUS,
		PS_AR_BUS_HP_BUS => PS_AR_BUS_HP_BUS,
		PS_AR_BUS_THP_BUS => PS_AR_BUS_THP_BUS,
		PS_AR_BUS_TTHP_BUS => PS_AR_BUS_TTHP_BUS,
		MY_MEM_AR_NOT_TTPH4B => MY_MEM_AR_NOT_TTPH4B,
		MS_MEM_AR_TO_I_AR_UP_BUS => MS_MEM_AR_TO_I_AR_UP_BUS,
		MS_AR_BUS_GTD_OUT_UP_BUS => MS_AR_BUS_GTD_OUT_UP_BUS,
		MY_MEM_AR_NOT_UP_BUS => MY_MEM_AR_NOT_UP_BUS,
		PY_MEM_AR_UP_TO_ADDR_MOD_BUS => PY_MEM_AR_UP_TO_ADDR_MOD_BUS,
		MY_MEM_AR_UP_BUS => MY_MEM_AR_UP_BUS,
		MS_MEM_AR_TO_I_AR_TP_BUS => MS_MEM_AR_TO_I_AR_TP_BUS,
		MS_AR_BUS_GTD_OUT_TP_BUS => MS_AR_BUS_GTD_OUT_TP_BUS,
		MY_MEM_AR_NOT_TP_BUS => MY_MEM_AR_NOT_TP_BUS,
		PY_MEM_AR_TP_TO_ADDR_MOD_BUS => PY_MEM_AR_TP_TO_ADDR_MOD_BUS,
		MY_MEM_AR_TP_BUS => MY_MEM_AR_TP_BUS,
		MS_MEM_AR_TO_I_AR_HP_BUS => MS_MEM_AR_TO_I_AR_HP_BUS,
		MS_AR_BUS_GTD_OUT_HP_BUS => MS_AR_BUS_GTD_OUT_HP_BUS,
		MY_MEM_AR_NOT_HP_BUS => MY_MEM_AR_NOT_HP_BUS,
		PY_MEM_AR_HP_TO_ADDR_MOD_BUS => PY_MEM_AR_HP_TO_ADDR_MOD_BUS,
		MY_MEM_AR_HP_BUS => MY_MEM_AR_HP_BUS,
		MS_MEM_AR_TO_I_AR_THP_BUS => MS_MEM_AR_TO_I_AR_THP_BUS,
		MS_AR_BUS_GTD_OUT_THP_BUS => MS_AR_BUS_GTD_OUT_THP_BUS,
		MY_MEM_AR_NOT_THP_BUS => MY_MEM_AR_NOT_THP_BUS,
		PY_MEM_AR_THP_TO_ADDR_MOD_BUS => PY_MEM_AR_THP_TO_ADDR_MOD_BUS,
		MY_MEM_AR_THP_BUS => MY_MEM_AR_THP_BUS,
		MS_MEM_AR_TO_I_AR_TTHP_BUS => MS_MEM_AR_TO_I_AR_TTHP_BUS,
		MS_AR_BUS_GTD_OUT_TTHP_BUS => MS_AR_BUS_GTD_OUT_TTHP_BUS,
		PY_MEM_AR_TTHP_TO_ADDR_MOD_BUS => PY_MEM_AR_TTHP_TO_ADDR_MOD_BUS,
		MY_MEM_AR_TTHP_BUS => MY_MEM_AR_TTHP_BUS,
		LAMPS_MAR_UP => LAMPS_MAR_UP,
		LAMPS_MAR_TP => LAMPS_MAR_TP,
		LAMPS_MAR_HP => LAMPS_MAR_HP,
		LAMPS_MAR_THP => LAMPS_MAR_THP,
		LAMPS_MAR_TTHP => LAMPS_MAR_TTHP);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
