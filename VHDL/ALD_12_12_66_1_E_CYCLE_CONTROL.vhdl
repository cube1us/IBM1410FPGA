-- VHDL for IBM SMS ALD page 12.12.66.1
-- Title: E CYCLE CONTROL
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 6/29/2020 2:09:31 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_12_12_66_1_E_CYCLE_CONTROL is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_F_CYCLE_CTRL:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		PS_E_CYCLE_REQUIRED:	 in STD_LOGIC;
		PS_LOGIC_GATE_Z:	 in STD_LOGIC;
		MS_E_CH_INT_END_OF_TRANSFER:	 in STD_LOGIC;
		PS_LOGIC_GATE_B_OR_S:	 in STD_LOGIC;
		MS_F_CYCLE_REQUIRED:	 in STD_LOGIC;
		MS_PROGRAM_RESET_2:	 in STD_LOGIC;
		MS_LOGIC_GATE_D_OR_U:	 in STD_LOGIC;
		PS_E_CYCLE_CTRL:	 out STD_LOGIC;
		MS_E_CYCLE_CTRL:	 out STD_LOGIC;
		PS_OVERLAPPED_CYCLE_CTRL:	 out STD_LOGIC;
		PS_E_CYCLE_CTRL_STAR_1311:	 out STD_LOGIC;
		MS_E_CYCLE:	 out STD_LOGIC;
		PS_E_CYCLE:	 out STD_LOGIC;
		LAMP_15A1E10:	 out STD_LOGIC;
		LAMP_11C8E15:	 out STD_LOGIC);
end ALD_12_12_66_1_E_CYCLE_CONTROL;

architecture behavioral of ALD_12_12_66_1_E_CYCLE_CONTROL is 

	signal OUT_5B_C: STD_LOGIC;
	signal OUT_5B_C_Latch: STD_LOGIC;
	signal OUT_4B_R: STD_LOGIC;
	signal OUT_4B_R_Latch: STD_LOGIC;
	signal OUT_5C_F: STD_LOGIC;
	signal OUT_3C_D: STD_LOGIC;
	signal OUT_2C_D: STD_LOGIC;
	signal OUT_5D_B: STD_LOGIC;
	signal OUT_5E_R: STD_LOGIC;
	signal OUT_4E_C: STD_LOGIC;
	signal OUT_1E_D: STD_LOGIC;
	signal OUT_5F_F: STD_LOGIC;
	signal OUT_3F_F: STD_LOGIC;
	signal OUT_3F_F_Latch: STD_LOGIC;
	signal OUT_2F_K: STD_LOGIC;
	signal OUT_5G_E: STD_LOGIC;
	signal OUT_4G_F: STD_LOGIC;
	signal OUT_4G_F_Latch: STD_LOGIC;
	signal OUT_3G_R: STD_LOGIC;
	signal OUT_2G_C: STD_LOGIC;
	signal OUT_5H_R: STD_LOGIC;
	signal OUT_4H_R: STD_LOGIC;
	signal OUT_3H_C: STD_LOGIC;
	signal OUT_3H_C_Latch: STD_LOGIC;
	signal OUT_2H_A: STD_LOGIC;
	signal OUT_2H_A_Latch: STD_LOGIC;
	signal OUT_5I_D: STD_LOGIC;
	signal OUT_5I_D_Latch: STD_LOGIC;
	signal OUT_4I_F: STD_LOGIC;
	signal OUT_4I_F_Latch: STD_LOGIC;
	signal OUT_3I_C: STD_LOGIC;
	signal OUT_3I_C_Latch: STD_LOGIC;
	signal OUT_2I_B: STD_LOGIC;
	signal OUT_2I_B_Latch: STD_LOGIC;
	signal OUT_1I_B: STD_LOGIC;
	signal OUT_DOT_4B: STD_LOGIC;
	signal OUT_DOT_5B: STD_LOGIC;
	signal OUT_DOT_5E: STD_LOGIC;
	signal OUT_DOT_3F: STD_LOGIC;
	signal OUT_DOT_4G: STD_LOGIC;
	signal OUT_DOT_3I: STD_LOGIC;

begin

	OUT_5B_C_Latch <= NOT(OUT_DOT_3F AND MS_E_CH_INT_END_OF_TRANSFER AND PS_LOGIC_GATE_Z );
	OUT_4B_R_Latch <= NOT OUT_DOT_5B;
	OUT_5C_F <= NOT PS_E_CYCLE_REQUIRED;
	OUT_3C_D <= NOT OUT_DOT_4B;
	OUT_2C_D <= NOT(OUT_3C_D AND MS_F_CYCLE_CTRL );
	OUT_5D_B <= NOT PS_2ND_CLOCK_PULSE_2;
	OUT_5E_R <= NOT PS_2ND_CLOCK_PULSE_2;
	OUT_4E_C <= NOT OUT_DOT_5E;
	OUT_1E_D <= NOT OUT_3C_D;
	OUT_5F_F <= NOT PS_E_CYCLE_REQUIRED;
	OUT_3F_F_Latch <= NOT OUT_DOT_4G;
	OUT_2F_K <= NOT OUT_DOT_3F;
	LAMP_15A1E10 <= OUT_2F_K;
	OUT_5G_E <= NOT(PS_LOGIC_GATE_Z AND MS_E_CH_INT_END_OF_TRANSFER );
	OUT_4G_F_Latch <= NOT OUT_5I_D;
	OUT_3G_R <= NOT MS_PROGRAM_RESET_2;
	OUT_2G_C <= NOT OUT_DOT_3F;
	LAMP_11C8E15 <= OUT_2G_C;
	OUT_5H_R <= NOT MS_F_CYCLE_REQUIRED;
	OUT_4H_R <= NOT PS_LOGIC_GATE_B_OR_S;
	OUT_3H_C_Latch <= NOT OUT_2H_A;

	SMS_AEK_2H: entity SMS_AEK
	    port map (
		IN1 => OUT_DOT_3F,	-- Pin F
		IN2 => OUT_2I_B,	-- Pin G
		OUT1 => OUT_2H_A_Latch );

	OUT_5I_D_Latch <= NOT(OUT_DOT_4B AND MS_LOGIC_GATE_D_OR_U AND MS_PROGRAM_RESET_2 );
	OUT_4I_F_Latch <= NOT OUT_5I_D;
	OUT_3I_C_Latch <= NOT(OUT_DOT_4B );
	OUT_2I_B_Latch <= NOT OUT_DOT_3I;
	OUT_1I_B <= NOT PS_LOGIC_GATE_B_OR_S;
	OUT_DOT_4B <= OUT_4B_R OR OUT_4E_C OR OUT_4I_F;
	OUT_DOT_5B <= OUT_5B_C OR OUT_5C_F OR OUT_5D_B;
	OUT_DOT_5E <= OUT_5E_R OR OUT_5F_F OR OUT_5G_E OR OUT_5H_R;
	OUT_DOT_3F <= OUT_3F_F OR OUT_3G_R OR OUT_3H_C;
	OUT_DOT_4G <= OUT_4G_F OR OUT_4H_R;
	OUT_DOT_3I <= OUT_3I_C OR OUT_1I_B;

	MS_E_CYCLE_CTRL <= OUT_3C_D;
	PS_OVERLAPPED_CYCLE_CTRL <= OUT_2C_D;
	PS_E_CYCLE_CTRL_STAR_1311 <= OUT_1E_D;
	PS_E_CYCLE <= OUT_2H_A;
	PS_E_CYCLE_CTRL <= OUT_DOT_4B;
	MS_E_CYCLE <= OUT_DOT_3F;

	Latch_5B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5B_C_Latch,
		Q => OUT_5B_C,
		QBar => OPEN );

	Latch_4B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4B_R_Latch,
		Q => OUT_4B_R,
		QBar => OPEN );

	Latch_3F: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3F_F_Latch,
		Q => OUT_3F_F,
		QBar => OPEN );

	Latch_4G: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4G_F_Latch,
		Q => OUT_4G_F,
		QBar => OPEN );

	Latch_3H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3H_C_Latch,
		Q => OUT_3H_C,
		QBar => OPEN );

	Latch_2H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2H_A_Latch,
		Q => OUT_2H_A,
		QBar => OPEN );

	Latch_5I: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_5I_D_Latch,
		Q => OUT_5I_D,
		QBar => OPEN );

	Latch_4I: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4I_F_Latch,
		Q => OUT_4I_F,
		QBar => OPEN );

	Latch_3I: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3I_C_Latch,
		Q => OUT_3I_C,
		QBar => OPEN );

	Latch_2I: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2I_B_Latch,
		Q => OUT_2I_B,
		QBar => OPEN );


end;
