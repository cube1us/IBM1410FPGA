-- Test Bench VHDL for IBM SMS ALD page 41.10.02.1
-- Title: ADDRESS SET ROUTINE LATCH
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/24/2020 10:19:11 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_41_10_02_1_ADDRESS_SET_ROUTINE_LATCH_tb is
end ALD_41_10_02_1_ADDRESS_SET_ROUTINE_LATCH_tb;

architecture behavioral of ALD_41_10_02_1_ADDRESS_SET_ROUTINE_LATCH_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_41_10_02_1_ADDRESS_SET_ROUTINE_LATCH
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_CONS_PRINTER_STROBE:	 in STD_LOGIC;
		MS_STOP_KEY_LATCH:	 in STD_LOGIC;
		PS_CONS_MX_Y5_POS:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS:	 in STD_LOGIC;
		MS_PROGRAM_RESET_4:	 in STD_LOGIC;
		MS_CONSOLE_ROUTINE_START:	 in STD_LOGIC;
		MS_DISPLAY_ROUTINE:	 in STD_LOGIC;
		MS_STORAGE_SCAN_ROUTINE:	 in STD_LOGIC;
		PS_CONS_MX_X1A_POS:	 in STD_LOGIC;
		PS_CONS_MX_35_POS:	 in STD_LOGIC;
		MS_CONS_MX_Y6_POS:	 in STD_LOGIC;
		MS_UNGATED_ALTER_ROUTINE:	 in STD_LOGIC;
		PS_ADDR_SET_KEYBOARD_LOCK:	 out STD_LOGIC;
		MS_ADDR_SET_KEYBOARD_LOCK:	 out STD_LOGIC;
		MS_ADDRESS_SET_ROUTINE:	 out STD_LOGIC;
		PS_ADDRESS_SET_ROUTINE:	 out STD_LOGIC;
		MS_CONS_CYCLE_START_RESET:	 out STD_LOGIC;
		MS_CONS_CYCLE_START_CND:	 out STD_LOGIC;
		MS_ADDRESS_SET_UNLOCK:	 out STD_LOGIC;
		MS_DISPLAY_OR_ALTER_ROUTINE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_CONS_PRINTER_STROBE: STD_LOGIC := '0';
	signal MS_STOP_KEY_LATCH: STD_LOGIC := '1';
	signal PS_CONS_MX_Y5_POS: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_3_POS: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_4: STD_LOGIC := '1';
	signal MS_CONSOLE_ROUTINE_START: STD_LOGIC := '1';
	signal MS_DISPLAY_ROUTINE: STD_LOGIC := '1';
	signal MS_STORAGE_SCAN_ROUTINE: STD_LOGIC := '1';
	signal PS_CONS_MX_X1A_POS: STD_LOGIC := '0';
	signal PS_CONS_MX_35_POS: STD_LOGIC := '0';
	signal MS_CONS_MX_Y6_POS: STD_LOGIC := '1';
	signal MS_UNGATED_ALTER_ROUTINE: STD_LOGIC := '1';

	-- Outputs

	signal PS_ADDR_SET_KEYBOARD_LOCK: STD_LOGIC;
	signal MS_ADDR_SET_KEYBOARD_LOCK: STD_LOGIC;
	signal MS_ADDRESS_SET_ROUTINE: STD_LOGIC;
	signal PS_ADDRESS_SET_ROUTINE: STD_LOGIC;
	signal MS_CONS_CYCLE_START_RESET: STD_LOGIC;
	signal MS_CONS_CYCLE_START_CND: STD_LOGIC;
	signal MS_ADDRESS_SET_UNLOCK: STD_LOGIC;
	signal MS_DISPLAY_OR_ALTER_ROUTINE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_41_10_02_1_ADDRESS_SET_ROUTINE_LATCH port map(
		FPGA_CLK => FPGA_CLK,
		PS_CONS_PRINTER_STROBE => PS_CONS_PRINTER_STROBE,
		MS_STOP_KEY_LATCH => MS_STOP_KEY_LATCH,
		PS_CONS_MX_Y5_POS => PS_CONS_MX_Y5_POS,
		PS_CONS_CLOCK_3_POS => PS_CONS_CLOCK_3_POS,
		MS_PROGRAM_RESET_4 => MS_PROGRAM_RESET_4,
		MS_CONSOLE_ROUTINE_START => MS_CONSOLE_ROUTINE_START,
		MS_DISPLAY_ROUTINE => MS_DISPLAY_ROUTINE,
		MS_STORAGE_SCAN_ROUTINE => MS_STORAGE_SCAN_ROUTINE,
		PS_CONS_MX_X1A_POS => PS_CONS_MX_X1A_POS,
		PS_CONS_MX_35_POS => PS_CONS_MX_35_POS,
		MS_CONS_MX_Y6_POS => MS_CONS_MX_Y6_POS,
		MS_UNGATED_ALTER_ROUTINE => MS_UNGATED_ALTER_ROUTINE,
		PS_ADDR_SET_KEYBOARD_LOCK => PS_ADDR_SET_KEYBOARD_LOCK,
		MS_ADDR_SET_KEYBOARD_LOCK => MS_ADDR_SET_KEYBOARD_LOCK,
		MS_ADDRESS_SET_ROUTINE => MS_ADDRESS_SET_ROUTINE,
		PS_ADDRESS_SET_ROUTINE => PS_ADDRESS_SET_ROUTINE,
		MS_CONS_CYCLE_START_RESET => MS_CONS_CYCLE_START_RESET,
		MS_CONS_CYCLE_START_CND => MS_CONS_CYCLE_START_CND,
		MS_ADDRESS_SET_UNLOCK => MS_ADDRESS_SET_UNLOCK,
		MS_DISPLAY_OR_ALTER_ROUTINE => MS_DISPLAY_OR_ALTER_ROUTINE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "41.10.02.1        ";

   for tt in 0 to 2**11 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      l := tv(9);
      m := tv(10);
      
      g1 := a and j and c and d;

      -- Reset one of two ways at the beginning
      
      MS_STOP_KEY_LATCH <= not b;
      MS_PROGRAM_RESET_4 <= b;
      wait for 30 ns;
      MS_STOP_KEY_LATCH <= '1';
      MS_PROGRAM_RESET_4 <= '1';
      wait for 30 ns;
      
      check1(PS_ADDRESS_SET_ROUTINE,'0',testName,"+S Address Set Routine Loop Reset");
      check1(MS_ADDRESS_SET_ROUTINE,'1',testName,"-S Address Set Routine Loop Reset");

      -- Maybe set the latch (while keeping enough reset signals at bay so it can set if it wants to)
      
      MS_CONSOLE_ROUTINE_START <= not f;

      PS_CONS_CLOCK_3_POS <= d;
      MS_DISPLAY_ROUTINE <= not g;
      MS_STORAGE_SCAN_ROUTINE <= not h;
      PS_CONS_MX_X1A_POS <= j;
      PS_CONS_MX_35_POS <= k;
      MS_CONS_MX_Y6_POS <= l;
      MS_UNGATED_ALTER_ROUTINE <= not m;      
      wait for 30 ns;
      
      MS_CONSOLE_ROUTINE_START <= '1';
      wait for 30 ns; -- Latch should stay set if it set in the first place
     
      check1(PS_ADDRESS_SET_ROUTINE,f,testName,"+S Address Set Routine");
      check1(MS_ADDRESS_SET_ROUTINE,not f,testName,"-S Address Set Routine");
      check1(MS_ADDRESS_SET_UNLOCK,not(f and l and j),testName,"Address Set Unlock");
      check1(MS_CONS_CYCLE_START_RESET,not(f or g or h),testName,"Cons Cycle Start Reset");
      check1(MS_CONS_CYCLE_START_CND,not((f or g or h) and k and d),testName,"Cons Cycle Start Cnd");
      check1(MS_DISPLAY_OR_ALTER_ROUTINE,not(g or m),testName,"Display or Alter Routine");
      
      -- Next, maybe reset the latch with the last two signals (with the set signal off already)
                           
		PS_CONS_PRINTER_STROBE <= a;
      PS_CONS_MX_Y5_POS <= c;      
      wait for 30 ns;  -- Maybe reset the latch (noting that it might not have set in the first place)
      
      check1(PS_ADDR_SET_KEYBOARD_LOCK,g1,testName,"+S Addr Set Keybd Lock");
      check1(MS_ADDR_SET_KEYBOARD_LOCK,not g1,testName,"-S Addr Set Keybd Lock");
      
      check1(PS_ADDRESS_SET_ROUTINE,f and not g1,testName,"Reset +S Address Set Routine");
      check1(MS_ADDRESS_SET_ROUTINE,NOT PS_ADDRESS_SET_ROUTINE,testName,"Reset -S Address Set Routine");
      
      -- Reset the variables so reset at top will work right (no, do NOT assemble the Minions)      

		PS_CONS_PRINTER_STROBE <= '0';
      PS_CONS_MX_Y5_POS <= '0';      
      PS_CONS_CLOCK_3_POS <= '0';
      MS_CONSOLE_ROUTINE_START <= '1';
      MS_DISPLAY_ROUTINE <= '1';
      MS_STORAGE_SCAN_ROUTINE <= '1';
      PS_CONS_MX_X1A_POS <= '0';
      PS_CONS_MX_35_POS <= '0';
      MS_CONS_MX_Y6_POS <= '0';
      MS_UNGATED_ALTER_ROUTINE <= '1';      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
