-- Test Bench VHDL for IBM SMS ALD page 45.20.02.1
-- Title: CONS CYCLE CTRL MATRIX Y1+Y2-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/27/2020 9:04:39 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_20_02_1_CONS_CYCLE_CTRL_MATRIX_Y1_Y2_ACC_tb is
end ALD_45_20_02_1_CONS_CYCLE_CTRL_MATRIX_Y1_Y2_ACC_tb;

architecture behavioral of ALD_45_20_02_1_CONS_CYCLE_CTRL_MATRIX_Y1_Y2_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_20_02_1_CONS_CYCLE_CTRL_MATRIX_Y1_Y2_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_ALTER_ROUTINE:	 in STD_LOGIC;
		PS_CONS_MX_X6_POS:	 in STD_LOGIC;
		PS_CONS_MX_X1A_POS:	 in STD_LOGIC;
		PS_CONS_MX_Y_DRIVE_1:	 in STD_LOGIC;
		MS_CONS_MX_Y_DC_RESET:	 in STD_LOGIC;
		PS_CONS_MX_ADDR_DRIVE:	 in STD_LOGIC;
		PS_CONS_MX_Y6_POS:	 in STD_LOGIC;
		MS_ADDRESS_SET_COMPLETE:	 in STD_LOGIC;
		MS_DISPLAY_ADDR_COMPLETE:	 in STD_LOGIC;
		PS_SET_CONS_MX_Y3_POS:	 in STD_LOGIC;
		MS_CONS_MX_Y2_POS:	 out STD_LOGIC;
		PS_CONS_MX_Y2_POS:	 out STD_LOGIC;
		PS_RESET_CONS_MX_Y2_POS:	 out STD_LOGIC;
		MS_CONS_MX_Y1_POS:	 out STD_LOGIC;
		PS_CONS_MX_Y1_POS:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_ALTER_ROUTINE: STD_LOGIC := '0';
	signal PS_CONS_MX_X6_POS: STD_LOGIC := '0';
	signal PS_CONS_MX_X1A_POS: STD_LOGIC := '0';
	signal PS_CONS_MX_Y_DRIVE_1: STD_LOGIC := '0';
	signal MS_CONS_MX_Y_DC_RESET: STD_LOGIC := '1';
	signal PS_CONS_MX_ADDR_DRIVE: STD_LOGIC := '0';
	signal PS_CONS_MX_Y6_POS: STD_LOGIC := '0';
	signal MS_ADDRESS_SET_COMPLETE: STD_LOGIC := '1';
	signal MS_DISPLAY_ADDR_COMPLETE: STD_LOGIC := '1';
	signal PS_SET_CONS_MX_Y3_POS: STD_LOGIC := '0';

	-- Outputs

	signal MS_CONS_MX_Y2_POS: STD_LOGIC;
	signal PS_CONS_MX_Y2_POS: STD_LOGIC;
	signal PS_RESET_CONS_MX_Y2_POS: STD_LOGIC;
	signal MS_CONS_MX_Y1_POS: STD_LOGIC;
	signal PS_CONS_MX_Y1_POS: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_20_02_1_CONS_CYCLE_CTRL_MATRIX_Y1_Y2_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_ALTER_ROUTINE => PS_ALTER_ROUTINE,
		PS_CONS_MX_X6_POS => PS_CONS_MX_X6_POS,
		PS_CONS_MX_X1A_POS => PS_CONS_MX_X1A_POS,
		PS_CONS_MX_Y_DRIVE_1 => PS_CONS_MX_Y_DRIVE_1,
		MS_CONS_MX_Y_DC_RESET => MS_CONS_MX_Y_DC_RESET,
		PS_CONS_MX_ADDR_DRIVE => PS_CONS_MX_ADDR_DRIVE,
		PS_CONS_MX_Y6_POS => PS_CONS_MX_Y6_POS,
		MS_ADDRESS_SET_COMPLETE => MS_ADDRESS_SET_COMPLETE,
		MS_DISPLAY_ADDR_COMPLETE => MS_DISPLAY_ADDR_COMPLETE,
		PS_SET_CONS_MX_Y3_POS => PS_SET_CONS_MX_Y3_POS,
		MS_CONS_MX_Y2_POS => MS_CONS_MX_Y2_POS,
		PS_CONS_MX_Y2_POS => PS_CONS_MX_Y2_POS,
		PS_RESET_CONS_MX_Y2_POS => PS_RESET_CONS_MX_Y2_POS,
		MS_CONS_MX_Y1_POS => MS_CONS_MX_Y1_POS,
		PS_CONS_MX_Y1_POS => PS_CONS_MX_Y1_POS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "45.20.02.1        ";

   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      f := tv(3);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);

      g1 := g and not h and not j;
      
      -- Reset 
      
      MS_CONS_MX_Y_DC_RESET <= '0';
      wait for 30 ns;
      MS_CONS_MX_Y_DC_RESET <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_MX_Y1_POS,'0',testName,"Init +S Y1");
      check1(MS_CONS_MX_Y1_POS,'1',testName,"Init -S Y1");
      
      -- Now, maybe set the trigger.  First, the setup

		PS_ALTER_ROUTINE <= a;
		PS_CONS_MX_X6_POS <= b;
		PS_CONS_MX_X1A_POS <= c;
		PS_CONS_MX_Y_DRIVE_1 <= '0';
		PS_CONS_MX_ADDR_DRIVE <= '0'; -- Involved in reset
		PS_CONS_MX_Y6_POS <= g;
		MS_ADDRESS_SET_COMPLETE <= not h;
		MS_DISPLAY_ADDR_COMPLETE <= not j;
		PS_SET_CONS_MX_Y3_POS <= k;

      -- Then run the Y Drive clock to maybe set the trigger
      
      PS_CONS_MX_Y_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_Y1_POS,g1,testName,"Set +S Y1");
      check1(MS_CONS_MX_Y1_POS,not g1,testName,"Set -S Y1");

      -- Reset the set side signals.  Should not disturb the trigger at this point

		PS_ALTER_ROUTINE <= '0';
		PS_CONS_MX_X6_POS <= '0';
		PS_CONS_MX_X1A_POS <= '0';
		PS_CONS_MX_Y6_POS <= '0';
		MS_ADDRESS_SET_COMPLETE <= '1';
		MS_DISPLAY_ADDR_COMPLETE <= '1';
		PS_SET_CONS_MX_Y3_POS <= '0';		

      check1(PS_CONS_MX_Y1_POS,g1,testName,"Set check +S Y1");
      check1(MS_CONS_MX_Y1_POS,not g1,testName,"Set check -S Y1");
      
      -- Now, reset the trigger using one of two signals
      -- (in real operation, this would advance the trigger as well if it were set)
      
		PS_CONS_MX_ADDR_DRIVE <= f;
		PS_CONS_MX_Y_DRIVE_1 <= not f;
      wait for 90 ns;
      
      check1(PS_CONS_MX_Y1_POS,'0',testName,"Reset +S Y1");
      check1(MS_CONS_MX_Y1_POS,'1',testName,"Reset -S Y1");
      
		PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;
      
      check1(PS_CONS_MX_Y1_POS,'0',testName,"Reset Check +S Y1");
      check1(MS_CONS_MX_Y1_POS,'1',testName,"Reset Check -S Y1");
      
      wait for 30 ns;      
      
   end loop;
   
   
   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);

      g1 := g and not h and not j;
      -- Reset Y1 AND Y2
      
      MS_CONS_MX_Y_DC_RESET <= '0';
      wait for 30 ns;
      MS_CONS_MX_Y_DC_RESET <= '1';
      wait for 30 ns;
      
      check1(PS_CONS_MX_Y2_POS,'0',testname,"Init +S Y2");      
      check1(MS_CONS_MX_Y2_POS,'1',testname,"Init -S Y2");
      
      -- Maybe set Y1      

		PS_ALTER_ROUTINE <= '0';
		PS_CONS_MX_X6_POS <= '0';
		PS_CONS_MX_X1A_POS <= '0';
		PS_CONS_MX_Y6_POS <= g;
		MS_ADDRESS_SET_COMPLETE <= not h;
		MS_DISPLAY_ADDR_COMPLETE <= not j;
		PS_SET_CONS_MX_Y3_POS <= k;

      -- Then run the Y Drive clock to maybe set the trigger
      
      PS_CONS_MX_Y_DRIVE_1 <= '1';
      wait for 90 ns;
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;

      check1(PS_CONS_MX_Y1_POS,g1,testName,"Y2 test Set +S Y1");
      check1(MS_CONS_MX_Y1_POS,not g1,testName,"Y2 test Set -S Y1");

      -- Turn off the Y1 set side signals    
      
		PS_CONS_MX_Y6_POS <= '0';
      MS_ADDRESS_SET_COMPLETE <= '1';
      MS_DISPLAY_ADDR_COMPLETE <= '1';
      PS_SET_CONS_MX_Y3_POS <= '0';      
      
      -- Now, reset the trigger using one of two advance signals
      -- This may also set Y2
      
      PS_CONS_MX_ADDR_DRIVE <= f;
      PS_CONS_MX_Y_DRIVE_1 <= not f;
      wait for 90 ns;

      PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      
      wait for 90 ns;
      
      check1(PS_CONS_MX_Y1_POS,'0',testName,"Y2 Test Advance +S Y1");
      check1(MS_CONS_MX_Y1_POS,'1',testName,"Y2 Test Advance -S Y1");
      
      -- And check Y2 to see if it was supposed to set and if so, did it?
      
      check1(PS_CONS_MX_Y2_POS,g1,testName,"Set +S Y2");
      check1(MS_CONS_MX_Y2_POS,not g1,testName,"Set 1S Y2");
      
      -- If it wasn't supposed to set, ignore the rest of the test
      
      if(g1 = '0') then
         next;
      end if;

      -- Set up signals for a possible Y2 reset

		PS_ALTER_ROUTINE <= a;
		PS_CONS_MX_X6_POS <= b;
		PS_CONS_MX_X1A_POS <= c;
		PS_CONS_MX_Y6_POS <= '0'; -- So Y1 doesn't set again
		MS_ADDRESS_SET_COMPLETE <= '1';
		MS_DISPLAY_ADDR_COMPLETE <= '1';
		PS_SET_CONS_MX_Y3_POS <= k;
		wait for 30 ns;
		
		check1(PS_RESET_CONS_MX_Y2_POS,(g1 and a and b) or (g1 and c),testName,
		 "Reset CONS MX Y2 POS");
      
      -- Possibly run one of the two gate off / ac reset signals.  Note that at this point
      -- Y1 is off.

      PS_CONS_MX_ADDR_DRIVE <= f;
      PS_CONS_MX_Y_DRIVE_1 <= d;
      wait for 90 ns;

      PS_CONS_MX_ADDR_DRIVE <= '0';
      PS_CONS_MX_Y_DRIVE_1 <= '0';
      wait for 90 ns;
      
      g3 := (f and (c or (a and b))) or (d and k); -- If true, should reset
      
      check1(PS_CONS_MX_Y2_POS,g1 and not g3,testName,"+S Y2 Reset Test");
      check1(MS_CONS_MX_Y2_POS,not(g1 and not g3),testName,"-S Y2 Reset Test");
      
   end loop;   

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
