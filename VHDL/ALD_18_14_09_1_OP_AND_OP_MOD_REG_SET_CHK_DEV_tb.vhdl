-- Test Bench VHDL for IBM SMS ALD page 18.14.09.1
-- Title: OP AND OP MOD REG SET CHK DEV
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/13/2020 5:07:39 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_18_14_09_1_OP_AND_OP_MOD_REG_SET_CHK_DEV_tb is
end ALD_18_14_09_1_OP_AND_OP_MOD_REG_SET_CHK_DEV_tb;

architecture behavioral of ALD_18_14_09_1_OP_AND_OP_MOD_REG_SET_CHK_DEV_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_18_14_09_1_OP_AND_OP_MOD_REG_SET_CHK_DEV
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_I_RING_1_TIME:	 in STD_LOGIC;
		PS_2_CHAR_ONLY_OP_CODES:	 in STD_LOGIC;
		PS_I_CYCLE:	 in STD_LOGIC;
		PS_1_ADDR_PLUS_MOD_OP_CODES:	 in STD_LOGIC;
		PS_I_RING_6_TIME:	 in STD_LOGIC;
		MS_STORAGE_SCAN_ROUTINE:	 in STD_LOGIC;
		PS_A_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_I_RING_11_TIME:	 in STD_LOGIC;
		PS_2_ADDR_PLUS_MOD_OP_CODES:	 in STD_LOGIC;
		MS_1401_DOT_I_CYCLE:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		MS_I_RING_OP_TIME:	 in STD_LOGIC;
		PS_I_RING_OP_TIME:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_1:	 in STD_LOGIC;
		PS_B_CH_WM_BIT_2:	 in STD_LOGIC;
		PS_OP_OR_OP_MOD_POSITION:	 out STD_LOGIC;
		MS_CHECK_OP_MOD_SET:	 out STD_LOGIC;
		MS_CHECK_OP_REG_SET:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_I_RING_1_TIME: STD_LOGIC := '0';
	signal PS_2_CHAR_ONLY_OP_CODES: STD_LOGIC := '0';
	signal PS_I_CYCLE: STD_LOGIC := '0';
	signal PS_1_ADDR_PLUS_MOD_OP_CODES: STD_LOGIC := '0';
	signal PS_I_RING_6_TIME: STD_LOGIC := '0';
	signal MS_STORAGE_SCAN_ROUTINE: STD_LOGIC := '1';
	signal PS_A_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_I_RING_11_TIME: STD_LOGIC := '0';
	signal PS_2_ADDR_PLUS_MOD_OP_CODES: STD_LOGIC := '0';
	signal MS_1401_DOT_I_CYCLE: STD_LOGIC := '1';
	signal PS_B_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal MS_I_RING_OP_TIME: STD_LOGIC := '1';
	signal PS_I_RING_OP_TIME: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_F_1: STD_LOGIC := '0';
	signal PS_B_CH_WM_BIT_2: STD_LOGIC := '0';

	-- Outputs

	signal PS_OP_OR_OP_MOD_POSITION: STD_LOGIC;
	signal MS_CHECK_OP_MOD_SET: STD_LOGIC;
	signal MS_CHECK_OP_REG_SET: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_18_14_09_1_OP_AND_OP_MOD_REG_SET_CHK_DEV port map(
		FPGA_CLK => FPGA_CLK,
		PS_I_RING_1_TIME => PS_I_RING_1_TIME,
		PS_2_CHAR_ONLY_OP_CODES => PS_2_CHAR_ONLY_OP_CODES,
		PS_I_CYCLE => PS_I_CYCLE,
		PS_1_ADDR_PLUS_MOD_OP_CODES => PS_1_ADDR_PLUS_MOD_OP_CODES,
		PS_I_RING_6_TIME => PS_I_RING_6_TIME,
		MS_STORAGE_SCAN_ROUTINE => MS_STORAGE_SCAN_ROUTINE,
		PS_A_CH_NOT_WM_BIT => PS_A_CH_NOT_WM_BIT,
		PS_I_RING_11_TIME => PS_I_RING_11_TIME,
		PS_2_ADDR_PLUS_MOD_OP_CODES => PS_2_ADDR_PLUS_MOD_OP_CODES,
		MS_1401_DOT_I_CYCLE => MS_1401_DOT_I_CYCLE,
		PS_B_CH_NOT_WM_BIT => PS_B_CH_NOT_WM_BIT,
		MS_I_RING_OP_TIME => MS_I_RING_OP_TIME,
		PS_I_RING_OP_TIME => PS_I_RING_OP_TIME,
		PS_LOGIC_GATE_F_1 => PS_LOGIC_GATE_F_1,
		PS_B_CH_WM_BIT_2 => PS_B_CH_WM_BIT_2,
		PS_OP_OR_OP_MOD_POSITION => PS_OP_OR_OP_MOD_POSITION,
		MS_CHECK_OP_MOD_SET => MS_CHECK_OP_MOD_SET,
		MS_CHECK_OP_REG_SET => MS_CHECK_OP_REG_SET);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "18.14.09.1        ";

   for tt in 0 to 2**15 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);
      p := tv(14);
      
      g1 := (a and b) or (d and e) or (h and j) or k or f or not g or m;

		PS_I_RING_1_TIME <= a;
		PS_2_CHAR_ONLY_OP_CODES <= b;
		PS_I_CYCLE <= c;
		PS_1_ADDR_PLUS_MOD_OP_CODES <= d;
		PS_I_RING_6_TIME <= e;
		MS_STORAGE_SCAN_ROUTINE <= not f;
		PS_A_CH_NOT_WM_BIT <= g;
		PS_I_RING_11_TIME <= h;
		PS_2_ADDR_PLUS_MOD_OP_CODES <= j;
		MS_1401_DOT_I_CYCLE <= not k;
		PS_B_CH_NOT_WM_BIT <= l;
		MS_I_RING_OP_TIME <= not m;
		PS_I_RING_OP_TIME <= n;
		PS_LOGIC_GATE_F_1 <= o;
		PS_B_CH_WM_BIT_2 <= p;
      
      wait for 30 ns;
      
      check1(PS_OP_OR_OP_MOD_POSITION,g1,testName,"Op or Op Mod");
      check1(MS_CHECK_OP_MOD_SET,not(c and g1 and o and not m and not f and l),testname,
         "Check Op Mod Set");
      check1(MS_CHECK_OP_REG_SET,not(o and p and c and n),testName,"Check Op Reg Set");      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
