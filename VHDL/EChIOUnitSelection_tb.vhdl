-- Test BenchVHDL for IBM SMS ALD group EChIOUnitSelection
-- Title: EChIOUnitSelection
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 7/29/2020 3:54:19 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity EChIOUnitSelection_tb is
end EChIOUnitSelection_tb;

architecture behavioral of EChIOUnitSelection_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component EChIOUnitSelection
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE: in STD_LOGIC;
		PS_E_CH_INPUT_MODE: in STD_LOGIC;
		PS_PERCENT_OR_COML_AT: in STD_LOGIC;
		PS_E_CH_ANY_STATUS_ON: in STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_A_DELAY: in STD_LOGIC;
		MS_E_CH_STATUS_SAMPLE_B_DELAY: in STD_LOGIC;
		MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON: in STD_LOGIC;
		PS_E_CH_U_SEL_REG_NOT_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_E_CH_U_SEL_REG_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_I_RING_HDL_BUS: in STD_LOGIC_VECTOR (12 downTo 0);
		MS_E_CH_SELECT_UNIT_T: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_T: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_T_DOT_INPUT: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_T_DOT_INPUT: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_1: out STD_LOGIC;
		MC_UNIT_1_SELECT_TO_I_O: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_1: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_2: out STD_LOGIC;
		MC_UNIT_2_SELECT_TO_I_O: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_2: out STD_LOGIC;
		MC_UNIT_4_SELECT_TO_I_O: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_4: out STD_LOGIC;
		MC_UNIT_8_SEL_TO_I_O: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_8: out STD_LOGIC;
		MC_SELECT_UNIT_P: out STD_LOGIC;
		PS_E_CH_BUFFER_SELECT: out STD_LOGIC;
		MC_SELECT_UNIT_D: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_K: out STD_LOGIC;
		MC_SELECT_UNIT_Q: out STD_LOGIC;
		MC_E_CH_SELECT_UNIT_R: out STD_LOGIC;
		MC_SELECT_UNIT_L: out STD_LOGIC;
		MC_E_CH_SELECT_UNIT_M: out STD_LOGIC;
		MC_SELECT_UNIT_N: out STD_LOGIC;
		PS_E_CH_SELECT_TAPE_DATA: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_F: out STD_LOGIC;
		MS_E_CH_SELECT_TAPE_DATA: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_F_A: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_F: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_U: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_U: out STD_LOGIC;
		MC_ODD_PARITY_TO_TAPE_STAR_E_CH: out STD_LOGIC;
		PS_E_CH_SELECT_UNIT_B: out STD_LOGIC;
		MS_E_CH_SELECT_UNIT_B: out STD_LOGIC;
		PS_E_CH_SEL_UNIT_F_LATCHED: out STD_LOGIC;
		MC_UNIT_SEL_F_STAR_E_CH_1301: out STD_LOGIC;
		MC_UNIT_SEL_F_STAR_E_CH_1405: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_E_CH_INPUT_MODE: STD_LOGIC := '0';
	signal PS_PERCENT_OR_COML_AT: STD_LOGIC := '0';
	signal PS_E_CH_ANY_STATUS_ON: STD_LOGIC := '0';
	signal PS_E_CH_STATUS_SAMPLE_A_DELAY: STD_LOGIC := '0';
	signal MS_E_CH_STATUS_SAMPLE_B_DELAY: STD_LOGIC := '1';
	signal MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON: STD_LOGIC := '1';
	signal PS_E_CH_U_SEL_REG_NOT_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_E_CH_U_SEL_REG_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_I_RING_HDL_BUS: STD_LOGIC_VECTOR (12 downTo 0) := "0000000000000";

	-- Outputs

	signal MS_E_CH_SELECT_UNIT_T: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_T: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_T_DOT_INPUT: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_T_DOT_INPUT: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_1: STD_LOGIC;
	signal MC_UNIT_1_SELECT_TO_I_O: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_1: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_2: STD_LOGIC;
	signal MC_UNIT_2_SELECT_TO_I_O: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_2: STD_LOGIC;
	signal MC_UNIT_4_SELECT_TO_I_O: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_4: STD_LOGIC;
	signal MC_UNIT_8_SEL_TO_I_O: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_8: STD_LOGIC;
	signal MC_SELECT_UNIT_P: STD_LOGIC;
	signal PS_E_CH_BUFFER_SELECT: STD_LOGIC;
	signal MC_SELECT_UNIT_D: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_K: STD_LOGIC;
	signal MC_SELECT_UNIT_Q: STD_LOGIC;
	signal MC_E_CH_SELECT_UNIT_R: STD_LOGIC;
	signal MC_SELECT_UNIT_L: STD_LOGIC;
	signal MC_E_CH_SELECT_UNIT_M: STD_LOGIC;
	signal MC_SELECT_UNIT_N: STD_LOGIC;
	signal PS_E_CH_SELECT_TAPE_DATA: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_F: STD_LOGIC;
	signal MS_E_CH_SELECT_TAPE_DATA: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_F_A: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_F: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_U: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_U: STD_LOGIC;
	signal MC_ODD_PARITY_TO_TAPE_STAR_E_CH: STD_LOGIC;
	signal PS_E_CH_SELECT_UNIT_B: STD_LOGIC;
	signal MS_E_CH_SELECT_UNIT_B: STD_LOGIC;
	signal PS_E_CH_SEL_UNIT_F_LATCHED: STD_LOGIC;
	signal MC_UNIT_SEL_F_STAR_E_CH_1301: STD_LOGIC;
	signal MC_UNIT_SEL_F_STAR_E_CH_1405: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: EChIOUnitSelection port map(
		FPGA_CLK => FPGA_CLK,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		PS_PERCENT_OR_COML_AT => PS_PERCENT_OR_COML_AT,
		PS_E_CH_ANY_STATUS_ON => PS_E_CH_ANY_STATUS_ON,
		PS_E_CH_STATUS_SAMPLE_A_DELAY => PS_E_CH_STATUS_SAMPLE_A_DELAY,
		MS_E_CH_STATUS_SAMPLE_B_DELAY => MS_E_CH_STATUS_SAMPLE_B_DELAY,
		MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON => MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON,
		PS_E_CH_U_SEL_REG_NOT_BUS => PS_E_CH_U_SEL_REG_NOT_BUS,
		PS_E_CH_U_SEL_REG_BUS => PS_E_CH_U_SEL_REG_BUS,
		PS_I_RING_HDL_BUS => PS_I_RING_HDL_BUS,
		MS_E_CH_SELECT_UNIT_T => MS_E_CH_SELECT_UNIT_T,
		PS_E_CH_SELECT_UNIT_T => PS_E_CH_SELECT_UNIT_T,
		PS_E_CH_SELECT_UNIT_T_DOT_INPUT => PS_E_CH_SELECT_UNIT_T_DOT_INPUT,
		MS_E_CH_SELECT_UNIT_T_DOT_INPUT => MS_E_CH_SELECT_UNIT_T_DOT_INPUT,
		PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT => PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,
		PS_E_CH_SELECT_UNIT_1 => PS_E_CH_SELECT_UNIT_1,
		MC_UNIT_1_SELECT_TO_I_O => MC_UNIT_1_SELECT_TO_I_O,
		MS_E_CH_SELECT_UNIT_1 => MS_E_CH_SELECT_UNIT_1,
		PS_E_CH_SELECT_UNIT_2 => PS_E_CH_SELECT_UNIT_2,
		MC_UNIT_2_SELECT_TO_I_O => MC_UNIT_2_SELECT_TO_I_O,
		MS_E_CH_SELECT_UNIT_2 => MS_E_CH_SELECT_UNIT_2,
		MC_UNIT_4_SELECT_TO_I_O => MC_UNIT_4_SELECT_TO_I_O,
		MS_E_CH_SELECT_UNIT_4 => MS_E_CH_SELECT_UNIT_4,
		MC_UNIT_8_SEL_TO_I_O => MC_UNIT_8_SEL_TO_I_O,
		PS_E_CH_SELECT_UNIT_8 => PS_E_CH_SELECT_UNIT_8,
		MC_SELECT_UNIT_P => MC_SELECT_UNIT_P,
		PS_E_CH_BUFFER_SELECT => PS_E_CH_BUFFER_SELECT,
		MC_SELECT_UNIT_D => MC_SELECT_UNIT_D,
		MS_E_CH_SELECT_UNIT_K => MS_E_CH_SELECT_UNIT_K,
		MC_SELECT_UNIT_Q => MC_SELECT_UNIT_Q,
		MC_E_CH_SELECT_UNIT_R => MC_E_CH_SELECT_UNIT_R,
		MC_SELECT_UNIT_L => MC_SELECT_UNIT_L,
		MC_E_CH_SELECT_UNIT_M => MC_E_CH_SELECT_UNIT_M,
		MC_SELECT_UNIT_N => MC_SELECT_UNIT_N,
		PS_E_CH_SELECT_TAPE_DATA => PS_E_CH_SELECT_TAPE_DATA,
		MS_E_CH_SELECT_UNIT_F => MS_E_CH_SELECT_UNIT_F,
		MS_E_CH_SELECT_TAPE_DATA => MS_E_CH_SELECT_TAPE_DATA,
		MS_E_CH_SELECT_UNIT_F_A => MS_E_CH_SELECT_UNIT_F_A,
		PS_E_CH_SELECT_UNIT_F => PS_E_CH_SELECT_UNIT_F,
		MS_E_CH_SELECT_UNIT_U => MS_E_CH_SELECT_UNIT_U,
		PS_E_CH_SELECT_UNIT_U => PS_E_CH_SELECT_UNIT_U,
		MC_ODD_PARITY_TO_TAPE_STAR_E_CH => MC_ODD_PARITY_TO_TAPE_STAR_E_CH,
		PS_E_CH_SELECT_UNIT_B => PS_E_CH_SELECT_UNIT_B,
		MS_E_CH_SELECT_UNIT_B => MS_E_CH_SELECT_UNIT_B,
		PS_E_CH_SEL_UNIT_F_LATCHED => PS_E_CH_SEL_UNIT_F_LATCHED,
		MC_UNIT_SEL_F_STAR_E_CH_1301 => MC_UNIT_SEL_F_STAR_E_CH_1301,
		MC_UNIT_SEL_F_STAR_E_CH_1405 => MC_UNIT_SEL_F_STAR_E_CH_1405);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Perpetual signal assignments

PS_E_CH_U_SEL_REG_NOT_BUS <= NOT PS_E_CH_U_SEL_REG_BUS;

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable testChar: string(1 to 6);
   
   begin

   -- Your test bench code
   
   testName := "13.50.03.1 - 07.1 ";
   wait for 30 ns;
   
   testChar := "Start ";
   
   -- Reset the latch
   MS_E_CH_STATUS_SAMPLE_B_DELAY <= '0';
   wait for 30 ns;
   MS_E_CH_STATUS_SAMPLE_B_DELAY <= '1';
   
   check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
   check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
   check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
   check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
   check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
   check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
   check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
   check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
   check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
   check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
   check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
   check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
   check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
   check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
   check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
   check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
   check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
   check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
   check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
   check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
   check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
   check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
   check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
   check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
   check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
   check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
   check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
   check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
   check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
   check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
   check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
   check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
   check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
   check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
   check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
   check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
   check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

   
   for BCD_CHAR in BCD.BCD loop
      PS_E_CH_U_SEL_REG_BUS <= BCD.bcd_to_slv8_odd_parity(BCD_CHAR);
      wait for 30 ns;
      report "Character is " & BCD.BCD'image(BCD_CHAR);
      case BCD_CHAR is

         when BCD.BCD_1 =>
            testChar := "1     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'0',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_2 =>
            testChar := "2     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'0',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_4 =>
            testChar := "4     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'0',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'0',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_8 =>
            testChar := "8     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            
            -- The ALD page 13.50.04.1 decodes unit 8 as  B 8 instead of 8  Not sure if
            -- this was done intentionally, and then rewired if the punch column binary
            -- feature was instealled.  So, for now, Unit 8 does not decode
            
            -- FAILED check1(PS_E_CH_SELECT_UNIT_8,'1',testName,testChar & "+S 8");
            -- FAILED check1(MC_UNIT_8_SEL_TO_I_O,'0',testName,testChar & "-C 8");
            
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_T =>
            testChar := "T     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_P =>
            testChar := "P     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'0',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_D =>
            testChar := "D     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'0',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_K =>
            testChar := "K     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'0',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_Q =>
            testChar := "Q     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'0',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_R =>
            testChar := "R     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'0',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_L =>
            testChar := "L     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'0',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_M =>
            testChar := "2     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'0',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_N =>
            testChar := "N     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'0',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'1',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_U =>
            testChar := "U     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_B =>
            testChar := "B     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'0',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

         when BCD.BCD_F =>
            testChar := "F     ";   
            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'0',testName,testChar & "-S F A");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");

            -- Set the Unit F Latch
            
            PS_I_RING_HDL_BUS(5) <= '1';
            wait for 30 ns;
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latch 1");
            PS_PERCENT_OR_COML_AT <= '1';
            wait for 30 ns;
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'1',testName,testChar & "+S F Latch 2");
            -- Should stay latched
            PS_I_RING_HDL_BUS(5) <= '0';
            PS_PERCENT_OR_COML_AT <= '0';
            wait for 30 ns;
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'1',testName,testChar & "+S F Latch 3");
            MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON <= '0';
            wait for 30 ns;
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301 1");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405 1");
            MS_E_CH_R_DOT_B_DOT_C_DOT_I_DOT_ON <= '1';
            wait for 30 ns;
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'0',testName,testChar & "-C F*1301 2");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'0',testName,testChar & "-C F*1405 2");
                        
            -- Reset the latch  ;)
            
            PS_E_CH_ANY_STATUS_ON <= '1';
            PS_E_CH_STATUS_SAMPLE_A_DELAY <= '1';
            wait for 30 ns;
            PS_E_CH_ANY_STATUS_ON <= '0';
            PS_E_CH_STATUS_SAMPLE_A_DELAY <= '0';
                                                
         when others =>
            testChar := "OTHER ";

            check1(PS_E_CH_SELECT_UNIT_1,'0',testName,testChar & "+S 1");
            check1(MS_E_CH_SELECT_UNIT_1,'1',testName,testChar & "-S 1");
            check1(MC_UNIT_1_SELECT_TO_I_O,'1',testName,testChar & "-C 1");
            check1(PS_E_CH_SELECT_UNIT_2,'0',testName,testChar & "+S 2");
            check1(MS_E_CH_SELECT_UNIT_2,'1',testName,testChar & "-S 2");
            check1(MC_UNIT_2_SELECT_TO_I_O,'1',testName,testChar & "-C 2");
            check1(MS_E_CH_SELECT_UNIT_4,'1',testName,testChar & "-S 4");
            check1(MC_UNIT_4_SELECT_TO_I_O,'1',testName,testChar & "-C 4");
            check1(PS_E_CH_SELECT_UNIT_T,'0',testName,testChar & "+S T");
            check1(MS_E_CH_SELECT_UNIT_T,'1',testName,testChar & "-S T");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_OUTPUT,'0',testName,testChar & "+S T.Output");
            check1(PS_E_CH_SELECT_UNIT_T_DOT_INPUT,'0',testName,testChar & "+S T.Input");
            check1(MS_E_CH_SELECT_UNIT_T_DOT_INPUT,'1',testName,testChar & "-S T.Input");
            check1(PS_E_CH_SELECT_UNIT_8,'0',testName,testChar & "+S 8");
            check1(MC_UNIT_8_SEL_TO_I_O,'1',testName,testChar & "-C 8");
            check1(MC_SELECT_UNIT_P,'1',testName,testChar & "-C P");
            check1(MC_SELECT_UNIT_D,'1',testName,testChar & "-C D");
            check1(MS_E_CH_SELECT_UNIT_K,'1',testName,testChar & "-S K");
            check1(MC_SELECT_UNIT_Q,'1',testName,testChar & "-C Q");
            check1(MC_E_CH_SELECT_UNIT_R,'1',testName,testChar & "-C R");
            check1(MC_SELECT_UNIT_L,'1',testName,testChar & "-C L");
            check1(MC_E_CH_SELECT_UNIT_M,'1',testName,testChar & "-C M");
            check1(MC_SELECT_UNIT_N,'1',testName,testChar & "-C M");
            check1(PS_E_CH_SELECT_UNIT_U,'0',testName,testChar & "+S U");
            check1(MS_E_CH_SELECT_UNIT_U,'1',testName,testChar & "-S U");
            check1(PS_E_CH_SELECT_UNIT_B,'0',testName,testChar & "+S B");
            check1(MS_E_CH_SELECT_UNIT_B,'1',testName,testChar & "SS B");
            check1(MC_ODD_PARITY_TO_TAPE_STAR_E_CH,'1',testName,testChar & "-C Tape Odd");
            check1(PS_E_CH_SELECT_UNIT_F,'0',testName,testChar & "+S F");
            check1(MS_E_CH_SELECT_UNIT_F,'1',testName,testChar & "-S F");
            check1(MS_E_CH_SELECT_UNIT_F_A,'1',testName,testChar & "-S F A");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1301,'1',testName,testChar & "-C F*1301");
            check1(MC_UNIT_SEL_F_STAR_E_CH_1405,'1',testName,testChar & "-C F*1405");
   
            check1(PS_E_CH_SELECT_TAPE_DATA,'0',testName,testChar & "+S Tape");  -- B or U
            check1(MS_E_CH_SELECT_TAPE_DATA,'1',testName,testChar & "-S Tape");  -- B or U
            check1(PS_E_CH_BUFFER_SELECT,'0',testName,testChar & "+S Buffer");
            check1(PS_E_CH_SEL_UNIT_F_LATCHED,'0',testName,testChar & "+S F Latched");

      end case;
   end loop;      
   

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
