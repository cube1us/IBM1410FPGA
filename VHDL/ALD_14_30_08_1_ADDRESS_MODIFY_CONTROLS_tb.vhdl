-- Test Bench VHDL for IBM SMS ALD page 14.30.08.1
-- Title: ADDRESS MODIFY CONTROLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 8/29/2020 12:50:30 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_30_08_1_ADDRESS_MODIFY_CONTROLS_tb is
end ALD_14_30_08_1_ADDRESS_MODIFY_CONTROLS_tb;

architecture behavioral of ALD_14_30_08_1_ADDRESS_MODIFY_CONTROLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_30_08_1_ADDRESS_MODIFY_CONTROLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_SET_MODIFY_CTRL_LATCHES:	 in STD_LOGIC;
		PS_MINUS_ONE_28_LINE:	 in STD_LOGIC;
		MS_RESET_ADDR_MOD_CTRL_LATCH:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_3_JRJ:	 in STD_LOGIC;
		PS_LOGIC_GATE_A_1:	 in STD_LOGIC;
		PS_ADDR_MOD_SET_TO_MINUS_ONE:	 in STD_LOGIC;
		PS_LOGIC_GATE_A_OR_R:	 in STD_LOGIC;
		PS_ADDR_MOD_SET_TO_1_STAR_1412_19:	 in STD_LOGIC;
		MY_1ST_CLOCK_PULSE:	 in STD_LOGIC;
		PY_RESET_ADDR_MOD_LATCHES:	 in STD_LOGIC;
		PS_BORROW_LATCH_ON:	 out STD_LOGIC;
		PY_MODIFY_BY_MINUS_ONE:	 out STD_LOGIC;
		MY_MODIFY_BY_MINUS_ONE:	 out STD_LOGIC;
		MS_MODIFY_BY_MINUS_ONE:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_SET_MODIFY_CTRL_LATCHES: STD_LOGIC := '0';
	signal PS_MINUS_ONE_28_LINE: STD_LOGIC := '0';
	signal MS_RESET_ADDR_MOD_CTRL_LATCH: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_3_JRJ: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_A_1: STD_LOGIC := '0';
	signal PS_ADDR_MOD_SET_TO_MINUS_ONE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_A_OR_R: STD_LOGIC := '0';
	signal PS_ADDR_MOD_SET_TO_1_STAR_1412_19: STD_LOGIC := '0';
	signal MY_1ST_CLOCK_PULSE: STD_LOGIC := '1';
	signal PY_RESET_ADDR_MOD_LATCHES: STD_LOGIC := '0';

	-- Outputs

	signal PS_BORROW_LATCH_ON: STD_LOGIC;
	signal PY_MODIFY_BY_MINUS_ONE: STD_LOGIC;
	signal MY_MODIFY_BY_MINUS_ONE: STD_LOGIC;
	signal MS_MODIFY_BY_MINUS_ONE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_30_08_1_ADDRESS_MODIFY_CONTROLS port map(
		FPGA_CLK => FPGA_CLK,
		PS_SET_MODIFY_CTRL_LATCHES => PS_SET_MODIFY_CTRL_LATCHES,
		PS_MINUS_ONE_28_LINE => PS_MINUS_ONE_28_LINE,
		MS_RESET_ADDR_MOD_CTRL_LATCH => MS_RESET_ADDR_MOD_CTRL_LATCH,
		PS_2ND_CLOCK_PULSE_3_JRJ => PS_2ND_CLOCK_PULSE_3_JRJ,
		PS_LOGIC_GATE_A_1 => PS_LOGIC_GATE_A_1,
		PS_ADDR_MOD_SET_TO_MINUS_ONE => PS_ADDR_MOD_SET_TO_MINUS_ONE,
		PS_LOGIC_GATE_A_OR_R => PS_LOGIC_GATE_A_OR_R,
		PS_ADDR_MOD_SET_TO_1_STAR_1412_19 => PS_ADDR_MOD_SET_TO_1_STAR_1412_19,
		MY_1ST_CLOCK_PULSE => MY_1ST_CLOCK_PULSE,
		PY_RESET_ADDR_MOD_LATCHES => PY_RESET_ADDR_MOD_LATCHES,
		PS_BORROW_LATCH_ON => PS_BORROW_LATCH_ON,
		PY_MODIFY_BY_MINUS_ONE => PY_MODIFY_BY_MINUS_ONE,
		MY_MODIFY_BY_MINUS_ONE => MY_MODIFY_BY_MINUS_ONE,
		MS_MODIFY_BY_MINUS_ONE => MS_MODIFY_BY_MINUS_ONE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

--  1st and 2nd cp are merely complments of each other....

PS_2ND_CLOCK_PULSE_3_JRJ <= MY_1ST_CLOCK_PULSE;

--  In the real world, this signal wraps around back to reset

PS_SET_MODIFY_CTRL_LATCHES <= PY_MODIFY_BY_MINUS_ONE;

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   constant clockPeriod: time := 100 ns;   
   

   begin

   -- Your test bench code
   
   testName := "14.30.08.1        ";
   
   PY_RESET_ADDR_MOD_LATCHES <= '1';
   wait for 30 ns; -- Ctrl latch does not reset yet
   MS_RESET_ADDR_MOD_CTRL_LATCH <= '0';
   wait for 30 ns;
   PY_RESET_ADDR_MOD_LATCHES <= '0';
   MS_RESET_ADDR_MOD_CTRL_LATCH <= '1';
   wait for 30 ns;
   
   -- run the clocks.  stupid vhdl won't let you assign signals in procedure 8(
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"SA");
   check1(PS_BORROW_LATCH_ON,'0',testName,"SB");
   check1(MY_MODIFY_BY_MINUS_ONE,'1',testName,"SC");
   check1(MS_MODIFY_BY_MINUS_ONE,'1',testName,"SD");
   
   -- Also, manually check output of latch at 2B/3B resets
   
   -- run the clocks again.  Nothing should change
   
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"SE");
   check1(PS_BORROW_LATCH_ON,'0',testName,"SF");
   check1(MY_MODIFY_BY_MINUS_ONE,'1',testName,"SG");
   check1(MS_MODIFY_BY_MINUS_ONE,'1',testName,"SH");
   
   PS_LOGIC_GATE_A_1 <= '0';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '1';
   -- Nothing should happen   
   MY_1ST_CLOCK_PULSE <= '0';
   wait for 100 ns;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for 100 ns;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1A");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for 100 ns;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for 100 ns;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1B");
   
   PS_LOGIC_GATE_A_1 <= '1';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '0';
   -- Nothing should happen   
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1C");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1D");

   PS_LOGIC_GATE_A_1 <= '1';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '1';
   -- This should set the latch
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1E");
   MY_1ST_CLOCK_PULSE <= '0';
   -- At this point, the -1 28 line should come up if appropriate
   -- As it is essentially derived from the Mod by +1 latch
   PS_MINUS_ONE_28_LINE <= '1';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"1F");

   PS_LOGIC_GATE_A_1 <= '0';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '0';
   -- Will anything change?
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"1G");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"1H");
   check1(MY_MODIFY_BY_MINUS_ONE,'0',testName,"1HA");
   check1(PS_BORROW_LATCH_ON,'1',testName,"1HB");
   check1(MS_MODIFY_BY_MINUS_ONE,'0',testName,"1HC");
   
   -- With address mod done, the -1 28 line goes away, and things should reset

   PS_MINUS_ONE_28_LINE <= '0';
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"1I");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1J");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"1K");
   
   -- Now, run the test again, but this time the 28 line does not set
   -- that should cause everything to reset right away
   
   PS_LOGIC_GATE_A_1 <= '1';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '1';
   -- This should set the latch
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"2A");
   MY_1ST_CLOCK_PULSE <= '0';
   -- But this time, the 18 line is not conditioned
   PS_MINUS_ONE_28_LINE <= '0';
   PS_LOGIC_GATE_A_1 <= '0';
   PS_ADDR_MOD_SET_TO_MINUS_ONE <= '0';   
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"2B");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"2C");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"2D");
   
   -- Special set for the 1412-19
   
   PS_ADDR_MOD_SET_TO_1_STAR_1412_19 <= '1';
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"3A");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"3B");
   PS_LOGIC_GATE_A_OR_R <= '1';
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   PS_LOGIC_GATE_A_OR_R <= '0'; -- On to the next logic gate...
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"3C");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'1',testName,"3D");
   -- Again, without the 18 Line, it resets
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"3E");
   MY_1ST_CLOCK_PULSE <= '0';
   wait for clockPeriod;
   MY_1ST_CLOCK_PULSE <= '1';
   wait for clockPeriod;
   check1(PY_MODIFY_BY_MINUS_ONE,'0',testName,"3E");   
   
   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
