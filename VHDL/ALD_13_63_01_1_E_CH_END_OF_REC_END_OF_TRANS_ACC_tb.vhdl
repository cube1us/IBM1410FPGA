-- Test Bench VHDL for IBM SMS ALD page 13.63.01.1
-- Title: E CH END OF REC+END OF TRANS-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/31/2020 9:58:28 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_63_01_1_E_CH_END_OF_REC_END_OF_TRANS_ACC_tb is
end ALD_13_63_01_1_E_CH_END_OF_REC_END_OF_TRANS_ACC_tb;

architecture behavioral of ALD_13_63_01_1_E_CH_END_OF_REC_END_OF_TRANS_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_13_63_01_1_E_CH_END_OF_REC_END_OF_TRANS_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_E_CH_LAST_INPUT_CYCLE:	 in STD_LOGIC;
		PS_WRAP_AROUND_CONDITIONS:	 in STD_LOGIC;
		PS_E_CYCLE:	 in STD_LOGIC;
		PS_B_CH_GROUP_MARK_DOT_WM:	 in STD_LOGIC;
		MS_W_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_1:	 in STD_LOGIC;
		MS_R_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		MS_E_CH_2ND_ADDR_TRF:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		MS_1401_CARD_PRINT_IN_PROC:	 in STD_LOGIC;
		PS_END_OF_RECORD_STAR_1311:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_OR_W:	 in STD_LOGIC;
		PS_E_CH_LAST_INPUT_CYCLE:	 in STD_LOGIC;
		PS_LOGIC_GATE_W:	 in STD_LOGIC;
		MS_E_CH_END_OF_2ND_ADDR_TRF:	 in STD_LOGIC;
		PS_E_CH_SIF_SENSE_OR_CONTROL:	 in STD_LOGIC;
		PS_UNIT_CTRL_OP_CODE:	 in STD_LOGIC;
		PS_E_CH_STATUS_SAMPLE_A:	 in STD_LOGIC;
		MS_E_CH_RESET:	 in STD_LOGIC;
		PS_INT_END_OF_XFER_STAR_1311:	 in STD_LOGIC;
		PS_E_CH_EXT_END_OF_TRANSFER:	 in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE:	 in STD_LOGIC;
		PS_E1_REG_FULL:	 in STD_LOGIC;
		PS_E2_REG_FULL:	 in STD_LOGIC;
		PS_E_CH_END_OF_RECORD_LATCH:	 out STD_LOGIC;
		MS_E_CH_INT_END_OF_TRANSFER:	 out STD_LOGIC;
		PS_E_CH_INT_END_OF_TRANSFER:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_E_CH_LAST_INPUT_CYCLE: STD_LOGIC := '1';
	signal PS_WRAP_AROUND_CONDITIONS: STD_LOGIC := '0';
	signal PS_E_CYCLE: STD_LOGIC := '0';
	signal PS_B_CH_GROUP_MARK_DOT_WM: STD_LOGIC := '0';
	signal MS_W_SYMBOL_OP_MODIFIER: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_F_1: STD_LOGIC := '0';
	signal MS_R_SYMBOL_OP_MODIFIER: STD_LOGIC := '1';
	signal MS_E_CH_2ND_ADDR_TRF: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal MS_1401_CARD_PRINT_IN_PROC: STD_LOGIC := '1';
	signal PS_END_OF_RECORD_STAR_1311: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_F_OR_W: STD_LOGIC := '0';
	signal PS_E_CH_LAST_INPUT_CYCLE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_W: STD_LOGIC := '0';
	signal MS_E_CH_END_OF_2ND_ADDR_TRF: STD_LOGIC := '1';
	signal PS_E_CH_SIF_SENSE_OR_CONTROL: STD_LOGIC := '0';
	signal PS_UNIT_CTRL_OP_CODE: STD_LOGIC := '0';
	signal PS_E_CH_STATUS_SAMPLE_A: STD_LOGIC := '0';
	signal MS_E_CH_RESET: STD_LOGIC := '1';
	signal PS_INT_END_OF_XFER_STAR_1311: STD_LOGIC := '0';
	signal PS_E_CH_EXT_END_OF_TRANSFER: STD_LOGIC := '0';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_E1_REG_FULL: STD_LOGIC := '0';
	signal PS_E2_REG_FULL: STD_LOGIC := '0';

	-- Outputs

	signal PS_E_CH_END_OF_RECORD_LATCH: STD_LOGIC;
	signal MS_E_CH_INT_END_OF_TRANSFER: STD_LOGIC;
	signal PS_E_CH_INT_END_OF_TRANSFER: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_13_63_01_1_E_CH_END_OF_REC_END_OF_TRANS_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_E_CH_LAST_INPUT_CYCLE => MS_E_CH_LAST_INPUT_CYCLE,
		PS_WRAP_AROUND_CONDITIONS => PS_WRAP_AROUND_CONDITIONS,
		PS_E_CYCLE => PS_E_CYCLE,
		PS_B_CH_GROUP_MARK_DOT_WM => PS_B_CH_GROUP_MARK_DOT_WM,
		MS_W_SYMBOL_OP_MODIFIER => MS_W_SYMBOL_OP_MODIFIER,
		PS_LOGIC_GATE_F_1 => PS_LOGIC_GATE_F_1,
		MS_R_SYMBOL_OP_MODIFIER => MS_R_SYMBOL_OP_MODIFIER,
		MS_E_CH_2ND_ADDR_TRF => MS_E_CH_2ND_ADDR_TRF,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		MS_1401_CARD_PRINT_IN_PROC => MS_1401_CARD_PRINT_IN_PROC,
		PS_END_OF_RECORD_STAR_1311 => PS_END_OF_RECORD_STAR_1311,
		PS_LOGIC_GATE_F_OR_W => PS_LOGIC_GATE_F_OR_W,
		PS_E_CH_LAST_INPUT_CYCLE => PS_E_CH_LAST_INPUT_CYCLE,
		PS_LOGIC_GATE_W => PS_LOGIC_GATE_W,
		MS_E_CH_END_OF_2ND_ADDR_TRF => MS_E_CH_END_OF_2ND_ADDR_TRF,
		PS_E_CH_SIF_SENSE_OR_CONTROL => PS_E_CH_SIF_SENSE_OR_CONTROL,
		PS_UNIT_CTRL_OP_CODE => PS_UNIT_CTRL_OP_CODE,
		PS_E_CH_STATUS_SAMPLE_A => PS_E_CH_STATUS_SAMPLE_A,
		MS_E_CH_RESET => MS_E_CH_RESET,
		PS_INT_END_OF_XFER_STAR_1311 => PS_INT_END_OF_XFER_STAR_1311,
		PS_E_CH_EXT_END_OF_TRANSFER => PS_E_CH_EXT_END_OF_TRANSFER,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_E1_REG_FULL => PS_E1_REG_FULL,
		PS_E2_REG_FULL => PS_E2_REG_FULL,
		PS_E_CH_END_OF_RECORD_LATCH => PS_E_CH_END_OF_RECORD_LATCH,
		MS_E_CH_INT_END_OF_TRANSFER => MS_E_CH_INT_END_OF_TRANSFER,
		PS_E_CH_INT_END_OF_TRANSFER => PS_E_CH_INT_END_OF_TRANSFER);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "13.63.01.1        ";
   
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"1A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"1B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"1C");
   PS_E_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"1D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"1E");
   PS_B_CH_GROUP_MARK_DOT_WM <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"1F");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"1G");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"1H");
   PS_LOGIC_GATE_W <= '1';
   wait for 30 ns;
   -- Latches should be set
   PS_E_CYCLE <= '0';
   PS_B_CH_GROUP_MARK_DOT_WM <= '0';
   PS_LOGIC_GATE_W <= '0';
   wait for 30 ns;
   -- Latches should still be set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"1I");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"1J");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"1K");

   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"1L");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"1M");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"1N");
   
   PS_UNIT_CTRL_OP_CODE <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"2A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"2B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"2C");
   PS_E_CH_STATUS_SAMPLE_A <= '1';
   wait for 30 ns;  -- Latches should set
   PS_UNIT_CTRL_OP_CODE <= '0';
   PS_E_CH_STATUS_SAMPLE_A <= '0';
   wait for 30 ns; -- Latches should still be set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"2D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"2E");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"2F");
   
   -- Reset a different way
   MS_E_CH_END_OF_2ND_ADDR_TRF <= '0';
   wait for 90 ns;
   MS_E_CH_END_OF_2ND_ADDR_TRF <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"2G");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"2H");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"2I");
   
   MS_1401_CARD_PRINT_IN_PROC <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3C");
   PS_B_CH_GROUP_MARK_DOT_WM <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3E");
   PS_LOGIC_GATE_F_1 <= '1';   
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3F");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3G");
   PS_E_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3H");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3J");
   MS_1401_CARD_PRINT_IN_PROC <= '0';
   MS_R_SYMBOL_OP_MODIFIER <= '0';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3K");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3L");
   MS_1401_CARD_PRINT_IN_PROC <= '1';
   wait for 30 ns; -- Latches should set
   MS_R_SYMBOL_OP_MODIFIER <= '1';
   wait for 30 ns; -- Latches should still be set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"3M");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3N");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3O");
   -- Reset, but leave most of the signals still active
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3P");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3Q");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3R");
   MS_W_SYMBOL_OP_MODIFIER <= '0';
   wait for 30 ns; -- Latches should be set
   MS_W_SYMBOL_OP_MODIFIER <= '1';
   wait for 30 ns; -- Latches should still be set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"3S");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3T");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3U");
   -- Reset, but leave most of the signals still active
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3V");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3W");
   MS_E_CH_2ND_ADDR_TRF <= '0';
   wait for 30 ns; -- Set the latches   
   MS_E_CH_2ND_ADDR_TRF <= '1';
   wait for 30 ns; -- Latches should still be set   
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"3X");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3Y");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3Z");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3AA");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3AB");
   PS_E_CH_SIF_SENSE_OR_CONTROL <= '1'; -- Set the latches
   wait for 30 ns;
   PS_E_CH_SIF_SENSE_OR_CONTROL <= '0'; -- Latches should still be set
   wait for 30 ns;   
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"3AC");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"3AD");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3AE");   
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   MS_1401_CARD_PRINT_IN_PROC <= '1';
   PS_B_CH_GROUP_MARK_DOT_WM <= '0';
   PS_LOGIC_GATE_F_1 <= '0';   
   PS_E_CYCLE <= '0';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"3AF");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"3AG");
   
   MS_E_CH_LAST_INPUT_CYCLE <= '0';
   PS_E_CYCLE <= '1';
   PS_WRAP_AROUND_CONDITIONS <= '1';
   PS_LOGIC_GATE_F_OR_W <=  '1';
   PS_2ND_CLOCK_PULSE_2 <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"4A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"4B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"4C");
   MS_E_CH_LAST_INPUT_CYCLE <= '1';
   wait for 30 ns;  -- Latches should set
   PS_E_CYCLE <= '0';
   PS_WRAP_AROUND_CONDITIONS <= '0';
   PS_LOGIC_GATE_F_OR_W <=  '0';
   PS_2ND_CLOCK_PULSE_2 <= '0';
   wait for 30 ns;  -- Latches should still be set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"4D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"4E");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"4F");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"4G");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"4H");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"4I");
      
   -- This one sets JUST the end of record latch
   
   PS_END_OF_RECORD_STAR_1311 <= '1';
   wait for 30 ns;
   PS_END_OF_RECORD_STAR_1311 <= '0';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'1',testName,"5A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"5B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"5C");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"5D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"5E");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"5F");
   
   --  The following set JUST the Int End of Transfer Latch
   
   PS_E_CH_LAST_INPUT_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"6A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"6B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"6C");
   PS_LOGIC_GATE_F_OR_W <= '1';
   wait for 30 ns;  -- Latch is set
   PS_LOGIC_GATE_F_OR_W <= '0';
   PS_E_CH_LAST_INPUT_CYCLE <= '0';
   wait for 30 ns;  -- Latch is still set
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"6D");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"6E");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"6F");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"6G");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"6H");

   PS_E_CH_OUTPUT_MODE <= '1';
   PS_E_CH_EXT_END_OF_TRANSFER <= '1';
   PS_E1_REG_FULL <= '1';
   PS_E2_REG_FULL <= '1';
   wait for 30 ns;
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"7A");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"7B");
   PS_2ND_CLOCK_PULSE_2 <= '1'; -- Sets the latch
   wait for 30 ns;
   PS_E_CH_OUTPUT_MODE <= '0';
   PS_E_CH_EXT_END_OF_TRANSFER <= '0';
   PS_E1_REG_FULL <= '0';
   PS_E2_REG_FULL <= '0';
   PS_2ND_CLOCK_PULSE_2 <= '0'; -- Latch should stay set
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"7C");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"7D");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"7E");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"7F");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"7G");
   
   PS_INT_END_OF_XFER_STAR_1311 <= '1';
   wait for 30 ns;
   PS_INT_END_OF_XFER_STAR_1311 <= '0';
   wait for 30 ns;
   check1(PS_E_CH_END_OF_RECORD_LATCH,'0',testName,"8A");
   check1(PS_E_CH_INT_END_OF_TRANSFER,'1',testName,"8B");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'0',testName,"8C");
   -- Reset
   MS_E_CH_RESET <= '0';
   wait for 90 ns;
   MS_E_CH_RESET <= '1';
   wait for 30 ns;
   check1(PS_E_CH_INT_END_OF_TRANSFER,'0',testName,"8D");
   check1(MS_E_CH_INT_END_OF_TRANSFER,'1',testName,"8E");
   
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
