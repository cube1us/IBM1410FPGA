-- Test Bench VHDL for IBM SMS ALD page 42.10.10.1
-- Title: CONSOLE SPEC CHARACTER PRINTOUT
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/26/2020 12:56:12 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_42_10_10_1_CONSOLE_SPEC_CHARACTER_PRINTOUT_tb is
end ALD_42_10_10_1_CONSOLE_SPEC_CHARACTER_PRINTOUT_tb;

architecture behavioral of ALD_42_10_10_1_CONSOLE_SPEC_CHARACTER_PRINTOUT_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_42_10_10_1_CONSOLE_SPEC_CHARACTER_PRINTOUT
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_ALTER_ROUTINE:	 in STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_NORMAL_2:	 in STD_LOGIC;
		PS_CONS_CYCLE_STOP:	 in STD_LOGIC;
		PS_DISPLAY_ROUTINE_2:	 in STD_LOGIC;
		MS_CONS_MX_30_POS:	 in STD_LOGIC;
		PS_CONS_ERROR_STOP:	 in STD_LOGIC;
		MS_CONS_MX_35_POS:	 in STD_LOGIC;
		PS_CONSOLE_READ_OP:	 in STD_LOGIC;
		PS_CONSOLE_WRITE_OP:	 in STD_LOGIC;
		PS_CONS_NORMAL_STOP:	 in STD_LOGIC;
		PS_ADDRESS_SET_ROUTINE:	 in STD_LOGIC;
		MV_CONS_CE_POUND_PRINT:	 in STD_LOGIC;
		MS_SPECIAL_CHAR_B:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_C:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_D:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_E:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_A_C_E_I:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_I:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_R:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_S:	 out STD_LOGIC;
		MS_SPECIAL_CHAR_POUND:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_ALTER_ROUTINE: STD_LOGIC := '0';
	signal MV_CONS_ADDRESS_ENTRY_NORMAL_2: STD_LOGIC := '1';
	signal PS_CONS_CYCLE_STOP: STD_LOGIC := '0';
	signal PS_DISPLAY_ROUTINE_2: STD_LOGIC := '0';
	signal MS_CONS_MX_30_POS: STD_LOGIC := '1';
	signal PS_CONS_ERROR_STOP: STD_LOGIC := '0';
	signal MS_CONS_MX_35_POS: STD_LOGIC := '1';
	signal PS_CONSOLE_READ_OP: STD_LOGIC := '0';
	signal PS_CONSOLE_WRITE_OP: STD_LOGIC := '0';
	signal PS_CONS_NORMAL_STOP: STD_LOGIC := '0';
	signal PS_ADDRESS_SET_ROUTINE: STD_LOGIC := '0';
	signal MV_CONS_CE_POUND_PRINT: STD_LOGIC := '1';

	-- Outputs

	signal MS_SPECIAL_CHAR_B: STD_LOGIC;
	signal MS_SPECIAL_CHAR_C: STD_LOGIC;
	signal MS_SPECIAL_CHAR_D: STD_LOGIC;
	signal MS_SPECIAL_CHAR_E: STD_LOGIC;
	signal MS_SPECIAL_CHAR_A_C_E_I: STD_LOGIC;
	signal MS_SPECIAL_CHAR_I: STD_LOGIC;
	signal MS_SPECIAL_CHAR_R: STD_LOGIC;
	signal MS_SPECIAL_CHAR_S: STD_LOGIC;
	signal MS_SPECIAL_CHAR_POUND: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_42_10_10_1_CONSOLE_SPEC_CHARACTER_PRINTOUT port map(
		FPGA_CLK => FPGA_CLK,
		PS_ALTER_ROUTINE => PS_ALTER_ROUTINE,
		MV_CONS_ADDRESS_ENTRY_NORMAL_2 => MV_CONS_ADDRESS_ENTRY_NORMAL_2,
		PS_CONS_CYCLE_STOP => PS_CONS_CYCLE_STOP,
		PS_DISPLAY_ROUTINE_2 => PS_DISPLAY_ROUTINE_2,
		MS_CONS_MX_30_POS => MS_CONS_MX_30_POS,
		PS_CONS_ERROR_STOP => PS_CONS_ERROR_STOP,
		MS_CONS_MX_35_POS => MS_CONS_MX_35_POS,
		PS_CONSOLE_READ_OP => PS_CONSOLE_READ_OP,
		PS_CONSOLE_WRITE_OP => PS_CONSOLE_WRITE_OP,
		PS_CONS_NORMAL_STOP => PS_CONS_NORMAL_STOP,
		PS_ADDRESS_SET_ROUTINE => PS_ADDRESS_SET_ROUTINE,
		MV_CONS_CE_POUND_PRINT => MV_CONS_CE_POUND_PRINT,
		MS_SPECIAL_CHAR_B => MS_SPECIAL_CHAR_B,
		MS_SPECIAL_CHAR_C => MS_SPECIAL_CHAR_C,
		MS_SPECIAL_CHAR_D => MS_SPECIAL_CHAR_D,
		MS_SPECIAL_CHAR_E => MS_SPECIAL_CHAR_E,
		MS_SPECIAL_CHAR_A_C_E_I => MS_SPECIAL_CHAR_A_C_E_I,
		MS_SPECIAL_CHAR_I => MS_SPECIAL_CHAR_I,
		MS_SPECIAL_CHAR_R => MS_SPECIAL_CHAR_R,
		MS_SPECIAL_CHAR_S => MS_SPECIAL_CHAR_S,
		MS_SPECIAL_CHAR_POUND => MS_SPECIAL_CHAR_POUND);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.49.04.1        X";  -- NOTE:  Remove X when editing to set correct length!

   for tt in 0 to 2**25 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);
      p := tv(14);
      q := tv(15);
      r := tv(16);
      s := tv(17);
      t := tv(18);
      u := tv(19);
      v := tv(20);
      w := tv(21);
      x := tv(22);
      y := tv(23);
      z := tv(24);

      
      wait for 30 ns;
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
