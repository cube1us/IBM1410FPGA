-- Test BenchVHDL for IBM SMS ALD group BCDTo2Of5NumericTranslator
-- Title: BCDTo2Of5NumericTranslator
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 8/30/2020 10:17:00 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity BCDTo2Of5NumericTranslator_tb is
end BCDTo2Of5NumericTranslator_tb;

architecture behavioral of BCDTo2Of5NumericTranslator_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component BCDTo2Of5NumericTranslator
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_ASSEMBLY_CH_NU_C_BIT: in STD_LOGIC;
		PS_ASSEMBLY_CH_NOT_NU_C_BIT: in STD_LOGIC;
		PS_SET_NU_TO_ADDR_CH: in STD_LOGIC;
		PS_1ST_ADDRESS: in STD_LOGIC;
		MS_1401_MODE_1: in STD_LOGIC;
		MS_PERCENT_TYPE_OP_CODES: in STD_LOGIC;
		MS_ASSEMBLY_CH_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		PS_ASSEMBLY_CH_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		MS_ADDR_CH_NU_TSLTR_1_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_3_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_5_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_7_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_2_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_4_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_6_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_8_LINE: out STD_LOGIC;
		MS_PERCENT_CONVERSION: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_9_LINE: out STD_LOGIC;
		MS_ADDR_CH_NU_TSLTR_0_LINE: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_NU_C_BIT: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_NOT_NU_C_BIT: STD_LOGIC := '0';
	signal PS_SET_NU_TO_ADDR_CH: STD_LOGIC := '0';
	signal PS_1ST_ADDRESS: STD_LOGIC := '0';
	signal MS_1401_MODE_1: STD_LOGIC := '1';
	signal MS_PERCENT_TYPE_OP_CODES: STD_LOGIC := '1';
	signal MS_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "1111111";
	signal PS_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";

	-- Outputs

	signal MS_ADDR_CH_NU_TSLTR_1_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_3_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_5_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_7_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_2_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_4_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_6_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_8_LINE: STD_LOGIC;
	signal MS_PERCENT_CONVERSION: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_9_LINE: STD_LOGIC;
	signal MS_ADDR_CH_NU_TSLTR_0_LINE: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: BCDTo2Of5NumericTranslator port map(
		FPGA_CLK => FPGA_CLK,
		PS_ASSEMBLY_CH_NU_C_BIT => PS_ASSEMBLY_CH_NU_C_BIT,
		PS_ASSEMBLY_CH_NOT_NU_C_BIT => PS_ASSEMBLY_CH_NOT_NU_C_BIT,
		PS_SET_NU_TO_ADDR_CH => PS_SET_NU_TO_ADDR_CH,
		PS_1ST_ADDRESS => PS_1ST_ADDRESS,
		MS_1401_MODE_1 => MS_1401_MODE_1,
		MS_PERCENT_TYPE_OP_CODES => MS_PERCENT_TYPE_OP_CODES,
		MS_ASSEMBLY_CH_BUS => MS_ASSEMBLY_CH_BUS,
		PS_ASSEMBLY_CH_BUS => PS_ASSEMBLY_CH_BUS,
		MS_ADDR_CH_NU_TSLTR_1_LINE => MS_ADDR_CH_NU_TSLTR_1_LINE,
		MS_ADDR_CH_NU_TSLTR_3_LINE => MS_ADDR_CH_NU_TSLTR_3_LINE,
		MS_ADDR_CH_NU_TSLTR_5_LINE => MS_ADDR_CH_NU_TSLTR_5_LINE,
		MS_ADDR_CH_NU_TSLTR_7_LINE => MS_ADDR_CH_NU_TSLTR_7_LINE,
		MS_ADDR_CH_NU_TSLTR_2_LINE => MS_ADDR_CH_NU_TSLTR_2_LINE,
		MS_ADDR_CH_NU_TSLTR_4_LINE => MS_ADDR_CH_NU_TSLTR_4_LINE,
		MS_ADDR_CH_NU_TSLTR_6_LINE => MS_ADDR_CH_NU_TSLTR_6_LINE,
		MS_ADDR_CH_NU_TSLTR_8_LINE => MS_ADDR_CH_NU_TSLTR_8_LINE,
		MS_PERCENT_CONVERSION => MS_PERCENT_CONVERSION,
		MS_ADDR_CH_NU_TSLTR_9_LINE => MS_ADDR_CH_NU_TSLTR_9_LINE,
		MS_ADDR_CH_NU_TSLTR_0_LINE => MS_ADDR_CH_NU_TSLTR_0_LINE);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

MS_ASSEMBLY_CH_BUS <= NOT PS_ASSEMBLY_CH_BUS;
PS_ASSEMBLY_CH_NOT_NU_C_BIT <= NOT PS_ASSEMBLY_CH_NU_C_BIT; 

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable testVector: std_logic_vector(8 downto 0);
   variable s: std_logic;
   variable ch: std_logic_vector(6 downto 0);
   variable c: std_logic;

   begin

   -- Your test bench code
   
   testName := "14.42.%%.1        ";
   
   for i in 0 to 511 loop
      testVector := std_logic_vector(to_unsigned(i,testVector'length));
      ch := testVector(6 downto 0);
      PS_ASSEMBLY_CH_BUS <= ch;
      c := testVector(7);
      PS_ASSEMBLY_CH_NU_C_BIT <= c; 
      s := testVector(8);
      PS_SET_NU_TO_ADDR_CH <= s;
      wait for 30 ns;
      
      check1(MS_ADDR_CH_NU_TSLTR_1_LINE,NOT(s and not c and ch(HDL_1_BIT) and not ch(HDL_2_BIT) and 
         not ch(HDL_4_BIT) and not ch(HDL_8_BIT)),testName,"1 Line");

      check1(MS_ADDR_CH_NU_TSLTR_3_LINE,NOT(s and c and ch(HDL_1_BIT) and ch(HDL_2_BIT) and
         not ch(HDL_4_BIT) and not ch(HDL_8_BIT)),testName,"3 Line");  
         
      check1(MS_ADDR_CH_NU_TSLTR_5_LINE,NOT(s and c and ch(HDL_1_BIT) and NOT ch(HDL_2_BIT) and
         ch(HDL_4_BIT) and NOT ch(HDL_8_BIT)),testName,"5 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_7_LINE,NOT(s and not c and ch(HDL_1_BIT) and ch(HDL_2_BIT) and
         ch(HDL_4_BIT) and NOT ch(HDL_8_BIT)),testName,"7 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_2_LINE,NOT(s and not c and not ch(HDL_1_BIT) and ch(HDL_2_BIT) and
         not ch(HDL_4_BIT) and not ch(HDL_8_BIT)),testName,"2 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_4_LINE,NOT(s and not c and not ch(HDL_1_BIT) and
         not ch(HDL_2_BIT) and ch(HDL_4_BIT) and not ch(HDL_8_BIT)),testName,"4 line");
         
      check1(MS_ADDR_CH_NU_TSLTR_6_LINE,NOT(s and c and not ch(HDL_1_BIT) and ch(HDL_2_BIT) and
         ch(HDL_4_BIT) and not ch(HDL_8_BIT)),testName,"6 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_8_LINE,NOT(s and not c and NOT ch(HDL_1_BIT) and
         not ch(HDL_2_BIT) and not ch(HDL_4_BIT) and ch(HDL_8_BIT)),testName,"8 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_9_LINE,NOT(s and c and ch(HDL_1_BIT) and 
         not ch(HDL_2_BIT) and not ch(HDL_4_BIT) and ch(HDL_8_BIT)),testName,"9 Line");
         
      check1(MS_ADDR_CH_NU_TSLTR_0_LINE,NOT(s and c and not ch(HDL_1_BIT) and ch(HDL_2_BIT) and
         not ch(HDL_4_BIT) and ch(HDL_8_BIT)),testName,"Line 0");
         
      for pct in std_logic range '0' to '1' loop
         MS_PERCENT_TYPE_OP_CODES <= not pct;
         for i1401 in std_logic range '0' to '1' loop
            MS_1401_MODE_1 <= not i1401;
            for fa in std_logic range '0' to '1' loop
               PS_1ST_ADDRESS <= fa;            
               wait for 10 ns; -- Shorten test time - this is simple combinatorial
                  check1(MS_PERCENT_CONVERSION,NOT(s and c and not ch(HDL_1_BIT) and
                     not ch(HDL_2_BIT) and ch(HDL_4_BIT) and ch(HDL_8_BIT) and fa and
                     (pct or i1401)),testName,"% Conv");
            end loop;
         end loop;   
      end loop;
      
   end loop;
   
   assert false report "Simulation Ended NORMALLY(2)" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
