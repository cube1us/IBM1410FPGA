-- Test Bench VHDL for IBM SMS ALD page 14.71.10.1
-- Title: A ADDRESS REG SET CONTROLS-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/7/2020 3:43:31 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_71_10_1_A_ADDRESS_REG_SET_CONTROLS_ACC_tb is
end ALD_14_71_10_1_A_ADDRESS_REG_SET_CONTROLS_ACC_tb;

architecture behavioral of ALD_14_71_10_1_A_ADDRESS_REG_SET_CONTROLS_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_71_10_1_A_ADDRESS_REG_SET_CONTROLS_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_A_CYCLE_CTRL:	 in STD_LOGIC;
		PS_LOGIC_GATE_B_OR_C:	 in STD_LOGIC;
		PS_A_CYCLE:	 in STD_LOGIC;
		PS_LOGIC_GATE_D_OR_E_OR_F:	 in STD_LOGIC;
		PS_1311_SET_AAR:	 in STD_LOGIC;
		PS_INDEX_A_AR:	 in STD_LOGIC;
		PS_INDEX_GATE:	 in STD_LOGIC;
		PS_RD_1ST_ADDR_TO_A_AND_C_AR:	 in STD_LOGIC;
		PS_1ST_ADDRESS:	 in STD_LOGIC;
		PS_INSN_RO_GATE:	 in STD_LOGIC;
		MS_STOPPED_AT_CYCLE_END:	 in STD_LOGIC;
		MV_CONS_MODE_SW_ADDR_SET_MODE:	 in STD_LOGIC;
		SWITCH_ROT_ADDR_ENTRY_DK3:	 in STD_LOGIC_VECTOR(12 downTo 0);
		PS_SET_A_AR:	 out STD_LOGIC;
		MS_INDEX_A_AR_DOT_INDEX_GATE:	 out STD_LOGIC;
		MS_SET_A_AND_C_AR:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_B_AR:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_D_AR:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_C_AR:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_NORMAL_1:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_NORMAL_2:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_F_AR:	 out STD_LOGIC;
		MV_CONS_ADDRESS_ENTRY_E_AR:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_A_CYCLE_CTRL: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_B_OR_C: STD_LOGIC := '0';
	signal PS_A_CYCLE: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_D_OR_E_OR_F: STD_LOGIC := '0';
	signal PS_1311_SET_AAR: STD_LOGIC := '0';
	signal PS_INDEX_A_AR: STD_LOGIC := '0';
	signal PS_INDEX_GATE: STD_LOGIC := '0';
	signal PS_RD_1ST_ADDR_TO_A_AND_C_AR: STD_LOGIC := '0';
	signal PS_1ST_ADDRESS: STD_LOGIC := '0';
	signal PS_INSN_RO_GATE: STD_LOGIC := '0';
	signal MS_STOPPED_AT_CYCLE_END: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_ADDR_SET_MODE: STD_LOGIC := '1';
	signal SWITCH_ROT_ADDR_ENTRY_DK3: STD_LOGIC_VECTOR(12 downTo 0) := "0000000000000";

	-- Outputs

	signal PS_SET_A_AR: STD_LOGIC;
	signal MS_INDEX_A_AR_DOT_INDEX_GATE: STD_LOGIC;
	signal MS_SET_A_AND_C_AR: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_B_AR: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_D_AR: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_C_AR: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_NORMAL_1: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_NORMAL_2: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_F_AR: STD_LOGIC;
	signal MV_CONS_ADDRESS_ENTRY_E_AR: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_71_10_1_A_ADDRESS_REG_SET_CONTROLS_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_A_CYCLE_CTRL => PS_A_CYCLE_CTRL,
		PS_LOGIC_GATE_B_OR_C => PS_LOGIC_GATE_B_OR_C,
		PS_A_CYCLE => PS_A_CYCLE,
		PS_LOGIC_GATE_D_OR_E_OR_F => PS_LOGIC_GATE_D_OR_E_OR_F,
		PS_1311_SET_AAR => PS_1311_SET_AAR,
		PS_INDEX_A_AR => PS_INDEX_A_AR,
		PS_INDEX_GATE => PS_INDEX_GATE,
		PS_RD_1ST_ADDR_TO_A_AND_C_AR => PS_RD_1ST_ADDR_TO_A_AND_C_AR,
		PS_1ST_ADDRESS => PS_1ST_ADDRESS,
		PS_INSN_RO_GATE => PS_INSN_RO_GATE,
		MS_STOPPED_AT_CYCLE_END => MS_STOPPED_AT_CYCLE_END,
		MV_CONS_MODE_SW_ADDR_SET_MODE => MV_CONS_MODE_SW_ADDR_SET_MODE,
		SWITCH_ROT_ADDR_ENTRY_DK3 => SWITCH_ROT_ADDR_ENTRY_DK3,
		PS_SET_A_AR => PS_SET_A_AR,
		MS_INDEX_A_AR_DOT_INDEX_GATE => MS_INDEX_A_AR_DOT_INDEX_GATE,
		MS_SET_A_AND_C_AR => MS_SET_A_AND_C_AR,
		MV_CONS_ADDRESS_ENTRY_B_AR => MV_CONS_ADDRESS_ENTRY_B_AR,
		MV_CONS_ADDRESS_ENTRY_D_AR => MV_CONS_ADDRESS_ENTRY_D_AR,
		MV_CONS_ADDRESS_ENTRY_C_AR => MV_CONS_ADDRESS_ENTRY_C_AR,
		MV_CONS_ADDRESS_ENTRY_NORMAL_1 => MV_CONS_ADDRESS_ENTRY_NORMAL_1,
		MV_CONS_ADDRESS_ENTRY_NORMAL_2 => MV_CONS_ADDRESS_ENTRY_NORMAL_2,
		MV_CONS_ADDRESS_ENTRY_F_AR => MV_CONS_ADDRESS_ENTRY_F_AR,
		MV_CONS_ADDRESS_ENTRY_E_AR => MV_CONS_ADDRESS_ENTRY_E_AR);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(9 downto 0);
   variable a,b,c,d,e,f,g,h,i,j: std_logic;

   begin

   testName := "14.71.10.1        ";
   
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"SA");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"SC");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"SD");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"S Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"S Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"SE");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"SF");
   
   SWITCH_ROT_ADDR_ENTRY_DK3(1) <= '1';
   wait for 30 ns;
   check1(PS_SET_A_AR,'0',testName,"1AA");
   SWITCH_ROT_ADDR_ENTRY_DK3(1) <= '0';
   MS_STOPPED_AT_CYCLE_END <= '0';
   wait for 30 ns;
   check1(PS_SET_A_AR,'0',testName,"1AB");
   SWITCH_ROT_ADDR_ENTRY_DK3(1) <= '1';
   wait for 30 ns;
   check1(PS_SET_A_AR,'1',testName,"1AC");
   SWITCH_ROT_ADDR_ENTRY_DK3(1) <= '0';
   MS_STOPPED_AT_CYCLE_END <= '1'; 
   wait for 30 ns;  

   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"1B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"1C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"1D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"1 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"1 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"1E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"1F");

   SWITCH_ROT_ADDR_ENTRY_DK3(2) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'0',testName,"2B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"2C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"2D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"2 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"2 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"2E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"2F");
      
   SWITCH_ROT_ADDR_ENTRY_DK3(2) <= '0';
   SWITCH_ROT_ADDR_ENTRY_DK3(3) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"3B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'0',testName,"3C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"3D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"3 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"3 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"3E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"3F");

   SWITCH_ROT_ADDR_ENTRY_DK3(3) <= '0';
   SWITCH_ROT_ADDR_ENTRY_DK3(4) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"4B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"4C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'0',testName,"4D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"4 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"4 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"4E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"4F");

   SWITCH_ROT_ADDR_ENTRY_DK3(4) <= '0';
   SWITCH_ROT_ADDR_ENTRY_DK3(5) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"5B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"5C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"5D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'0',testName,"5 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'0',testName,"5 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"5E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"5F");

   SWITCH_ROT_ADDR_ENTRY_DK3(5) <= '0';
   SWITCH_ROT_ADDR_ENTRY_DK3(6) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"6B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"6C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"6D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"6 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"6 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'0',testName,"6E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'1',testName,"6F");
   
   SWITCH_ROT_ADDR_ENTRY_DK3(6) <= '0';
   SWITCH_ROT_ADDR_ENTRY_DK3(7) <= '1';
   wait for 30 ns;
   check1(MV_CONS_ADDRESS_ENTRY_B_AR,'1',testName,"7B");
   check1(MV_CONS_ADDRESS_ENTRY_C_AR,'1',testName,"7C");
   check1(MV_CONS_ADDRESS_ENTRY_D_AR,'1',testName,"7D");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_1,'1',testName,"7 Normal 1");
   check1(MV_CONS_ADDRESS_ENTRY_NORMAL_2,'1',testName,"7 Normal 2");
   check1(MV_CONS_ADDRESS_ENTRY_E_AR,'1',testName,"7E");
   check1(MV_CONS_ADDRESS_ENTRY_F_AR,'0',testName,"7F");

   SWITCH_ROT_ADDR_ENTRY_DK3(7) <= '0';
   
   for t in 0 to 4095 loop
      tv := std_logic_vector(to_unsigned(t,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      
      PS_A_CYCLE_CTRL <= a;
      PS_LOGIC_GATE_B_OR_C <= b;
      PS_A_CYCLE <= c;
      PS_LOGIC_GATE_D_OR_E_OR_F <= d;
      PS_1311_SET_AAR <= e;
      PS_INDEX_A_AR <= f;
      PS_INDEX_GATE <= g;
      PS_RD_1ST_ADDR_TO_A_AND_C_AR <= h;
      PS_1ST_ADDRESS <= i;
      PS_INSN_RO_GATE <= j;
      wait for 30 ns;
      
      check1(MS_SET_A_AND_C_AR,not(h and i and j),testName,"SET A and C AR");
      check1(MS_INDEX_A_AR_DOT_INDEX_GATE,not(f and g),testName,"INDEX A AR.INDEX GATE");
      check1(PS_SET_A_AR,
        e or (a and b) or (c and d) or (f and g) or (h and i and j),testName,"SET A AR");
       
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;
   
   -- Your test bench code

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 1000 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (Timeout)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

end;
