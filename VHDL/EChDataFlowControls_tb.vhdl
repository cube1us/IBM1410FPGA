-- Test BenchVHDL for IBM SMS ALD group EChDataFlowControls
-- Title: EChDataFlowControls
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/26/2020 9:22:03 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity EChDataFlowControls_tb is
end EChDataFlowControls_tb;

architecture behavioral of EChDataFlowControls_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component EChDataFlowControls
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PS_I_CYCLE_1: in STD_LOGIC;
		MS_E_CH_IN_PROCESS: in STD_LOGIC;
		MS_E1_REG_WORD_SEPARATOR: in STD_LOGIC;
		MS_E2_REG_WORD_SEPARATOR: in STD_LOGIC;
		PS_E2_REG_WORD_SEPARATOR: in STD_LOGIC;
		PS_E1_REG_NOT_WM_BIT: in STD_LOGIC;
		PS_E1_REG_WM_BIT: in STD_LOGIC;
		PS_E_CH_INPUT_MODE: in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE: in STD_LOGIC;
		PS_SET_E2_REG: in STD_LOGIC;
		PS_E1_REG_WORD_SEPARATOR: in STD_LOGIC;
		PS_I_CYCLE_DOT_NOT_CR_DISABLE: in STD_LOGIC;
		MS_CONTROL_REG_DISABLE: in STD_LOGIC;
		MS_E_CH_STACKER_SEL_OP_CODE: in STD_LOGIC;
		MS_1401_B_OP_CODE: in STD_LOGIC;
		PS_E_CH_SELECT_TAPE_DATA: in STD_LOGIC;
		PS_E_CH_SELECT_UNIT_F: in STD_LOGIC;
		PS_E_CH_SELECT_ANY_BUFFER: in STD_LOGIC;
		MS_STORAGE_SCAN_LOAD: in STD_LOGIC;
		MS_ALTER_ROUTINE: in STD_LOGIC;
		MS_ADDRESS_SET_ROUTINE: in STD_LOGIC;
		PS_COPY_E1_BCD_TO_E2_REG: out STD_LOGIC;
		MS_SET_E2_WORD_SEPARATOR: out STD_LOGIC;
		PS_COPY_E1_WM_DOT_C_BIT: out STD_LOGIC;
		PS_COPY_INV_E1_WM_DOT_C_BIT: out STD_LOGIC;
		PS_GATE_ASM_CH_TO_E1_INPUT: out STD_LOGIC;
		MS_GATE_TAPE_TO_E1_INPUT: out STD_LOGIC;
		MS_GATE_I_O_SYNC_TO_E1_IN: out STD_LOGIC;
		MS_GATE_E_CH_FILE_TO_E1_IN: out STD_LOGIC;
		MS_GATE_CONSOLE_TO_ASSEMBLY: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_I_CYCLE_1: STD_LOGIC := '0';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal MS_E1_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal MS_E2_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_E2_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_E1_REG_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_E1_REG_WM_BIT: STD_LOGIC := '0';
	signal PS_E_CH_INPUT_MODE: STD_LOGIC := '0';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';
	signal PS_SET_E2_REG: STD_LOGIC := '0';
	signal PS_E1_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_I_CYCLE_DOT_NOT_CR_DISABLE: STD_LOGIC := '0';
	signal MS_CONTROL_REG_DISABLE: STD_LOGIC := '1';
	signal MS_E_CH_STACKER_SEL_OP_CODE: STD_LOGIC := '1';
	signal MS_1401_B_OP_CODE: STD_LOGIC := '1';
	signal PS_E_CH_SELECT_TAPE_DATA: STD_LOGIC := '0';
	signal PS_E_CH_SELECT_UNIT_F: STD_LOGIC := '0';
	signal PS_E_CH_SELECT_ANY_BUFFER: STD_LOGIC := '0';
	signal MS_STORAGE_SCAN_LOAD: STD_LOGIC := '1';
	signal MS_ALTER_ROUTINE: STD_LOGIC := '1';
	signal MS_ADDRESS_SET_ROUTINE: STD_LOGIC := '1';

	-- Outputs

	signal PS_COPY_E1_BCD_TO_E2_REG: STD_LOGIC;
	signal MS_SET_E2_WORD_SEPARATOR: STD_LOGIC;
	signal PS_COPY_E1_WM_DOT_C_BIT: STD_LOGIC;
	signal PS_COPY_INV_E1_WM_DOT_C_BIT: STD_LOGIC;
	signal PS_GATE_ASM_CH_TO_E1_INPUT: STD_LOGIC;
	signal MS_GATE_TAPE_TO_E1_INPUT: STD_LOGIC;
	signal MS_GATE_I_O_SYNC_TO_E1_IN: STD_LOGIC;
	signal MS_GATE_E_CH_FILE_TO_E1_IN: STD_LOGIC;
	signal MS_GATE_CONSOLE_TO_ASSEMBLY: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: EChDataFlowControls port map(
		FPGA_CLK => FPGA_CLK,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		MS_E1_REG_WORD_SEPARATOR => MS_E1_REG_WORD_SEPARATOR,
		MS_E2_REG_WORD_SEPARATOR => MS_E2_REG_WORD_SEPARATOR,
		PS_E2_REG_WORD_SEPARATOR => PS_E2_REG_WORD_SEPARATOR,
		PS_E1_REG_NOT_WM_BIT => PS_E1_REG_NOT_WM_BIT,
		PS_E1_REG_WM_BIT => PS_E1_REG_WM_BIT,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_SET_E2_REG => PS_SET_E2_REG,
		PS_E1_REG_WORD_SEPARATOR => PS_E1_REG_WORD_SEPARATOR,
		PS_I_CYCLE_DOT_NOT_CR_DISABLE => PS_I_CYCLE_DOT_NOT_CR_DISABLE,
		MS_CONTROL_REG_DISABLE => MS_CONTROL_REG_DISABLE,
		MS_E_CH_STACKER_SEL_OP_CODE => MS_E_CH_STACKER_SEL_OP_CODE,
		MS_1401_B_OP_CODE => MS_1401_B_OP_CODE,
		PS_E_CH_SELECT_TAPE_DATA => PS_E_CH_SELECT_TAPE_DATA,
		PS_E_CH_SELECT_UNIT_F => PS_E_CH_SELECT_UNIT_F,
		PS_E_CH_SELECT_ANY_BUFFER => PS_E_CH_SELECT_ANY_BUFFER,
		MS_STORAGE_SCAN_LOAD => MS_STORAGE_SCAN_LOAD,
		MS_ALTER_ROUTINE => MS_ALTER_ROUTINE,
		MS_ADDRESS_SET_ROUTINE => MS_ADDRESS_SET_ROUTINE,
		PS_COPY_E1_BCD_TO_E2_REG => PS_COPY_E1_BCD_TO_E2_REG,
		MS_SET_E2_WORD_SEPARATOR => MS_SET_E2_WORD_SEPARATOR,
		PS_COPY_E1_WM_DOT_C_BIT => PS_COPY_E1_WM_DOT_C_BIT,
		PS_COPY_INV_E1_WM_DOT_C_BIT => PS_COPY_INV_E1_WM_DOT_C_BIT,
		PS_GATE_ASM_CH_TO_E1_INPUT => PS_GATE_ASM_CH_TO_E1_INPUT,
		MS_GATE_TAPE_TO_E1_INPUT => MS_GATE_TAPE_TO_E1_INPUT,
		MS_GATE_I_O_SYNC_TO_E1_IN => MS_GATE_I_O_SYNC_TO_E1_IN,
		MS_GATE_E_CH_FILE_TO_E1_IN => MS_GATE_E_CH_FILE_TO_E1_IN,
		MS_GATE_CONSOLE_TO_ASSEMBLY => MS_GATE_CONSOLE_TO_ASSEMBLY);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.62.06.1, 08.1  ";

   for tt in 0 to 2**14 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      -- c := tv(2);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(9);
      l := tv(9);
      m := tv(10);
      n := tv(11);
      o := tv(12);
      p := tv(13);

      g3 := j and d and e;
      g4 := f and not a;
      g5 := not k and l;
      g6 := not h and m;
      g7 := n or o or p;
      g1 := not g7 and e and not h and f;
      g2 := e and d and not g7 and m and g;

      MS_E2_REG_WORD_SEPARATOR <= not a;
      PS_SET_E2_REG <= b;
      -- MS_GATE_CONSOLE_TO_ASSEMBLY <= not c;
      PS_E1_REG_WORD_SEPARATOR <= d;
      PS_E2_REG_WORD_SEPARATOR <= e;
      PS_E_CH_INPUT_MODE <= f;
      PS_E1_REG_WM_BIT <= g;
      MS_E1_REG_WORD_SEPARATOR <= not h;
      PS_E1_REG_NOT_WM_BIT <= j;
      MS_E_CH_IN_PROCESS <= not k;
      PS_I_CYCLE_1 <= l;
      PS_E_CH_OUTPUT_MODE <= m;
      
      MS_ALTER_ROUTINE <= not n;
      MS_ADDRESS_SET_ROUTINE <= not o;
      MS_STORAGE_SCAN_LOAD <= not p;
      
      wait for 30 ns;
      
      check1(MS_GATE_CONSOLE_TO_ASSEMBLY,not g7,testName,"-S Gate Console To Assembly");
      check1(PS_COPY_E1_BCD_TO_E2_REG,not d or a or g7,testName,"Copy E1 BCD to E2");
      check1(MS_SET_E2_WORD_SEPARATOR,not(b and not g7 and not a and d),testName,"-S Set E2 WS");
      check1(PS_COPY_INV_E1_WM_DOT_C_BIT,g1 or g2,testName,"Copy Inv E1 WM.C Bit");
      check1(PS_COPY_E1_WM_DOT_C_BIT,g7 or g3 or g4 or g5 or g6,testName,"Copy E1 WM.C Bit");      
      
   end loop;
   
   for tt in 0 to 2**9 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(2);
      e := tv(3);
      f := tv(4);
      g := tv(5);
      h := tv(6);
      j := tv(7);
      k := tv(8);
      
      g1 := f and not g and not h;
      g2 := j and not k and not g;

		PS_E_CH_SELECT_ANY_BUFFER <= a;
		MS_E_CH_STACKER_SEL_OP_CODE <= not b;
		PS_E_CH_SELECT_TAPE_DATA <= c;
		PS_E_CH_INPUT_MODE <= d;
		PS_E_CH_SELECT_UNIT_F <= e;
		PS_I_CYCLE_DOT_NOT_CR_DISABLE <= f;
		MS_1401_B_OP_CODE <= not g;
		MS_E_CH_IN_PROCESS <= not h;
		PS_E_CH_OUTPUT_MODE <= j;
		MS_CONTROL_REG_DISABLE <= not k;

      wait for 30 ns;
      
      check1(MS_GATE_I_O_SYNC_TO_E1_IN,not(a and not b and d),testName,"Gate I/O Sync to E1");
      check1(MS_GATE_TAPE_TO_E1_INPUT,not(c and d),testName,"Gate Tape to E1");
      check1(MS_GATE_E_CH_FILE_TO_E1_IN,not(d and e),testName,"Gate File to E1");
      check1(PS_GATE_ASM_CH_TO_E1_INPUT,g1 or g2,testName,"Gate Assembly Ch to E1");
      
   end loop;
   

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
