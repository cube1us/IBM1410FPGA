-- Test Bench VHDL for IBM SMS ALD page 17.12.03.1
-- Title: EDIT LATCHES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/8/2020 10:52:49 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_17_12_03_1_EDIT_LATCHES_tb is
end ALD_17_12_03_1_EDIT_LATCHES_tb;

architecture behavioral of ALD_17_12_03_1_EDIT_LATCHES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_17_12_03_1_EDIT_LATCHES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_LOGIC_GATE_D_1:	 in STD_LOGIC;
		PS_LOGIC_GATE_C_1:	 in STD_LOGIC;
		MS_LOGIC_GATE_B_1:	 in STD_LOGIC;
		PS_ASSEMBLY_CH_WM_BIT:	 in STD_LOGIC;
		PS_1ST_SCAN:	 in STD_LOGIC;
		PS_E_OR_Z_OP_DOT_B_CYCLE:	 in STD_LOGIC;
		PS_NOT_CTRL_0:	 in STD_LOGIC;
		PS_LAST_LOGIC_GATE_1:	 in STD_LOGIC;
		PS_NOT_BLANK:	 in STD_LOGIC;
		PS_NOT_DECIMAL_CONTROL:	 in STD_LOGIC;
		PS_EXTENSION_LATCH:	 in STD_LOGIC;
		PS_2ND_SCAN:	 in STD_LOGIC;
		PS_NOT_COMMA:	 in STD_LOGIC;
		PS_NOT_MINUS_SYMBOL:	 in STD_LOGIC;
		PS_NOT_DECIMAL:	 in STD_LOGIC;
		PS_NOT_SIG_DIGIT:	 in STD_LOGIC;
		MS_1ST_SCAN:	 in STD_LOGIC;
		MS_MQ_LATCH:	 in STD_LOGIC;
		MS_3RD_SCAN:	 in STD_LOGIC;
		PS_0_SUPPRESS:	 out STD_LOGIC;
		MS_0_SUPPRESS:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_LOGIC_GATE_D_1: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_C_1: STD_LOGIC := '0';
	signal MS_LOGIC_GATE_B_1: STD_LOGIC := '1';
	signal PS_ASSEMBLY_CH_WM_BIT: STD_LOGIC := '0';
	signal PS_1ST_SCAN: STD_LOGIC := '0';
	signal PS_E_OR_Z_OP_DOT_B_CYCLE: STD_LOGIC := '0';
	signal PS_NOT_CTRL_0: STD_LOGIC := '0';
	signal PS_LAST_LOGIC_GATE_1: STD_LOGIC := '0';
	signal PS_NOT_BLANK: STD_LOGIC := '0';
	signal PS_NOT_DECIMAL_CONTROL: STD_LOGIC := '0';
	signal PS_EXTENSION_LATCH: STD_LOGIC := '0';
	signal PS_2ND_SCAN: STD_LOGIC := '0';
	signal PS_NOT_COMMA: STD_LOGIC := '0';
	signal PS_NOT_MINUS_SYMBOL: STD_LOGIC := '0';
	signal PS_NOT_DECIMAL: STD_LOGIC := '0';
	signal PS_NOT_SIG_DIGIT: STD_LOGIC := '0';
	signal MS_1ST_SCAN: STD_LOGIC := '1';
	signal MS_MQ_LATCH: STD_LOGIC := '1';
	signal MS_3RD_SCAN: STD_LOGIC := '1';

	-- Outputs

	signal PS_0_SUPPRESS: STD_LOGIC;
	signal MS_0_SUPPRESS: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      
   -- Your test bench declarations go here

   signal lastZeroSuppressLatchSig, lastZeroSuppressCtrlSig: std_logic;

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_17_12_03_1_EDIT_LATCHES port map(
		FPGA_CLK => FPGA_CLK,
		MS_LOGIC_GATE_D_1 => MS_LOGIC_GATE_D_1,
		PS_LOGIC_GATE_C_1 => PS_LOGIC_GATE_C_1,
		MS_LOGIC_GATE_B_1 => MS_LOGIC_GATE_B_1,
		PS_ASSEMBLY_CH_WM_BIT => PS_ASSEMBLY_CH_WM_BIT,
		PS_1ST_SCAN => PS_1ST_SCAN,
		PS_E_OR_Z_OP_DOT_B_CYCLE => PS_E_OR_Z_OP_DOT_B_CYCLE,
		PS_NOT_CTRL_0 => PS_NOT_CTRL_0,
		PS_LAST_LOGIC_GATE_1 => PS_LAST_LOGIC_GATE_1,
		PS_NOT_BLANK => PS_NOT_BLANK,
		PS_NOT_DECIMAL_CONTROL => PS_NOT_DECIMAL_CONTROL,
		PS_EXTENSION_LATCH => PS_EXTENSION_LATCH,
		PS_2ND_SCAN => PS_2ND_SCAN,
		PS_NOT_COMMA => PS_NOT_COMMA,
		PS_NOT_MINUS_SYMBOL => PS_NOT_MINUS_SYMBOL,
		PS_NOT_DECIMAL => PS_NOT_DECIMAL,
		PS_NOT_SIG_DIGIT => PS_NOT_SIG_DIGIT,
		MS_1ST_SCAN => MS_1ST_SCAN,
		MS_MQ_LATCH => MS_MQ_LATCH,
		MS_3RD_SCAN => MS_3RD_SCAN,
		PS_0_SUPPRESS => PS_0_SUPPRESS,
		MS_0_SUPPRESS => MS_0_SUPPRESS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable lastZeroSuppressLatch, lastZeroSuppressCtrl: std_logic := '0';

   begin

   -- Your test bench code

   testName := "17.12.03.1        ";
   
   -- Initial reset
   
   MS_LOGIC_GATE_B_1 <= '0';
   MS_LOGIC_GATE_D_1 <= '0';
   wait for 30 ns;
   MS_LOGIC_GATE_B_1 <= '1';
   MS_LOGIC_GATE_D_1 <= '1';
   wait for 30 ns;

   check1(PS_0_SUPPRESS,'0',testName,"+S ZS Reset");
   check1(MS_0_SUPPRESS,'1',testName,"-S ZS Reset");
     
   for tt in 0 to 2**16 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      d := tv(0);
      e := tv(1);
      f := tv(2);
      g := tv(3);
      h := tv(4);
      j := tv(5);
      k := tv(6);
      l := tv(7);
      m := tv(8);
      n := tv(9);
      o := tv(10);
      p := tv(11);
      q := tv(12);
      r := tv(13);
      s := tv(14);
      t := tv(15);
      
      g1 := d and e;
      g2 := m and g and l and j and k and q and n and o and p;
      g3 := (m and q and l) or r or s or t;
      g5 := h and (g1 or g2) and f;
      
      -- Signals to use on waveform display
      
      lastZeroSuppressLatchSig <= lastZeroSuppressLatch;
      lastZeroSuppressCtrlSig <= lastZeroSuppressCtrl;
      
      -- Reset the output latch
      
      MS_LOGIC_GATE_B_1 <= '0';
      wait for 30 ns;
      MS_LOGIC_GATE_B_1 <= '1';
      wait for 30 ns;

      check1(PS_0_SUPPRESS,'0',testName,"+S ZS Loop Reset");
      check1(MS_0_SUPPRESS,'1',testName,"-S ZS Loop Reset");
      
      -- If Control latch was set last iteration, then set output latch now
      
      PS_LOGIC_GATE_C_1 <= '1';
      wait for 30 ns;
      PS_LOGIC_GATE_C_1 <= '0';
      wait for 30 ns;

      check1(PS_0_SUPPRESS,lastZeroSuppressCtrl,testName,"+S ZS from ctrl");      
      check1(MS_0_SUPPRESS,not lastZeroSuppressCtrl,testName,"-S ZS from ctrl");
      
      -- Reset Control latch - should not affect the output latch
      
      MS_LOGIC_GATE_D_1 <= '0';
      wait for 30 ns;
      MS_LOGIC_GATE_D_1 <= '1';
      wait for 30 ns;
      
      check1(PS_0_SUPPRESS,lastZeroSuppressCtrl,testName,"+S ZS from ctrl after ctrl reset");      
      check1(MS_0_SUPPRESS,not lastZeroSuppressCtrl,testName,"-S ZS from ctrl after ctrl reset");
      
      -- Remember the setting of the output latch for the next iteration
      
      lastZeroSuppressLatch := PS_0_SUPPRESS;
      lastZeroSuppressLatchSig <= lastZeroSuppressLatch;

      -- Now maybe set the control latch      
            
      PS_ASSEMBLY_CH_WM_BIT <= d;
      PS_1ST_SCAN <= e;
      PS_E_OR_Z_OP_DOT_B_CYCLE <= f;
      PS_NOT_CTRL_0 <= g;
      PS_LAST_LOGIC_GATE_1 <= h;
      PS_NOT_BLANK <= j;
      PS_NOT_DECIMAL_CONTROL <= k;
      PS_EXTENSION_LATCH <= l;
      PS_2ND_SCAN <= m;
      PS_NOT_COMMA <= n;
      PS_NOT_MINUS_SYMBOL <= o;
      PS_NOT_DECIMAL <= p;
      PS_NOT_SIG_DIGIT <= q;
      MS_1ST_SCAN <= not r;
      MS_MQ_LATCH <= not s;
      MS_3RD_SCAN <= not t;
      wait for 30 ns;
      
      -- Remember the *expected* state of the control latch for the next iteratin
      
      g4 := g3 and h and PS_0_SUPPRESS;
      g6 := g4 or g5;
      lastZeroSuppressCtrl := g6;
      lastZeroSuppressCtrlSig <= lastZeroSuppressCtrl;
      
      -- Reset the signals before the next iteration so reset works right

      PS_ASSEMBLY_CH_WM_BIT <= '0';
      PS_1ST_SCAN <= '0';
      PS_E_OR_Z_OP_DOT_B_CYCLE <= '0';
      PS_NOT_CTRL_0 <= '0';
      PS_LAST_LOGIC_GATE_1 <= '0';
      PS_NOT_BLANK <= '0';
      PS_NOT_DECIMAL_CONTROL <= '0';
      PS_EXTENSION_LATCH <= '0';
      PS_2ND_SCAN <= '0';
      PS_NOT_COMMA <= '0';
      PS_NOT_MINUS_SYMBOL <= '0';
      PS_NOT_DECIMAL <= '0';
      PS_NOT_SIG_DIGIT <= '0';
      MS_1ST_SCAN <= '1';
      MS_MQ_LATCH <= '1';
      MS_3RD_SCAN <= '1';
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 200 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
