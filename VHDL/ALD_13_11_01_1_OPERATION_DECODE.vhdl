-- VHDL for IBM SMS ALD page 13.11.01.1
-- Title: OPERATION DECODE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/20/2020 8:03:37 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_11_01_1_OPERATION_DECODE is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_OP_REG_NOT_B_BIT:	 in STD_LOGIC;
		PS_OP_REG_A_BIT:	 in STD_LOGIC;
		PS_OP_REG_NOT_8_BIT:	 in STD_LOGIC;
		PS_OP_REG_8_BIT:	 in STD_LOGIC;
		PS_OP_REG_NOT_A_BIT:	 in STD_LOGIC;
		PS_OP_REG_B_BIT:	 in STD_LOGIC;
		PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_NOT_B_DOT_A_DOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_NOT_B_DOT_A_DOT_NOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_B_DOT_A_DOT_NOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_B_DOT_A_DOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B:	 out STD_LOGIC;
		PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B:	 out STD_LOGIC);
end ALD_13_11_01_1_OPERATION_DECODE;

architecture behavioral of ALD_13_11_01_1_OPERATION_DECODE is 

	signal OUT_4A_NoPin: STD_LOGIC;
	signal OUT_2A_R: STD_LOGIC;
	signal OUT_4B_NoPin: STD_LOGIC;
	signal OUT_2B_R: STD_LOGIC;
	signal OUT_4C_NoPin: STD_LOGIC;
	signal OUT_2C_D: STD_LOGIC;
	signal OUT_4D_H: STD_LOGIC;
	signal OUT_2D_A: STD_LOGIC;
	signal OUT_4F_NoPin: STD_LOGIC;
	signal OUT_2F_R: STD_LOGIC;
	signal OUT_4G_NoPin: STD_LOGIC;
	signal OUT_2G_D: STD_LOGIC;
	signal OUT_4H_NoPin: STD_LOGIC;
	signal OUT_2H_R: STD_LOGIC;
	signal OUT_4I_NoPin: STD_LOGIC;
	signal OUT_2I_D: STD_LOGIC;

begin

	OUT_4A_NoPin <= NOT(PS_OP_REG_8_BIT AND PS_OP_REG_NOT_A_BIT AND PS_OP_REG_NOT_B_BIT );
	OUT_2A_R <= NOT OUT_4A_NoPin;
	OUT_4B_NoPin <= NOT(PS_OP_REG_8_BIT AND PS_OP_REG_A_BIT AND PS_OP_REG_NOT_B_BIT );
	OUT_2B_R <= NOT OUT_4B_NoPin;
	OUT_4C_NoPin <= NOT(PS_OP_REG_A_BIT AND PS_OP_REG_NOT_B_BIT AND PS_OP_REG_NOT_8_BIT );
	OUT_2C_D <= NOT OUT_4C_NoPin;
	OUT_4D_H <= NOT(PS_OP_REG_NOT_A_BIT AND PS_OP_REG_NOT_B_BIT AND PS_OP_REG_NOT_8_BIT );
	OUT_2D_A <= NOT OUT_4D_H;
	OUT_4F_NoPin <= NOT(PS_OP_REG_NOT_8_BIT AND PS_OP_REG_A_BIT AND PS_OP_REG_B_BIT );
	OUT_2F_R <= NOT OUT_4F_NoPin;
	OUT_4G_NoPin <= NOT(PS_OP_REG_A_BIT AND PS_OP_REG_8_BIT AND PS_OP_REG_B_BIT );
	OUT_2G_D <= NOT OUT_4G_NoPin;
	OUT_4H_NoPin <= NOT(PS_OP_REG_NOT_8_BIT AND PS_OP_REG_B_BIT AND PS_OP_REG_NOT_A_BIT );
	OUT_2H_R <= NOT OUT_4H_NoPin;
	OUT_4I_NoPin <= NOT(PS_OP_REG_B_BIT AND PS_OP_REG_NOT_A_BIT AND PS_OP_REG_8_BIT );
	OUT_2I_D <= NOT OUT_4I_NoPin;

	PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_8_B <= OUT_2A_R;
	PS_OP_DCDR_NOT_B_DOT_A_DOT_8_B <= OUT_2B_R;
	PS_OP_DCDR_NOT_B_DOT_A_DOT_NOT_8_B <= OUT_2C_D;
	PS_OP_DCDR_NOT_B_DOT_NOT_A_DOT_NOT_8_B <= OUT_2D_A;
	PS_OP_DCDR_B_DOT_A_DOT_NOT_8_B <= OUT_2F_R;
	PS_OP_DCDR_B_DOT_A_DOT_8_B <= OUT_2G_D;
	PS_OP_DCDR_B_DOT_NOT_A_DOT_NOT_8_B <= OUT_2H_R;
	PS_OP_DCDR_B_DOT_NOT_A_DOT_8_B <= OUT_2I_D;


end;
