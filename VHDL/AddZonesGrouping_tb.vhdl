-- Test BenchVHDL for IBM SMS ALD group AddZonesGrouping
-- Title: AddZonesGrouping
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 10/2/2020 7:58:08 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity AddZonesGrouping_tb is
end AddZonesGrouping_tb;

architecture behavioral of AddZonesGrouping_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component AddZonesGrouping
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_ZONE_ADDER_A_DOT_B_DOT_C_1: in STD_LOGIC;
		MS_ZONE_ADDER_A_DOT_B_DOT_C_2: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_1: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_2: in STD_LOGIC;
		MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_1: in STD_LOGIC;
		MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_2: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1: in STD_LOGIC;
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2: in STD_LOGIC;
		MS_A_CH_MINUS_SIGN_GATED: in STD_LOGIC;
		MS_A_CH_INV_PLUS_SIGN_GATED: in STD_LOGIC;
		MS_MINUS_SIGN_GATED: in STD_LOGIC;
		MS_A_CH_PLUS_SIGN_GATED: in STD_LOGIC;
		MS_A_CH_INV_MINUS_SIGN_GTD: in STD_LOGIC;
		MS_PLUS_SIGN_LATCH_GATED: in STD_LOGIC;
		PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES: out STD_LOGIC;
		PS_ASM_CH_A_BIT_STAR_ADDER_ZONES: out STD_LOGIC;
		PS_ADDER_ZONES_NOT_B_BIT: out STD_LOGIC;
		PS_ASM_CH_B_BIT_STAR_ADDER_ZONES: out STD_LOGIC;
		PS_ASM_CH_NOT_ZN_C_BIT_STAR_ADD_ZN: out STD_LOGIC;
		PS_ASM_CH_ZONE_C_BIT_STAR_ADDER_ZN: out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_ZONE_ADDER_A_DOT_B_DOT_C_1: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_A_DOT_B_DOT_C_2: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_1: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_2: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_1: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_2: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1: STD_LOGIC := '1';
	signal MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2: STD_LOGIC := '1';
	signal MS_A_CH_MINUS_SIGN_GATED: STD_LOGIC := '1';
	signal MS_A_CH_INV_PLUS_SIGN_GATED: STD_LOGIC := '1';
	signal MS_MINUS_SIGN_GATED: STD_LOGIC := '1';
	signal MS_A_CH_PLUS_SIGN_GATED: STD_LOGIC := '1';
	signal MS_A_CH_INV_MINUS_SIGN_GTD: STD_LOGIC := '1';
	signal MS_PLUS_SIGN_LATCH_GATED: STD_LOGIC := '1';

	-- Outputs

	signal PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES: STD_LOGIC;
	signal PS_ASM_CH_A_BIT_STAR_ADDER_ZONES: STD_LOGIC;
	signal PS_ADDER_ZONES_NOT_B_BIT: STD_LOGIC;
	signal PS_ASM_CH_B_BIT_STAR_ADDER_ZONES: STD_LOGIC;
	signal PS_ASM_CH_NOT_ZN_C_BIT_STAR_ADD_ZN: STD_LOGIC;
	signal PS_ASM_CH_ZONE_C_BIT_STAR_ADDER_ZN: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: AddZonesGrouping port map(
		FPGA_CLK => FPGA_CLK,
		MS_ZONE_ADDER_A_DOT_B_DOT_C_1 => MS_ZONE_ADDER_A_DOT_B_DOT_C_1,
		MS_ZONE_ADDER_A_DOT_B_DOT_C_2 => MS_ZONE_ADDER_A_DOT_B_DOT_C_2,
		MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_1 => MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_1,
		MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_2 => MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_2,
		MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_1 => MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_1,
		MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_2 => MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_2,
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1 => MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1,
		MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2 => MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2,
		MS_A_CH_MINUS_SIGN_GATED => MS_A_CH_MINUS_SIGN_GATED,
		MS_A_CH_INV_PLUS_SIGN_GATED => MS_A_CH_INV_PLUS_SIGN_GATED,
		MS_MINUS_SIGN_GATED => MS_MINUS_SIGN_GATED,
		MS_A_CH_PLUS_SIGN_GATED => MS_A_CH_PLUS_SIGN_GATED,
		MS_A_CH_INV_MINUS_SIGN_GTD => MS_A_CH_INV_MINUS_SIGN_GTD,
		MS_PLUS_SIGN_LATCH_GATED => MS_PLUS_SIGN_LATCH_GATED,
		PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES => PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES,
		PS_ASM_CH_A_BIT_STAR_ADDER_ZONES => PS_ASM_CH_A_BIT_STAR_ADDER_ZONES,
		PS_ADDER_ZONES_NOT_B_BIT => PS_ADDER_ZONES_NOT_B_BIT,
		PS_ASM_CH_B_BIT_STAR_ADDER_ZONES => PS_ASM_CH_B_BIT_STAR_ADDER_ZONES,
		PS_ASM_CH_NOT_ZN_C_BIT_STAR_ADD_ZN => PS_ASM_CH_NOT_ZN_C_BIT_STAR_ADD_ZN,
		PS_ASM_CH_ZONE_C_BIT_STAR_ADDER_ZN => PS_ASM_CH_ZONE_C_BIT_STAR_ADDER_ZN);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "16.17.0%.1        ";

   for tt in 0 to 2**14 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);

	   MS_ZONE_ADDER_A_DOT_B_DOT_C_1 <= not a;
	   MS_ZONE_ADDER_A_DOT_B_DOT_C_2 <= not b;
	   MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_1 <= not c;
	   MS_ZONE_ADDER_NOT_A_DOT_B_DOT_NOT_C_2 <= not d;
	   MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_1 <= not e;
	   MS_ZONE_ADDER_A_DOT_NOT_B_DOT_NOT_C_2 <= not f;
	   MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_1 <= not g;
	   MS_ZONE_ADDER_NOT_A_DOT_NOT_B_DOT_C_2 <= not h;
	   MS_A_CH_MINUS_SIGN_GATED <= not j;
	   MS_A_CH_INV_PLUS_SIGN_GATED <= not k;
	   MS_MINUS_SIGN_GATED <= not l;
	   MS_A_CH_PLUS_SIGN_GATED <=  not m;
	   MS_A_CH_INV_MINUS_SIGN_GTD <= not n;
	   MS_PLUS_SIGN_LATCH_GATED <= not o;
      
      wait for 30 ns;
      
      check1(PS_ASM_CH_A_BIT_STAR_ADDER_ZONES,e or f or b or a or m,testName,"ASM Ch A Bit Adder Zones");
      check1(PS_ASM_CH_NOT_A_BIT_STAR_ADDER_ZONES,c or g or d or h or l or k or j,testName,"ASM Ch Not A Bit Adder Zones");

      check1(PS_ASM_CH_B_BIT_STAR_ADDER_ZONES,c or d or a or b or j or k or l or m or n or o,testName,"ASM Ch B Bit Adder Zones");
      check1(PS_ADDER_ZONES_NOT_B_BIT,e or f,testName,"ASM Ch Not B Bit Adder Zones");
      
      check1(PS_ASM_CH_ZONE_C_BIT_STAR_ADDER_ZN,a or b or g or h or m or n or o,testName,"ASM Ch C Bit Adder Zones");
      check1(PS_ASM_CH_NOT_ZN_C_BIT_STAR_ADD_ZN,e or f or c or d or j or k or l,testName,"ASM Ch Not C Bit Adder Zones");
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
