-- Test Bench VHDL for IBM SMS ALD page 12.15.04.1
-- Title: SINGLE CYCLE CONTROL-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/7/2020 11:52:38 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_12_15_04_1_SINGLE_CYCLE_CONTROL_ACC_tb is
end ALD_12_15_04_1_SINGLE_CYCLE_CONTROL_ACC_tb;

architecture behavioral of ALD_12_15_04_1_SINGLE_CYCLE_CONTROL_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_12_15_04_1_SINGLE_CYCLE_CONTROL_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_START_KEY_PULSE:	 in STD_LOGIC;
		MS_COMP_RST_CLOCK_START:	 in STD_LOGIC;
		PS_ADDR_SET_KEYBOARD_LOCK:	 in STD_LOGIC;
		PS_STORAGE_SCAN_ROUTINE:	 in STD_LOGIC;
		MS_CONSOLE_STROBE:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		PS_LOGIC_GATE_A_OR_R:	 in STD_LOGIC;
		MS_COMPUTER_RESET_1:	 in STD_LOGIC;
		PS_EARLY_COMPUTER_RESET:	 in STD_LOGIC;
		MV_CONS_CYCLE_CTRL_LOGIC_STEP:	 in STD_LOGIC;
		PS_LOGIC_GATE_Z:	 in STD_LOGIC;
		PS_LAST_EXECUTE_CYCLE:	 in STD_LOGIC;
		MS_LAST_EXECUTE_CYCLE:	 in STD_LOGIC;
		MS_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MS_MASTER_ERROR:	 in STD_LOGIC;
		PS_D_CYCLE:	 in STD_LOGIC;
		PS_2ND_SCAN:	 in STD_LOGIC;
		PS_DISPLAY_ROUTINE_1:	 in STD_LOGIC;
		MV_CONS_MODE_SW_DISPLAY_MODE:	 in STD_LOGIC;
		MV_CONS_MODE_SW_ALTER_MODE:	 in STD_LOGIC;
		MS_STOP_KEY_LATCH:	 in STD_LOGIC;
		MS_STOP_DOT_BRANCH_OP_CODE:	 in STD_LOGIC;
		PS_STOP_KEY_LATCH:	 in STD_LOGIC;
		PS_NO_SCAN:	 in STD_LOGIC;
		PS_ALTER_ROUTINE:	 in STD_LOGIC;
		MV_CONS_CYCLE_CTRL_STOR_SCAN:	 in STD_LOGIC;
		M36_VOLTS:	 in STD_LOGIC;
		MV_CONS_MODE_SW_I_E_CYCLE_MODE:	 in STD_LOGIC;
		PS_ADDRESS_STOP:	 in STD_LOGIC;
		SWITCH_TOG_I_O_CHK_ST_PL1:	 in STD_LOGIC;
		SWITCH_TOG_ADDR_STOP_PL1:	 in STD_LOGIC;
		PS_STOP_LATCH:	 out STD_LOGIC;
		PS_SPECIAL_STOP_LATCH:	 out STD_LOGIC;
		MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN:	 out STD_LOGIC;
		MS_1401_I_O_CK_STOP_SW:	 out STD_LOGIC;
		PS_1401_I_O_CK_STOP_SW:	 out STD_LOGIC;
		MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_START_KEY_PULSE: STD_LOGIC := '1';
	signal MS_COMP_RST_CLOCK_START: STD_LOGIC := '1';
	signal PS_ADDR_SET_KEYBOARD_LOCK: STD_LOGIC := '0';
	signal PS_STORAGE_SCAN_ROUTINE: STD_LOGIC := '0';
	signal MS_CONSOLE_STROBE: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_A_OR_R: STD_LOGIC := '0';
	signal MS_COMPUTER_RESET_1: STD_LOGIC := '1';
	signal PS_EARLY_COMPUTER_RESET: STD_LOGIC := '0';
	signal MV_CONS_CYCLE_CTRL_LOGIC_STEP: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_Z: STD_LOGIC := '0';
	signal PS_LAST_EXECUTE_CYCLE: STD_LOGIC := '0';
	signal MS_LAST_EXECUTE_CYCLE: STD_LOGIC := '1';
	signal MS_LAST_INSN_RO_CYCLE: STD_LOGIC := '1';
	signal MS_MASTER_ERROR: STD_LOGIC := '1';
	signal PS_D_CYCLE: STD_LOGIC := '0';
	signal PS_2ND_SCAN: STD_LOGIC := '0';
	signal PS_DISPLAY_ROUTINE_1: STD_LOGIC := '0';
	signal MV_CONS_MODE_SW_DISPLAY_MODE: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_ALTER_MODE: STD_LOGIC := '1';
	signal MS_STOP_KEY_LATCH: STD_LOGIC := '1';
	signal MS_STOP_DOT_BRANCH_OP_CODE: STD_LOGIC := '1';
	signal PS_STOP_KEY_LATCH: STD_LOGIC := '0';
	signal PS_NO_SCAN: STD_LOGIC := '0';
	signal PS_ALTER_ROUTINE: STD_LOGIC := '0';
	signal MV_CONS_CYCLE_CTRL_STOR_SCAN: STD_LOGIC := '1';
	signal M36_VOLTS: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_I_E_CYCLE_MODE: STD_LOGIC := '1';
	signal PS_ADDRESS_STOP: STD_LOGIC := '0';
	signal SWITCH_TOG_I_O_CHK_ST_PL1: STD_LOGIC := '0';
	signal SWITCH_TOG_ADDR_STOP_PL1: STD_LOGIC := '0';

	-- Outputs

	signal PS_STOP_LATCH: STD_LOGIC;
	signal PS_SPECIAL_STOP_LATCH: STD_LOGIC;
	signal MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN: STD_LOGIC;
	signal MS_1401_I_O_CK_STOP_SW: STD_LOGIC;
	signal PS_1401_I_O_CK_STOP_SW: STD_LOGIC;
	signal MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_12_15_04_1_SINGLE_CYCLE_CONTROL_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_START_KEY_PULSE => MS_START_KEY_PULSE,
		MS_COMP_RST_CLOCK_START => MS_COMP_RST_CLOCK_START,
		PS_ADDR_SET_KEYBOARD_LOCK => PS_ADDR_SET_KEYBOARD_LOCK,
		PS_STORAGE_SCAN_ROUTINE => PS_STORAGE_SCAN_ROUTINE,
		MS_CONSOLE_STROBE => MS_CONSOLE_STROBE,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		PS_LOGIC_GATE_A_OR_R => PS_LOGIC_GATE_A_OR_R,
		MS_COMPUTER_RESET_1 => MS_COMPUTER_RESET_1,
		PS_EARLY_COMPUTER_RESET => PS_EARLY_COMPUTER_RESET,
		MV_CONS_CYCLE_CTRL_LOGIC_STEP => MV_CONS_CYCLE_CTRL_LOGIC_STEP,
		PS_LOGIC_GATE_Z => PS_LOGIC_GATE_Z,
		PS_LAST_EXECUTE_CYCLE => PS_LAST_EXECUTE_CYCLE,
		MS_LAST_EXECUTE_CYCLE => MS_LAST_EXECUTE_CYCLE,
		MS_LAST_INSN_RO_CYCLE => MS_LAST_INSN_RO_CYCLE,
		MS_MASTER_ERROR => MS_MASTER_ERROR,
		PS_D_CYCLE => PS_D_CYCLE,
		PS_2ND_SCAN => PS_2ND_SCAN,
		PS_DISPLAY_ROUTINE_1 => PS_DISPLAY_ROUTINE_1,
		MV_CONS_MODE_SW_DISPLAY_MODE => MV_CONS_MODE_SW_DISPLAY_MODE,
		MV_CONS_MODE_SW_ALTER_MODE => MV_CONS_MODE_SW_ALTER_MODE,
		MS_STOP_KEY_LATCH => MS_STOP_KEY_LATCH,
		MS_STOP_DOT_BRANCH_OP_CODE => MS_STOP_DOT_BRANCH_OP_CODE,
		PS_STOP_KEY_LATCH => PS_STOP_KEY_LATCH,
		PS_NO_SCAN => PS_NO_SCAN,
		PS_ALTER_ROUTINE => PS_ALTER_ROUTINE,
		MV_CONS_CYCLE_CTRL_STOR_SCAN => MV_CONS_CYCLE_CTRL_STOR_SCAN,
		M36_VOLTS => M36_VOLTS,
		MV_CONS_MODE_SW_I_E_CYCLE_MODE => MV_CONS_MODE_SW_I_E_CYCLE_MODE,
		PS_ADDRESS_STOP => PS_ADDRESS_STOP,
		SWITCH_TOG_I_O_CHK_ST_PL1 => SWITCH_TOG_I_O_CHK_ST_PL1,
		SWITCH_TOG_ADDR_STOP_PL1 => SWITCH_TOG_ADDR_STOP_PL1,
		PS_STOP_LATCH => PS_STOP_LATCH,
		PS_SPECIAL_STOP_LATCH => PS_SPECIAL_STOP_LATCH,
		MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN => MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN,
		MS_1401_I_O_CK_STOP_SW => MS_1401_I_O_CK_STOP_SW,
		PS_1401_I_O_CK_STOP_SW => PS_1401_I_O_CK_STOP_SW,
		MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN => MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 10);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "12.15.04.1";
   
   -- Alter Routine . D Cycle . No Scan
   
   wait for 30 ns;
   check1(MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN,'1',testName,"1A");
   PS_NO_SCAN <= '1';
   PS_ALTER_ROUTINE <= '1';
   wait for 30 ns;
   check1(MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN,'1',testName,"1B");
   PS_D_CYCLE <= '1';
   wait for 30 ns;
   check1(MS_ALTR_ROUTINE_DOT_D_CY_DOT_NO_SCAN,'0',testName,"1C");
   PS_NO_SCAN <= '0';
   PS_ALTER_ROUTINE <= '0';
   PS_D_CYCLE <= '0';
   
   -- 1401 I/O Check Stop Switch
   
   check1(MS_1401_I_O_CK_STOP_SW,'1',testName,"2A");
   check1(PS_1401_I_O_CK_STOP_SW,'0',testName,"2B");
   SWITCH_TOG_I_O_CHK_ST_PL1 <= '1';
   wait for 30 ns;
   check1(MS_1401_I_O_CK_STOP_SW,'0',testName,"2C");
   check1(PS_1401_I_O_CK_STOP_SW,'1',testName,"2D");
   
   -- DISP Routine . D cycle . 2ND Scan
   
   check1(MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN,'1',testName,"3A");
   PS_2ND_SCAN <= '1';
   PS_DISPLAY_ROUTINE_1 <= '1';
   wait for 30 ns;
   check1(MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN,'1',testName,"3B");
   PS_D_CYCLE <= '1';
   wait for 30 ns;
   check1(MS_DISP_ROUTINE_DOT_D_CY_DOT_2ND_SCAN,'0',testName,"3C");
   PS_2ND_SCAN <= '0';
   PS_DISPLAY_ROUTINE_1 <= '0';
   PS_D_CYCLE <= '0';
      
   -- Test the stop latch sets and resets
   
   MS_COMPUTER_RESET_1 <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"4A");
   MS_COMPUTER_RESET_1 <= '1';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4B");
   MS_START_KEY_PULSE <= '1';

   MS_MASTER_ERROR <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"4C");
   MS_MASTER_ERROR <= '1';
   MS_CONSOLE_STROBE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4D");
   MS_CONSOLE_STROBE <= '1';
   
   PS_EARLY_COMPUTER_RESET <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4E");
   PS_LOGIC_GATE_A_OR_R <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"4F");
   PS_EARLY_COMPUTER_RESET <= '0';
   PS_LOGIC_GATE_A_OR_R <= '0';
   MS_COMP_RST_CLOCK_START <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4G");
   MS_COMP_RST_CLOCK_START <= '1';
   
   MV_CONS_CYCLE_CTRL_LOGIC_STEP <= '0';
   MV_CONS_MODE_SW_DISPLAY_MODE <= '1';
   MV_CONS_MODE_SW_ALTER_MODE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4F");
   PS_2ND_CLOCK_PULSE_2 <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"4G");
   MV_CONS_CYCLE_CTRL_LOGIC_STEP <= '1';
   MV_CONS_MODE_SW_DISPLAY_MODE <= '1';
   MV_CONS_MODE_SW_ALTER_MODE <= '1';
   PS_2ND_CLOCK_PULSE_2 <= '0';
   wait for 30 ns;
   -- Make sure latch is still set on this one
   check1(PS_STOP_LATCH,'1',testName,"4H");
   PS_ADDR_SET_KEYBOARD_LOCK <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"4I");
   PS_STORAGE_SCAN_ROUTINE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"4J");
   PS_STORAGE_SCAN_ROUTINE <= '0';

   -- The next bunch go through an OR gate and I marked as "5" on
   -- the ILD   
   
   MS_LAST_EXECUTE_CYCLE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5A");
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5B");
   PS_LOGIC_GATE_Z <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5C");
   PS_2ND_CLOCK_PULSE_2 <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5D");
   MS_LAST_EXECUTE_CYCLE <= '1';
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '1';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5E");
   MS_START_KEY_PULSE <= '1';
    
   -- Leave LGZ and 2nd Clock Pulse set for rest of tests of section 5
   
   MS_LAST_INSN_RO_CYCLE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5F");
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5G");
   MS_LAST_INSN_RO_CYCLE <= '1';
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '1';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5H");
   MS_START_KEY_PULSE <= '1';

   PS_2ND_SCAN <= '1';   
   PS_DISPLAY_ROUTINE_1 <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5I");
   PS_D_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5J");
   PS_2ND_SCAN <= '0';
   PS_DISPLAY_ROUTINE_1 <= '0';
   PS_D_CYCLE <= '0';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5K");
   MS_START_KEY_PULSE <= '1';
   
   MV_CONS_MODE_SW_ALTER_MODE <= '1';
   MV_CONS_MODE_SW_DISPLAY_MODE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5L");
   MV_CONS_CYCLE_CTRL_STOR_SCAN <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5M");
   MV_CONS_CYCLE_CTRL_STOR_SCAN <= '1';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5N");
   MS_START_KEY_PULSE <= '1';
   
   PS_ALTER_ROUTINE <= '1';
   PS_NO_SCAN <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5O");
   PS_D_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5P");
   PS_ALTER_ROUTINE <= '0';
   PS_NO_SCAN <= '0';
   PS_D_CYCLE <= '0';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5Q");
   MS_START_KEY_PULSE <= '1';
   
   SWITCH_TOG_ADDR_STOP_PL1 <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5R");
   PS_ADDRESS_STOP <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5S");
   SWITCH_TOG_ADDR_STOP_PL1 <= '0';
   PS_ADDRESS_STOP <= '0';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5T");
   MS_START_KEY_PULSE <= '1';
   
   PS_STOP_KEY_LATCH <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5U");
   PS_STORAGE_SCAN_ROUTINE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5V");
   check1(PS_SPECIAL_STOP_LATCH,'0',testName,"5VA");
   PS_STOP_KEY_LATCH <= '0';
   PS_STORAGE_SCAN_ROUTINE <= '0';
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5W");
   MS_START_KEY_PULSE <= '1';
   
   PS_LAST_EXECUTE_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5X");
   check1(PS_SPECIAL_STOP_LATCH,'0',testName,"5XA");
   MS_STOP_DOT_BRANCH_OP_CODE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5Y");
   check1(PS_SPECIAL_STOP_LATCH,'1',testName,"5YA");
   MS_STOP_DOT_BRANCH_OP_CODE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5Z");
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5AA");
   check1(PS_SPECIAL_STOP_LATCH,'0',testName,"5AB");     
   MS_START_KEY_PULSE <= '1';
   
   PS_LAST_EXECUTE_CYCLE <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5AC");
   MS_STOP_KEY_LATCH <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5AD");
   check1(PS_SPECIAL_STOP_LATCH,'1',testName,"5ADA");
   MS_STOP_KEY_LATCH <= '1';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'1',testName,"5AD");
   MS_START_KEY_PULSE <= '0';
   wait for 30 ns;
   check1(PS_STOP_LATCH,'0',testName,"5AE");     
   check1(PS_SPECIAL_STOP_LATCH,'0',testName,"5AEA");
   MS_START_KEY_PULSE <= '1';
   
   -- Test Special Stop Latch without setting Stop Latch
   
   PS_LOGIC_GATE_Z <= '0';  -- Don't set Stop Latch
   PS_LAST_EXECUTE_CYCLE <= '1';
   wait for 30 ns;   
   check1(PS_STOP_LATCH,'0',testName,"5AF");
   check1(PS_SPECIAL_STOP_LATCH,'0',testName,"5AG");
   MS_STOP_KEY_LATCH <= '0';
   wait for 30 ns;   
   check1(PS_STOP_LATCH,'0',testName,"5AH");
   check1(PS_SPECIAL_STOP_LATCH,'1',testName,"5AI");
   
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS

end;
