-- Test BenchVHDL for IBM SMS ALD group SenseAmps
-- Title: SenseAmps
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 10/17/2020 5:00:06 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity SenseAmps_tb is
end SenseAmps_tb;

architecture behavioral of SenseAmps_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component SenseAmps
	    Port (
		FPGA_CLK: in STD_LOGIC;
		PY_SENSE_STROBE_1: in STD_LOGIC;
		PY_SENSE_STROBE_2: in STD_LOGIC;
		PV_SENSE_CHAR_0_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_0_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_1_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_2_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_B1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_D1_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_D2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PV_SENSE_CHAR_3_B2_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_SA_CHAR_0_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_SA_CHAR_1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_SA_CHAR_2_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MY_SA_CHAR_3_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PY_SENSE_STROBE_1: STD_LOGIC := '0';
	signal PY_SENSE_STROBE_2: STD_LOGIC := '0';
	signal PV_SENSE_CHAR_0_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_0_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_1_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_2_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_D2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PV_SENSE_CHAR_3_B2_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";

	-- Outputs

	signal MY_SA_CHAR_0_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_SA_CHAR_1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_SA_CHAR_2_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MY_SA_CHAR_3_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      
procedure checkChar(
        checked: in STD_LOGIC_VECTOR(7 downto 0);
        val: in STD_LOGIC_VECTOR(7 downto 0);
        testname: in string;
        test: in string) is
        begin
          for thebit in 0 to 7 loop
             assert checked(thebit) = val(thebit) report
                testname & " (" & test & ") bit " & Integer'image(thebit) & " failed." severity failure; 
          end loop;
        end procedure;


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: SenseAmps port map(
		FPGA_CLK => FPGA_CLK,
		PY_SENSE_STROBE_1 => PY_SENSE_STROBE_1,
		PY_SENSE_STROBE_2 => PY_SENSE_STROBE_2,
		PV_SENSE_CHAR_0_B1_BUS => PV_SENSE_CHAR_0_B1_BUS,
		PV_SENSE_CHAR_0_B2_BUS => PV_SENSE_CHAR_0_B2_BUS,
		PV_SENSE_CHAR_0_D1_BUS => PV_SENSE_CHAR_0_D1_BUS,
		PV_SENSE_CHAR_0_D2_BUS => PV_SENSE_CHAR_0_D2_BUS,
		PV_SENSE_CHAR_1_B1_BUS => PV_SENSE_CHAR_1_B1_BUS,
		PV_SENSE_CHAR_1_B2_BUS => PV_SENSE_CHAR_1_B2_BUS,
		PV_SENSE_CHAR_1_D1_BUS => PV_SENSE_CHAR_1_D1_BUS,
		PV_SENSE_CHAR_1_D2_BUS => PV_SENSE_CHAR_1_D2_BUS,
		PV_SENSE_CHAR_2_B1_BUS => PV_SENSE_CHAR_2_B1_BUS,
		PV_SENSE_CHAR_2_B2_BUS => PV_SENSE_CHAR_2_B2_BUS,
		PV_SENSE_CHAR_2_D1_BUS => PV_SENSE_CHAR_2_D1_BUS,
		PV_SENSE_CHAR_2_D2_BUS => PV_SENSE_CHAR_2_D2_BUS,
		PV_SENSE_CHAR_3_B1_BUS => PV_SENSE_CHAR_3_B1_BUS,
		PV_SENSE_CHAR_3_D1_BUS => PV_SENSE_CHAR_3_D1_BUS,
		PV_SENSE_CHAR_3_D2_BUS => PV_SENSE_CHAR_3_D2_BUS,
		PV_SENSE_CHAR_3_B2_BUS => PV_SENSE_CHAR_3_B2_BUS,
		MY_SA_CHAR_0_BUS => MY_SA_CHAR_0_BUS,
		MY_SA_CHAR_1_BUS => MY_SA_CHAR_1_BUS,
		MY_SA_CHAR_2_BUS => MY_SA_CHAR_2_BUS,
		MY_SA_CHAR_3_BUS => MY_SA_CHAR_3_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

-- Don't need a clock for this test.

--fpga_clk_process: process

--   constant clk_period : time := 10 ns;

--   begin
--      fpga_clk <= '0';
--      wait for clk_period / 2;
--      fpga_clk <= '1';
--      wait for clk_period / 2;
--   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tvb1, tvb2, tvd1, tvd2: std_logic_vector(7 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "36.10.0%.1        ";
   
   -- Set these to 1 or 0.  Doing in this way cuts the test in half!
   
   PY_SENSE_STROBE_1 <= '1';
   PY_SENSE_STROBE_2 <= '1';
   
   

   for b1 in 254 to 256 loop
      tvb1 := std_logic_vector(to_unsigned(b1,tvb1'Length));
      PV_SENSE_CHAR_0_B1_BUS <= tvb1;
      PV_SENSE_CHAR_1_B1_BUS <= tvb1(0) & tvb1(7 downto 1);
      PV_SENSE_CHAR_2_B1_BUS <= tvb1(1 downto 0) & tvb1(7 downto 2);
      PV_SENSE_CHAR_3_B1_BUS <= tvb1(2 downto 0) & tvb1(7 downto 3);
      
      for b2 in 0 to 256 loop
         tvb2 := std_logic_vector(to_unsigned(b2,tvb2'Length));
         PV_SENSE_CHAR_0_B2_BUS <= tvb2;
         PV_SENSE_CHAR_1_B2_BUS <= tvb2(0) & tvb2(7 downto 1);
         PV_SENSE_CHAR_2_B2_BUS <= tvb2(1 downto 0) & tvb2(7 downto 2);
         PV_SENSE_CHAR_3_B2_BUS <= tvb2(2 downto 0) & tvb2(7 downto 3);

         for d1 in 0 to 256 loop
            tvd1 := std_logic_vector(to_unsigned(d1,tvd1'Length));
            PV_SENSE_CHAR_0_D1_BUS <= tvd1;
            PV_SENSE_CHAR_1_D1_BUS <= tvd1(0) & tvd1(7 downto 1);
            PV_SENSE_CHAR_2_D1_BUS <= tvd1(1 downto 0) & tvd1(7 downto 2);
            PV_SENSE_CHAR_3_D1_BUS <= tvd1(2 downto 0) & tvd1(7 downto 3);
            
            for d2 in 0 to 256 loop
               tvd2 := std_logic_vector(to_unsigned(d2,tvd2'Length));
               PV_SENSE_CHAR_0_D2_BUS <= tvd2;
               PV_SENSE_CHAR_1_D2_BUS <= tvd2(0) & tvd2(7 downto 1);
               PV_SENSE_CHAR_2_D2_BUS <= tvd2(1 downto 0) & tvd2(7 downto 2);
               PV_SENSE_CHAR_3_D2_BUS <= tvd2(2 downto 0) & tvd2(7 downto 3);
               
               -- Do the "harder" test WITH strobe FIRST
               
--               for strobe in 1 downto 0 loop
--                  if(strobe = 0) then
--                     PY_SENSE_STROBE_1 <= '0';
--                     PY_SENSE_STROBE_2 <= '0';
--                  else
--                     PY_SENSE_STROBE_1 <= '1';
--                     PY_SENSE_STROBE_2 <= '1';
--                  end if;
                  
                  wait for 1 ns;

                  if(PY_SENSE_STROBE_1 = '0') then
                     checkChar(MY_SA_CHAR_0_BUS,"11111111",testName,"Char 0 no strobe");
                     checkChar(MY_SA_CHAR_1_BUS,"11111111",testName,"Char 0 no strobe");
                     checkChar(MY_SA_CHAR_2_BUS,"11111111",testName,"Char 0 no strobe");
                     checkChar(MY_SA_CHAR_3_BUS,"11111111",testName,"Char 0 no strobe");
                  else
                     checkChar(MY_SA_CHAR_0_BUS,not((tvb1 and tvb2) or (tvd1 and tvd2)),
                        testName,"Char 0 w/strobe");
                     checkChar(MY_SA_CHAR_1_BUS,
                        not((tvb1(0) & tvb1(7 downto 1) and tvb2(0) & tvb2(7 downto 1)) 
                           or (tvd1(0) & tvd1(7 downto 1) and tvd2(0) & tvd2(7 downto 1))),
                           testName,"Char 1 w/strobe");                        
                     checkChar(MY_SA_CHAR_2_BUS,
                        not((tvb1(1 downto 0) & tvb1(7 downto 2) and tvb2(1 downto 0) & tvb2(7 downto 2))
                            or (tvd1(1 downto 0) & tvd1(7 downto 2) and tvd2(1 downto 0) & tvd2(7 downto 2))),
                              testName,"Char 2 w/strobe");
                     checkChar(MY_SA_CHAR_3_BUS,
                        not((tvb1(2 downto 0) & tvb1(7 downto 3) and tvb2(2 downto 0) & tvb2(7 downto 3))
                            or (tvd1(2 downto 0) & tvd1(7 downto 3) and tvd2(2 downto 0) & tvd2(7 downto 3))),
                              testName,"Char 0 w/strobe");
                  end if;
                  
--               end loop;
            end loop;
         end loop;
      end loop;
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 10000 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
