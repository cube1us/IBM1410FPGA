-- Test Bench VHDL for IBM SMS ALD page 32.10.02.1
-- Title: ENCODING X PWR GATES FEATURE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/16/2020 12:59:38 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_32_10_02_1_ENCODING_X_PWR_GATES_FEATURE_tb is
end ALD_32_10_02_1_ENCODING_X_PWR_GATES_FEATURE_tb;

architecture behavioral of ALD_32_10_02_1_ENCODING_X_PWR_GATES_FEATURE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_32_10_02_1_ENCODING_X_PWR_GATES_FEATURE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MY_MEM_AR_NOT_TP0B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TP2B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TP8B:	 in STD_LOGIC;
		MY_MEM_AR_TP0B:	 in STD_LOGIC;
		MY_MEM_AR_TP1B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TP1B:	 in STD_LOGIC;
		MY_MEM_AR_TP2B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TP4B:	 in STD_LOGIC;
		MY_MEM_AR_TP8B:	 in STD_LOGIC;
		MY_MEM_AR_TP4B:	 in STD_LOGIC;
		PY_X_LSMS_GATE_SEL_00_09:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_10_19:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_20_29:	 out STD_LOGIC;
		MY_MEM_AR_NOT_TP0B_JRJ:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_30_39:	 out STD_LOGIC;
		MY_MEM_AR_NOT_TP1B_JRJ:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_90_99:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_40_49:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_50_59:	 out STD_LOGIC;
		MY_MEM_AR_NOT_TP2B_JRJ:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_60_69:	 out STD_LOGIC;
		PY_MEM_AR_NOT_TP8B_JRJ:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_70_79:	 out STD_LOGIC;
		MY_MEM_AR_NOT_TP4B_JRJ:	 out STD_LOGIC;
		PY_X_LSMS_GATE_SEL_80_89:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MY_MEM_AR_NOT_TP0B: STD_LOGIC := '1';
	signal MY_MEM_AR_NOT_TP2B: STD_LOGIC := '1';
	signal MY_MEM_AR_NOT_TP8B: STD_LOGIC := '1';
	signal MY_MEM_AR_TP0B: STD_LOGIC := '1';
	signal MY_MEM_AR_TP1B: STD_LOGIC := '1';
	signal MY_MEM_AR_NOT_TP1B: STD_LOGIC := '1';
	signal MY_MEM_AR_TP2B: STD_LOGIC := '1';
	signal MY_MEM_AR_NOT_TP4B: STD_LOGIC := '1';
	signal MY_MEM_AR_TP8B: STD_LOGIC := '1';
	signal MY_MEM_AR_TP4B: STD_LOGIC := '1';

	-- Outputs

	signal PY_X_LSMS_GATE_SEL_00_09: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_10_19: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_20_29: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP0B_JRJ: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_30_39: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP1B_JRJ: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_90_99: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_40_49: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_50_59: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP2B_JRJ: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_60_69: STD_LOGIC;
	signal PY_MEM_AR_NOT_TP8B_JRJ: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_70_79: STD_LOGIC;
	signal MY_MEM_AR_NOT_TP4B_JRJ: STD_LOGIC;
	signal PY_X_LSMS_GATE_SEL_80_89: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_32_10_02_1_ENCODING_X_PWR_GATES_FEATURE port map(
		FPGA_CLK => FPGA_CLK,
		MY_MEM_AR_NOT_TP0B => MY_MEM_AR_NOT_TP0B,
		MY_MEM_AR_NOT_TP2B => MY_MEM_AR_NOT_TP2B,
		MY_MEM_AR_NOT_TP8B => MY_MEM_AR_NOT_TP8B,
		MY_MEM_AR_TP0B => MY_MEM_AR_TP0B,
		MY_MEM_AR_TP1B => MY_MEM_AR_TP1B,
		MY_MEM_AR_NOT_TP1B => MY_MEM_AR_NOT_TP1B,
		MY_MEM_AR_TP2B => MY_MEM_AR_TP2B,
		MY_MEM_AR_NOT_TP4B => MY_MEM_AR_NOT_TP4B,
		MY_MEM_AR_TP8B => MY_MEM_AR_TP8B,
		MY_MEM_AR_TP4B => MY_MEM_AR_TP4B,
		PY_X_LSMS_GATE_SEL_00_09 => PY_X_LSMS_GATE_SEL_00_09,
		PY_X_LSMS_GATE_SEL_10_19 => PY_X_LSMS_GATE_SEL_10_19,
		PY_X_LSMS_GATE_SEL_20_29 => PY_X_LSMS_GATE_SEL_20_29,
		MY_MEM_AR_NOT_TP0B_JRJ => MY_MEM_AR_NOT_TP0B_JRJ,
		PY_X_LSMS_GATE_SEL_30_39 => PY_X_LSMS_GATE_SEL_30_39,
		MY_MEM_AR_NOT_TP1B_JRJ => MY_MEM_AR_NOT_TP1B_JRJ,
		PY_X_LSMS_GATE_SEL_90_99 => PY_X_LSMS_GATE_SEL_90_99,
		PY_X_LSMS_GATE_SEL_40_49 => PY_X_LSMS_GATE_SEL_40_49,
		PY_X_LSMS_GATE_SEL_50_59 => PY_X_LSMS_GATE_SEL_50_59,
		MY_MEM_AR_NOT_TP2B_JRJ => MY_MEM_AR_NOT_TP2B_JRJ,
		PY_X_LSMS_GATE_SEL_60_69 => PY_X_LSMS_GATE_SEL_60_69,
		PY_MEM_AR_NOT_TP8B_JRJ => PY_MEM_AR_NOT_TP8B_JRJ,
		PY_X_LSMS_GATE_SEL_70_79 => PY_X_LSMS_GATE_SEL_70_79,
		MY_MEM_AR_NOT_TP4B_JRJ => MY_MEM_AR_NOT_TP4B_JRJ,
		PY_X_LSMS_GATE_SEL_80_89 => PY_X_LSMS_GATE_SEL_80_89);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(4 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable results: std_logic_vector(9 downto 0);

   begin

   -- Your test bench code

   testName := "32.10.02.1        ";

   for tt in 0 to 9 loop
      tv := BCD.twoOfFive(tt);

		MY_MEM_AR_TP0B <= not tv(0);
		MY_MEM_AR_NOT_TP0B <= not(not tv(0));
		MY_MEM_AR_TP1B <= not tv(1);
		MY_MEM_AR_NOT_TP1B <= not(not tv(1));
		MY_MEM_AR_TP2B <= not tv(2);
		MY_MEM_AR_NOT_TP2B <= not(not tv(2));
		MY_MEM_AR_TP4B <= not tv(3);
		MY_MEM_AR_NOT_TP4B <= not(not tv(3));
		MY_MEM_AR_TP8B <= not tv(4);
		MY_MEM_AR_NOT_TP8B <= not(not tv(4));
		
		wait for 30 ns;
		results := 
		   PY_X_LSMS_GATE_SEL_90_99 &
		   PY_X_LSMS_GATE_SEL_80_89 &
		   PY_X_LSMS_GATE_SEL_70_79 & 
		   PY_X_LSMS_GATE_SEL_60_69 & 
		   PY_X_LSMS_GATE_SEL_50_59 & 
		   PY_X_LSMS_GATE_SEL_40_49 & 
		   PY_X_LSMS_GATE_SEL_30_39 & 
		   PY_X_LSMS_GATE_SEL_20_29 & 
		   PY_X_LSMS_GATE_SEL_10_19 & 
		   PY_X_LSMS_GATE_SEL_00_09; 
      
      for bitnum in 0 to 9 loop
         if(bitnum = tt) then
            check1(results(bitnum),'1',testName,"Gate Set " & Integer'image(tt) & " bitnum " & Integer'image(bitnum) & " failed");
         else
            check1(results(bitnum),'0',testName,"Gate NOT Set " & Integer'image(tt) & " bitnum " & Integer'image(bitnum) & " failed");
         end if;
      end loop;
      
      results :=       
		   PY_MEM_AR_NOT_TP8B_JRJ & 
         MY_MEM_AR_NOT_TP4B_JRJ & 
         MY_MEM_AR_NOT_TP2B_JRJ & 
         MY_MEM_AR_NOT_TP1B_JRJ & 
         MY_MEM_AR_NOT_TP0B_JRJ; 
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
