-- Test Bench VHDL for IBM SMS ALD page 45.50.07.1
-- Title: CONSOLE PRNTR TILT+FUNCTION CTRLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 11/2/2020 3:49:52 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_45_50_07_1_CONSOLE_PRNTR_TILT_FUNCTION_CTRLS_tb is
end ALD_45_50_07_1_CONSOLE_PRNTR_TILT_FUNCTION_CTRLS_tb;

architecture behavioral of ALD_45_50_07_1_CONSOLE_PRNTR_TILT_FUNCTION_CTRLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_45_50_07_1_CONSOLE_PRNTR_TILT_FUNCTION_CTRLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PP_SPECIAL_OR_12V_FOR_REL_DRIVERS:	 in STD_LOGIC;
		PS_CONS_CHAR_CONTROL:	 in STD_LOGIC;
		MS_CONS_ERROR_CONTROL:	 in STD_LOGIC;
		MS_CONS_WM_CONTROL:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_A_BIT:	 in STD_LOGIC;
		PS_SOLENOID_DRIVER_STROBE:	 in STD_LOGIC;
		PS_CONS_BACK_SPACE_CONTROL:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_B_BIT:	 in STD_LOGIC;
		PS_CONSOLE_CARRIAGE_RETURN:	 in STD_LOGIC;
		MS_STOP_PGM_RES_CARRIAGE_RETURN:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_C_BIT:	 in STD_LOGIC;
		PS_FUNCTION_CONTROL:	 in STD_LOGIC;
		PS_CONSOLE_SPACE_FUNCTION:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_8_BIT:	 in STD_LOGIC;
		MS_CONSOLE_OUTPUT_4_BIT:	 in STD_LOGIC;
		MS_CONS_PRINTER_END_OF_LINE:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_2_BIT:	 in STD_LOGIC;
		PS_CONSOLE_OUTPUT_1_BIT:	 in STD_LOGIC;
		PS_KEYBOARD_UNLOCK:	 in STD_LOGIC;
		MS_CONSOLE_OUTPUT_A_BIT:	 out STD_LOGIC;
		PW_CONS_PRINTER_T1_SOLENOID:	 out STD_LOGIC;
		PW_CONS_PRINTER_T2_SOLENOID:	 out STD_LOGIC;
		MS_CONSOLE_OUTPUT_B_BIT:	 out STD_LOGIC;
		PW_CONS_PRINTER_CHK_SOLENOID:	 out STD_LOGIC;
		PW_BACKSPACE_SOLENOID:	 out STD_LOGIC;
		MS_CONS_GATED_CARRIAGE_RETURN:	 out STD_LOGIC;
		PW_CARRIAGE_RETURN_SOLENOID:	 out STD_LOGIC;
		PW_SPACE_SOLENOID:	 out STD_LOGIC;
		MS_CONS_OUTPUT_CBA8_421:	 out STD_LOGIC;
		MW_KEYBOARD_LOCK_SOLENOID:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PP_SPECIAL_OR_12V_FOR_REL_DRIVERS: STD_LOGIC := '0';
	signal PS_CONS_CHAR_CONTROL: STD_LOGIC := '0';
	signal MS_CONS_ERROR_CONTROL: STD_LOGIC := '1';
	signal MS_CONS_WM_CONTROL: STD_LOGIC := '1';
	signal PS_CONSOLE_OUTPUT_A_BIT: STD_LOGIC := '0';
	signal PS_SOLENOID_DRIVER_STROBE: STD_LOGIC := '0';
	signal PS_CONS_BACK_SPACE_CONTROL: STD_LOGIC := '0';
	signal PS_CONSOLE_OUTPUT_B_BIT: STD_LOGIC := '0';
	signal PS_CONSOLE_CARRIAGE_RETURN: STD_LOGIC := '0';
	signal MS_STOP_PGM_RES_CARRIAGE_RETURN: STD_LOGIC := '1';
	signal PS_CONSOLE_OUTPUT_C_BIT: STD_LOGIC := '0';
	signal PS_FUNCTION_CONTROL: STD_LOGIC := '0';
	signal PS_CONSOLE_SPACE_FUNCTION: STD_LOGIC := '0';
	signal PS_CONSOLE_OUTPUT_8_BIT: STD_LOGIC := '0';
	signal MS_CONSOLE_OUTPUT_4_BIT: STD_LOGIC := '1';
	signal MS_CONS_PRINTER_END_OF_LINE: STD_LOGIC := '1';
	signal PS_CONSOLE_OUTPUT_2_BIT: STD_LOGIC := '0';
	signal PS_CONSOLE_OUTPUT_1_BIT: STD_LOGIC := '0';
	signal PS_KEYBOARD_UNLOCK: STD_LOGIC := '0';

	-- Outputs

	signal MS_CONSOLE_OUTPUT_A_BIT: STD_LOGIC;
	signal PW_CONS_PRINTER_T1_SOLENOID: STD_LOGIC;
	signal PW_CONS_PRINTER_T2_SOLENOID: STD_LOGIC;
	signal MS_CONSOLE_OUTPUT_B_BIT: STD_LOGIC;
	signal PW_CONS_PRINTER_CHK_SOLENOID: STD_LOGIC;
	signal PW_BACKSPACE_SOLENOID: STD_LOGIC;
	signal MS_CONS_GATED_CARRIAGE_RETURN: STD_LOGIC;
	signal PW_CARRIAGE_RETURN_SOLENOID: STD_LOGIC;
	signal PW_SPACE_SOLENOID: STD_LOGIC;
	signal MS_CONS_OUTPUT_CBA8_421: STD_LOGIC;
	signal MW_KEYBOARD_LOCK_SOLENOID: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_45_50_07_1_CONSOLE_PRNTR_TILT_FUNCTION_CTRLS port map(
		FPGA_CLK => FPGA_CLK,
		PP_SPECIAL_OR_12V_FOR_REL_DRIVERS => PP_SPECIAL_OR_12V_FOR_REL_DRIVERS,
		PS_CONS_CHAR_CONTROL => PS_CONS_CHAR_CONTROL,
		MS_CONS_ERROR_CONTROL => MS_CONS_ERROR_CONTROL,
		MS_CONS_WM_CONTROL => MS_CONS_WM_CONTROL,
		PS_CONSOLE_OUTPUT_A_BIT => PS_CONSOLE_OUTPUT_A_BIT,
		PS_SOLENOID_DRIVER_STROBE => PS_SOLENOID_DRIVER_STROBE,
		PS_CONS_BACK_SPACE_CONTROL => PS_CONS_BACK_SPACE_CONTROL,
		PS_CONSOLE_OUTPUT_B_BIT => PS_CONSOLE_OUTPUT_B_BIT,
		PS_CONSOLE_CARRIAGE_RETURN => PS_CONSOLE_CARRIAGE_RETURN,
		MS_STOP_PGM_RES_CARRIAGE_RETURN => MS_STOP_PGM_RES_CARRIAGE_RETURN,
		PS_CONSOLE_OUTPUT_C_BIT => PS_CONSOLE_OUTPUT_C_BIT,
		PS_FUNCTION_CONTROL => PS_FUNCTION_CONTROL,
		PS_CONSOLE_SPACE_FUNCTION => PS_CONSOLE_SPACE_FUNCTION,
		PS_CONSOLE_OUTPUT_8_BIT => PS_CONSOLE_OUTPUT_8_BIT,
		MS_CONSOLE_OUTPUT_4_BIT => MS_CONSOLE_OUTPUT_4_BIT,
		MS_CONS_PRINTER_END_OF_LINE => MS_CONS_PRINTER_END_OF_LINE,
		PS_CONSOLE_OUTPUT_2_BIT => PS_CONSOLE_OUTPUT_2_BIT,
		PS_CONSOLE_OUTPUT_1_BIT => PS_CONSOLE_OUTPUT_1_BIT,
		PS_KEYBOARD_UNLOCK => PS_KEYBOARD_UNLOCK,
		MS_CONSOLE_OUTPUT_A_BIT => MS_CONSOLE_OUTPUT_A_BIT,
		PW_CONS_PRINTER_T1_SOLENOID => PW_CONS_PRINTER_T1_SOLENOID,
		PW_CONS_PRINTER_T2_SOLENOID => PW_CONS_PRINTER_T2_SOLENOID,
		MS_CONSOLE_OUTPUT_B_BIT => MS_CONSOLE_OUTPUT_B_BIT,
		PW_CONS_PRINTER_CHK_SOLENOID => PW_CONS_PRINTER_CHK_SOLENOID,
		PW_BACKSPACE_SOLENOID => PW_BACKSPACE_SOLENOID,
		MS_CONS_GATED_CARRIAGE_RETURN => MS_CONS_GATED_CARRIAGE_RETURN,
		PW_CARRIAGE_RETURN_SOLENOID => PW_CARRIAGE_RETURN_SOLENOID,
		PW_SPACE_SOLENOID => PW_SPACE_SOLENOID,
		MS_CONS_OUTPUT_CBA8_421 => MS_CONS_OUTPUT_CBA8_421,
		MW_KEYBOARD_LOCK_SOLENOID => MW_KEYBOARD_LOCK_SOLENOID);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.49.04.1        X";  -- NOTE:  Remove X when editing to set correct length!

   for tt in 0 to 2**25 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);
      p := tv(14);
      q := tv(15);
      r := tv(16);
      s := tv(17);
      t := tv(18);
      u := tv(19);
      v := tv(20);
      w := tv(21);
      x := tv(22);
      y := tv(23);
      z := tv(24);

      
      wait for 30 ns;
      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
