-- Test Bench VHDL for IBM SMS ALD page 19.10.06.1
-- Title: I-O UNIT INTERRUPT COND LATCHES
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/14/2020 8:44:13 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_19_10_06_1_I_O_UNIT_INTERRUPT_COND_LATCHES_tb is
end ALD_19_10_06_1_I_O_UNIT_INTERRUPT_COND_LATCHES_tb;

architecture behavioral of ALD_19_10_06_1_I_O_UNIT_INTERRUPT_COND_LATCHES_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_19_10_06_1_I_O_UNIT_INTERRUPT_COND_LATCHES
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_Y_OP_DOT_TEST_RESET:	 in STD_LOGIC;
		PS_U_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		MS_E_CH_IN_PROCESS:	 in STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E:	 in STD_LOGIC;
		MS_PROGRAM_RESET_6:	 in STD_LOGIC;
		MS_SEL_I_O_FINISH_PULSE:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS_1:	 in STD_LOGIC;
		PS_PRIORITY_SW_ON:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		MS_SEL_I_O_UNIT_INTR_COND:	 out STD_LOGIC;
		PS_SEL_I_O_UNIT_INTR_COND:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_Y_OP_DOT_TEST_RESET: STD_LOGIC := '0';
	signal PS_U_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal PS_I_OP_DOT_I_CYCLE_DOT_E: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_6: STD_LOGIC := '1';
	signal MS_SEL_I_O_FINISH_PULSE: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_3_POS_1: STD_LOGIC := '0';
	signal PS_PRIORITY_SW_ON: STD_LOGIC := '0';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';

	-- Outputs

	signal MS_SEL_I_O_UNIT_INTR_COND: STD_LOGIC;
	signal PS_SEL_I_O_UNIT_INTR_COND: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_19_10_06_1_I_O_UNIT_INTERRUPT_COND_LATCHES port map(
		FPGA_CLK => FPGA_CLK,
		PS_Y_OP_DOT_TEST_RESET => PS_Y_OP_DOT_TEST_RESET,
		PS_U_SYMBOL_OP_MODIFIER => PS_U_SYMBOL_OP_MODIFIER,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		PS_I_OP_DOT_I_CYCLE_DOT_E => PS_I_OP_DOT_I_CYCLE_DOT_E,
		MS_PROGRAM_RESET_6 => MS_PROGRAM_RESET_6,
		MS_SEL_I_O_FINISH_PULSE => MS_SEL_I_O_FINISH_PULSE,
		PS_CONS_CLOCK_3_POS_1 => PS_CONS_CLOCK_3_POS_1,
		PS_PRIORITY_SW_ON => PS_PRIORITY_SW_ON,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		MS_SEL_I_O_UNIT_INTR_COND => MS_SEL_I_O_UNIT_INTR_COND,
		PS_SEL_I_O_UNIT_INTR_COND => PS_SEL_I_O_UNIT_INTR_COND);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "19.10.06.1        ";

   for tt in 0 to 2**6 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      f := tv(4);
      h := tv(5);
          
      -- First reset the latches 
      -- (I am not sure what happens with One . Only One latch, as when the reset hits,
      -- both sides (set and reset) have an active output.  But once the program reset
      -- goes away, that resolves
      
      MS_PROGRAM_RESET_6 <= '0';
      wait for 30 ns;
      MS_PROGRAM_RESET_6 <= '1';
      MS_E_CH_IN_PROCESS <= '1'; -- During reset to make output visible
      wait for 30 ns;

      check1(PS_SEL_I_O_UNIT_INTR_COND,'0',testName,"+S Loop Reset");
      check1(MS_SEL_I_O_UNIT_INTR_COND,'1',testName,"-S Loop Reset");

      -- At this point, the priority switch signal is off, so block 4G output is high
      -- So now, maybe turn on the priority switch.  If h is true, then the output of
      -- block at 4g goes low

		PS_PRIORITY_SW_ON <= h;
		wait for 30 ns;
      
      -- Next comes console clock 3.  That might set the I/O Interrupt latch: if the
      -- switch is on and the output from 4G is high.
      
      PS_CONS_CLOCK_3_POS_1 <= '1';
      wait for 30ns;
      PS_CONS_CLOCK_3_POS_1 <= '0';
      wait for 30ns;
      
      -- Now, if the I/O Interrupt Latch set and I Op.I Cycle.E goes active,
      -- it will set the Delayed Interrupt Latch
      
		PS_I_OP_DOT_I_CYCLE_DOT_E <= d;
		wait for 30 ns;
		
		-- Now, if the E Ch is not in process, and the delayed interrupt latch set,
		-- we will set that in the output.  But we won't see if if the E Ch is in process.

		MS_E_CH_IN_PROCESS <= not c;
		wait for 30 ns;
		
		check1(PS_SEL_I_O_UNIT_INTR_COND,h and d and not c,testName,"1A"); 
		check1(MS_SEL_I_O_UNIT_INTR_COND,not (h and d and not c),testName,"1B");
		
		-- OK, so now maybe the I/O Interrupt Latch got set because some I/O Finished
				
		MS_SEL_I_O_FINISH_PULSE <= not f;
		wait for 30 ns;
      MS_SEL_I_O_FINISH_PULSE <= '1';  -- The Finish pulse is gone by now.
      wait for 30 ns;
      
		check1(PS_SEL_I_O_UNIT_INTR_COND,(h or f) and d and not c,testName,"1C"); 
      check1(MS_SEL_I_O_UNIT_INTR_COND,not((h or f) and d and not c),testName,"1D");		                   
      
      -- Next, maybe we reset the I/O Interrupt and Delayed Interrupt Latch
      
      -- First, Console Clock 1 will reset the One . Only one latch if the 
      -- Interrupt latch was set
      
      PS_CONS_CLOCK_1_POS <= '1';
      wait for 30 ns;
      PS_CONS_CLOCK_1_POS <= '0';
      wait for 30 ns;
      
      -- Maybe reset the I/O Unit Interrupt latch and Delayed Interrupt latches
      -- (Signals a and b)
      
 		PS_Y_OP_DOT_TEST_RESET <= a;
		PS_U_SYMBOL_OP_MODIFIER <= b;		     
      wait for 30 ns;

		check1(PS_SEL_I_O_UNIT_INTR_COND,(h or f) and d and not c and not(a and b),testName,"1E"); 
      check1(MS_SEL_I_O_UNIT_INTR_COND,not((h or f) and d and not c and not (a and b)),testName,"1F");		                   
                                          
      -- Set things back to their default state
      
		PS_Y_OP_DOT_TEST_RESET <= '0';
      PS_U_SYMBOL_OP_MODIFIER <= '0';
      MS_E_CH_IN_PROCESS <= '1';
      PS_I_OP_DOT_I_CYCLE_DOT_E <= '0';
      MS_SEL_I_O_FINISH_PULSE <= '1';
      PS_CONS_CLOCK_3_POS_1 <= '0';
      PS_PRIORITY_SW_ON <= '0';
      PS_CONS_CLOCK_1_POS <= '0';
                                                
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
