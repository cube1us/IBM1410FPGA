-- VHDL for IBM SMS ALD page 13.12.02.1
-- Title: OPERATION MODIFIER REGISTER
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/20/2020 12:29:42 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_12_02_1_OPERATION_MODIFIER_REGISTER is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_B_CH_NOT_A_BIT:	 in STD_LOGIC;
		PS_B_CH_A_BIT:	 in STD_LOGIC;
		PS_OP_REG_B_BIT:	 in STD_LOGIC;
		MS_OP_REG_A_BIT:	 in STD_LOGIC;
		PS_B_CH_NOT_8_BIT:	 in STD_LOGIC;
		MS_RESET_OP_MOD_REG:	 in STD_LOGIC;
		PS_B_CH_8_BIT:	 in STD_LOGIC;
		PS_SET_OP_MOD_REG:	 in STD_LOGIC;
		PS_1401_P_OP_CODE:	 in STD_LOGIC;
		PS_1401_DATA_MOVE_SET_OP_MOD:	 in STD_LOGIC;
		PS_B_CH_NOT_4_BIT:	 in STD_LOGIC;
		PS_B_CH_4_BIT:	 in STD_LOGIC;
		PS_1401_L_NOT_PERCENT_OP_CODE:	 in STD_LOGIC;
		PS_OP_MOD_REG_A_BIT:	 out STD_LOGIC;
		PS_OP_MOD_REG_NOT_A_BIT:	 out STD_LOGIC;
		PS_OP_MOD_REG_8_BIT:	 out STD_LOGIC;
		PS_OP_MOD_REG_NOT_8_BIT:	 out STD_LOGIC;
		PS_OP_MOD_REG_4_BIT:	 out STD_LOGIC;
		PS_OP_MOD_REG_NOT_4_BIT:	 out STD_LOGIC;
		LAMP_11C8F08:	 out STD_LOGIC;
		LAMP_11C8G08:	 out STD_LOGIC;
		LAMP_11C8H08:	 out STD_LOGIC);
end ALD_13_12_02_1_OPERATION_MODIFIER_REGISTER;

architecture behavioral of ALD_13_12_02_1_OPERATION_MODIFIER_REGISTER is 

	signal OUT_2A_C: STD_LOGIC;
	signal OUT_5B_E: STD_LOGIC;
	signal OUT_4B_E: STD_LOGIC;
	signal OUT_4B_E_Latch: STD_LOGIC;
	signal OUT_3B_C: STD_LOGIC;
	signal OUT_3B_C_Latch: STD_LOGIC;
	signal OUT_2B_H: STD_LOGIC;
	signal OUT_5C_B: STD_LOGIC;
	signal OUT_2C_A: STD_LOGIC;
	signal OUT_5D_E: STD_LOGIC;
	signal OUT_2D_A: STD_LOGIC;
	signal OUT_5E_G: STD_LOGIC;
	signal OUT_4E_F: STD_LOGIC;
	signal OUT_4E_F_Latch: STD_LOGIC;
	signal OUT_3E_D: STD_LOGIC;
	signal OUT_3E_D_Latch: STD_LOGIC;
	signal OUT_2E_C: STD_LOGIC;
	signal OUT_5F_F: STD_LOGIC;
	signal OUT_2F_B: STD_LOGIC;
	signal OUT_5G_G: STD_LOGIC;
	signal OUT_2G_H: STD_LOGIC;
	signal OUT_5H_D: STD_LOGIC;
	signal OUT_4H_E: STD_LOGIC;
	signal OUT_4H_E_Latch: STD_LOGIC;
	signal OUT_3H_H: STD_LOGIC;
	signal OUT_3H_H_Latch: STD_LOGIC;
	signal OUT_2H_A: STD_LOGIC;
	signal OUT_5I_E: STD_LOGIC;
	signal OUT_4I_F: STD_LOGIC;
	signal OUT_2I_D: STD_LOGIC;

begin


	SMS_AEK_2A: entity SMS_AEK
	    port map (
		IN1 => OUT_4B_E,	-- Pin D
		OUT1 => OUT_2A_C,
		IN2 => OPEN );

	OUT_5B_E <= NOT(PS_B_CH_NOT_A_BIT AND PS_SET_OP_MOD_REG );
	OUT_4B_E_Latch <= NOT(OUT_5B_E AND OUT_3B_C AND MS_RESET_OP_MOD_REG );
	OUT_3B_C_Latch <= NOT(OUT_4B_E AND OUT_5D_E AND OUT_5C_B );

	SMS_AEK_2B: entity SMS_AEK
	    port map (
		IN1 => OUT_3B_C,	-- Pin P
		OUT1 => OUT_2B_H,
		IN2 => OPEN );

	OUT_5C_B <= NOT(PS_B_CH_A_BIT AND PS_SET_OP_MOD_REG );
	OUT_2C_A <= NOT OUT_2B_H;
	LAMP_11C8F08 <= OUT_2C_A;
	OUT_5D_E <= NOT(PS_OP_REG_B_BIT AND MS_OP_REG_A_BIT AND PS_1401_DATA_MOVE_SET_OP_MOD );

	SMS_AEK_2D: entity SMS_AEK
	    port map (
		IN1 => OUT_4E_F,	-- Pin F
		OUT1 => OUT_2D_A,
		IN2 => OPEN );

	OUT_5E_G <= NOT(PS_B_CH_NOT_8_BIT AND PS_SET_OP_MOD_REG );
	OUT_4E_F_Latch <= NOT(OUT_5E_G AND OUT_3E_D AND MS_RESET_OP_MOD_REG );
	OUT_3E_D_Latch <= NOT(OUT_4E_F AND OUT_5G_G AND OUT_5F_F );

	SMS_AEK_2E: entity SMS_AEK
	    port map (
		IN1 => OUT_3E_D,	-- Pin D
		OUT1 => OUT_2E_C,
		IN2 => OPEN );

	OUT_5F_F <= NOT(PS_B_CH_8_BIT AND PS_SET_OP_MOD_REG );
	OUT_2F_B <= NOT OUT_2E_C;
	LAMP_11C8G08 <= OUT_2F_B;
	OUT_5G_G <= NOT(PS_1401_P_OP_CODE AND PS_1401_DATA_MOVE_SET_OP_MOD );

	SMS_AEK_2G: entity SMS_AEK
	    port map (
		IN1 => OUT_4H_E,	-- Pin P
		OUT1 => OUT_2G_H,
		IN2 => OPEN );

	OUT_5H_D <= NOT(PS_B_CH_NOT_4_BIT AND PS_SET_OP_MOD_REG );
	OUT_4H_E_Latch <= NOT(OUT_5H_D AND MS_RESET_OP_MOD_REG AND OUT_3H_H );
	OUT_3H_H_Latch <= NOT(OUT_4H_E AND OUT_5I_E AND OUT_4I_F );
	OUT_2H_A <= NOT OUT_3H_H;
	OUT_5I_E <= NOT(PS_B_CH_4_BIT AND PS_SET_OP_MOD_REG );
	OUT_4I_F <= NOT(PS_1401_L_NOT_PERCENT_OP_CODE AND PS_1401_DATA_MOVE_SET_OP_MOD );
	OUT_2I_D <= NOT OUT_2H_A;
	LAMP_11C8H08 <= OUT_2I_D;

	PS_OP_MOD_REG_A_BIT <= OUT_2A_C;
	PS_OP_MOD_REG_NOT_A_BIT <= OUT_2B_H;
	PS_OP_MOD_REG_8_BIT <= OUT_2D_A;
	PS_OP_MOD_REG_NOT_8_BIT <= OUT_2E_C;
	PS_OP_MOD_REG_4_BIT <= OUT_2G_H;
	PS_OP_MOD_REG_NOT_4_BIT <= OUT_2H_A;

	Latch_4B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4B_E_Latch,
		Q => OUT_4B_E,
		QBar => OPEN );

	Latch_3B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3B_C_Latch,
		Q => OUT_3B_C,
		QBar => OPEN );

	Latch_4E: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4E_F_Latch,
		Q => OUT_4E_F,
		QBar => OPEN );

	Latch_3E: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3E_D_Latch,
		Q => OUT_3E_D,
		QBar => OPEN );

	Latch_4H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_4H_E_Latch,
		Q => OUT_4H_E,
		QBar => OPEN );

	Latch_3H: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3H_H_Latch,
		Q => OUT_3H_H,
		QBar => OPEN );


end;
