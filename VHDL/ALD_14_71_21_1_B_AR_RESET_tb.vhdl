-- Test Bench VHDL for IBM SMS ALD page 14.71.21.1
-- Title: B AR RESET
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/5/2020 3:55:17 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_14_71_21_1_B_AR_RESET_tb is
end ALD_14_71_21_1_B_AR_RESET_tb;

architecture behavioral of ALD_14_71_21_1_B_AR_RESET_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_14_71_21_1_B_AR_RESET
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_I_RING_5_TIME:	 in STD_LOGIC;
		PS_A_RING_2_TIME:	 in STD_LOGIC;
		PS_SET_B_AR:	 in STD_LOGIC;
		PS_CONSOLE_CYCLE_START:	 in STD_LOGIC;
		MS_NOT_ADDR_DBL_OP_CODES:	 in STD_LOGIC;
		MS_SYSTEM_RESET:	 in STD_LOGIC;
		PS_B_OR_E_OR_F_CYCLE_CTRL:	 in STD_LOGIC;
		PS_LOGIC_GATE_EARLY_B:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_1:	 in STD_LOGIC;
		PS_I_RING_10_TIME:	 in STD_LOGIC;
		PS_INDEX_REQUIRED:	 in STD_LOGIC;
		PS_A_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_LOGIC_GATE_EARLY_F:	 in STD_LOGIC;
		PS_I_RING_1_OR_1401_AND_3_TIME:	 in STD_LOGIC;
		PS_I_RING_8_TIME:	 in STD_LOGIC;
		PS_1401_COND_TEST_OP_CODE:	 in STD_LOGIC;
		MS_1_ADDR_PLUS_MOD_OP_CODES:	 in STD_LOGIC;
		PS_I_RING_6_OR_1401_AND_8_TIME:	 in STD_LOGIC;
		MS_RESET_B_AR:	 out STD_LOGIC;
		PS_2ND_ADDR_INDEX_RES_CTRL:	 out STD_LOGIC;
		MS_RESET_D_AR_1:	 out STD_LOGIC;
		MS_RESET_D_AR_3_1401:	 out STD_LOGIC;
		MS_RESET_D_AR_2:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_I_RING_5_TIME: STD_LOGIC := '0';
	signal PS_A_RING_2_TIME: STD_LOGIC := '0';
	signal PS_SET_B_AR: STD_LOGIC := '0';
	signal PS_CONSOLE_CYCLE_START: STD_LOGIC := '0';
	signal MS_NOT_ADDR_DBL_OP_CODES: STD_LOGIC := '1';
	signal MS_SYSTEM_RESET: STD_LOGIC := '1';
	signal PS_B_OR_E_OR_F_CYCLE_CTRL: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_EARLY_B: STD_LOGIC := '0';
	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC := '0';
	signal PS_I_RING_10_TIME: STD_LOGIC := '0';
	signal PS_INDEX_REQUIRED: STD_LOGIC := '0';
	signal PS_A_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_EARLY_F: STD_LOGIC := '0';
	signal PS_I_RING_1_OR_1401_AND_3_TIME: STD_LOGIC := '0';
	signal PS_I_RING_8_TIME: STD_LOGIC := '0';
	signal PS_1401_COND_TEST_OP_CODE: STD_LOGIC := '0';
	signal MS_1_ADDR_PLUS_MOD_OP_CODES: STD_LOGIC := '1';
	signal PS_I_RING_6_OR_1401_AND_8_TIME: STD_LOGIC := '0';

	-- Outputs

	signal MS_RESET_B_AR: STD_LOGIC;
	signal PS_2ND_ADDR_INDEX_RES_CTRL: STD_LOGIC;
	signal MS_RESET_D_AR_1: STD_LOGIC;
	signal MS_RESET_D_AR_3_1401: STD_LOGIC;
	signal MS_RESET_D_AR_2: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_14_71_21_1_B_AR_RESET port map(
		FPGA_CLK => FPGA_CLK,
		PS_I_RING_5_TIME => PS_I_RING_5_TIME,
		PS_A_RING_2_TIME => PS_A_RING_2_TIME,
		PS_SET_B_AR => PS_SET_B_AR,
		PS_CONSOLE_CYCLE_START => PS_CONSOLE_CYCLE_START,
		MS_NOT_ADDR_DBL_OP_CODES => MS_NOT_ADDR_DBL_OP_CODES,
		MS_SYSTEM_RESET => MS_SYSTEM_RESET,
		PS_B_OR_E_OR_F_CYCLE_CTRL => PS_B_OR_E_OR_F_CYCLE_CTRL,
		PS_LOGIC_GATE_EARLY_B => PS_LOGIC_GATE_EARLY_B,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		PS_I_RING_10_TIME => PS_I_RING_10_TIME,
		PS_INDEX_REQUIRED => PS_INDEX_REQUIRED,
		PS_A_CH_NOT_WM_BIT => PS_A_CH_NOT_WM_BIT,
		PS_LOGIC_GATE_EARLY_F => PS_LOGIC_GATE_EARLY_F,
		PS_I_RING_1_OR_1401_AND_3_TIME => PS_I_RING_1_OR_1401_AND_3_TIME,
		PS_I_RING_8_TIME => PS_I_RING_8_TIME,
		PS_1401_COND_TEST_OP_CODE => PS_1401_COND_TEST_OP_CODE,
		MS_1_ADDR_PLUS_MOD_OP_CODES => MS_1_ADDR_PLUS_MOD_OP_CODES,
		PS_I_RING_6_OR_1401_AND_8_TIME => PS_I_RING_6_OR_1401_AND_8_TIME,
		MS_RESET_B_AR => MS_RESET_B_AR,
		PS_2ND_ADDR_INDEX_RES_CTRL => PS_2ND_ADDR_INDEX_RES_CTRL,
		MS_RESET_D_AR_1 => MS_RESET_D_AR_1,
		MS_RESET_D_AR_3_1401 => MS_RESET_D_AR_3_1401,
		MS_RESET_D_AR_2 => MS_RESET_D_AR_2);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(17 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r: std_logic;
   variable g1, g2, g3, g4, g5, g6: std_logic;

   begin

   -- Your test bench code
   
   testName := "14.71.21.1        ";

   for t in 0 to 262143 loop
      tv := std_logic_vector(to_unsigned(t,tv'Length));
      a := tv(0); 
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      k := tv(10);
      l := tv(11);
      m := tv(12);
      n := tv(13);
      o := tv(14);
      p := tv(15);
      q := tv(16);
      r := tv(17);
      
   	PS_I_RING_5_TIME <= a;
      PS_A_RING_2_TIME <= b;
      PS_SET_B_AR <= c;
      PS_CONSOLE_CYCLE_START <= d;
      MS_NOT_ADDR_DBL_OP_CODES <= not e;
      MS_SYSTEM_RESET <= not f;
      PS_B_OR_E_OR_F_CYCLE_CTRL <= g;
      PS_LOGIC_GATE_EARLY_B <= h;
      PS_1ST_CLOCK_PULSE_1 <= i;
      PS_I_RING_10_TIME <= j;
      PS_INDEX_REQUIRED <= k;
      PS_A_CH_NOT_WM_BIT <= l;
      PS_LOGIC_GATE_EARLY_F <= m;
      PS_I_RING_1_OR_1401_AND_3_TIME <= n;
      PS_I_RING_8_TIME <= o;
      PS_1401_COND_TEST_OP_CODE <= p;
      MS_1_ADDR_PLUS_MOD_OP_CODES <= not q;
      PS_I_RING_6_OR_1401_AND_8_TIME <= r;

      g1 := b and j and k;
      g2 := n and l and m and not e;
      g3 := b and a and k and m and not e;
      g4 := o and l and m and p;
      g5 := r and l and m and not q;
      
      wait for 30 ns;
      check1(MS_RESET_B_AR,
         NOT(i and ((g1 and m) or f or (c and d) or (g and h) or g3 or g2 or g5 or g4)),testName,"Reset B AR");
      check1(PS_2ND_ADDR_INDEX_RES_CTRL,g1,testName,"2ND ADDR INDEX RES CTRL");
      check1(MS_RESET_D_AR_1,NOT G2,testName,"RESET D AR 1");
      check1(MS_RESET_D_AR_3_1401,NOT G4,testName,"RESET D AR 3 1401");
      check1(MS_RESET_D_AR_2,NOT G5,testName,"RESET D AR 2");
           
   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 10 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
