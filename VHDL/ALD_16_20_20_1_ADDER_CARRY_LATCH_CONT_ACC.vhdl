-- VHDL for IBM SMS ALD page 16.20.20.1
-- Title: ADDER CARRY LATCH CONT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/3/2020 6:54:22 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_16_20_20_1_ADDER_CARRY_LATCH_CONT_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_MPLY_DOT_X_DOT_B_DOT_T:	 in STD_LOGIC;
		MS_MPLY_DOT_D_DOT_T:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B0:	 in STD_LOGIC;
		MS_LB_OP_DOT_LIROC:	 in STD_LOGIC;
		MS_MPLY_DOT_X_DOT_B_DOT_S:	 in STD_LOGIC;
		MS_MPLY_DOT_D_DOT_S:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8:	 in STD_LOGIC;
		MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MS_DIV_DOT_LAST_INSN_RO_CYCLE:	 in STD_LOGIC;
		MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_NOT_RC:	 in STD_LOGIC;
		MS_DIV_DOT_2_DOT_D:	 in STD_LOGIC;
		MB_A_OR_S_DOT_B_DOT_1_DOT_S_DOT_BW_DOT_NOT_RC:	 in STD_LOGIC;
		MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9:	 in STD_LOGIC;
		PS_ADDER_CARRY:	 in STD_LOGIC;
		PS_ADDER_NO_CARRY:	 in STD_LOGIC;
		MS_MPLY_DOT_U_OR_Y_DOT_B:	 in STD_LOGIC;
		MS_DIV_DOT_U_OR_Y_DOT_B:	 in STD_LOGIC;
		MB_DIV_DOT_X_DOT_B:	 in STD_LOGIC;
		MS_X_CYCLE:	 in STD_LOGIC;
		MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN:	 in STD_LOGIC;
		MB_RA_OR_RS_OR_A_OR_S_DOT_B_DOT_NOT_BW:	 in STD_LOGIC;
		PS_SET_NO_CARRY:	 out STD_LOGIC;
		PS_SET_CARRY_LATCH:	 out STD_LOGIC);
end ALD_16_20_20_1_ADDER_CARRY_LATCH_CONT_ACC;

architecture behavioral of ALD_16_20_20_1_ADDER_CARRY_LATCH_CONT_ACC is 

	signal OUT_4A_D: STD_LOGIC;
	signal OUT_1A_C: STD_LOGIC;
	signal OUT_1C_K: STD_LOGIC;
	signal OUT_4D_B: STD_LOGIC;
	signal OUT_3D_G: STD_LOGIC;
	signal OUT_3E_G: STD_LOGIC;
	signal OUT_4F_C: STD_LOGIC;
	signal OUT_3F_D: STD_LOGIC;
	signal OUT_4G_R: STD_LOGIC;
	signal OUT_5H_G: STD_LOGIC;
	signal OUT_5I_G: STD_LOGIC;
	signal OUT_4I_C: STD_LOGIC;
	signal OUT_DOT_1A: STD_LOGIC;
	signal OUT_DOT_3D: STD_LOGIC;
	signal OUT_DOT_4H: STD_LOGIC;

begin

	OUT_4A_D <= NOT(MB_MPLY_DOT_MQ_DOT_B_DOT_B1_4 AND MB_MPLY_DOT_MQ_DOT_B_DOT_B0 );
	OUT_1A_C <= NOT(MS_MPLY_DOT_X_DOT_B_DOT_T AND MS_MPLY_DOT_D_DOT_T AND OUT_4G_R );
	OUT_1C_K <= NOT(MS_LB_OP_DOT_LIROC AND MS_RA_OR_RS_DOT_LAST_INSN_RO_CYCLE );
	OUT_4D_B <= NOT(MB_DIV_DOT_MQ_DOT_B_DOT_S_DOT_NOT_RC AND MB_MPLY_DOT_MQ_DOT_B_DOT_T_DOT_B9 AND MB_A_OR_S_DOT_B_DOT_1_DOT_S_DOT_BW_DOT_NOT_RC );
	OUT_3D_G <= NOT(MS_DIV_DOT_LAST_INSN_RO_CYCLE AND MS_DIV_DOT_2_DOT_D );
	OUT_3E_G <= NOT(MS_MPLY_DOT_D_DOT_S AND MS_MPLY_DOT_X_DOT_B_DOT_S AND OUT_4F_C );
	OUT_4F_C <= NOT(PS_ADDER_CARRY AND OUT_DOT_4H );
	OUT_3F_D <= NOT(MB_MPLY_DOT_MQ_DOT_B_DOT_B5_8 );
	OUT_4G_R <= NOT(PS_ADDER_NO_CARRY AND OUT_DOT_4H );
	OUT_5H_G <= NOT(MS_MPLY_DOT_U_OR_Y_DOT_B AND MS_DIV_DOT_U_OR_Y_DOT_B );
	OUT_5I_G <= NOT(MS_X_CYCLE AND MS_LB_DOT_B_CYCLE_DOT_1ST_SCAN );
	OUT_4I_C <= NOT(MB_DIV_DOT_X_DOT_B AND MB_RA_OR_RS_OR_A_OR_S_DOT_B_DOT_NOT_BW );
	OUT_DOT_1A <= OUT_4A_D OR OUT_1A_C OR OUT_1C_K;
	OUT_DOT_3D <= OUT_4D_B OR OUT_3D_G OR OUT_3E_G OR OUT_3F_D;
	OUT_DOT_4H <= OUT_5H_G OR OUT_5I_G OR OUT_4I_C;

	PS_SET_NO_CARRY <= OUT_DOT_1A;
	PS_SET_CARRY_LATCH <= OUT_DOT_3D;


end;
