-- Test Bench VHDL for IBM SMS ALD page 12.15.03.1
-- Title: 1* SINGLE CYCLE CONTROL-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/4/2020 10:18:54 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_12_15_03_1_1_SINGLE_CYCLE_CONTROL_ACC_tb is
end ALD_12_15_03_1_1_SINGLE_CYCLE_CONTROL_ACC_tb;

architecture behavioral of ALD_12_15_03_1_1_SINGLE_CYCLE_CONTROL_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_12_15_03_1_1_SINGLE_CYCLE_CONTROL_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_1:	 in STD_LOGIC;
		MS_START_KEY:	 in STD_LOGIC;
		PS_START_KEY_2:	 in STD_LOGIC;
		MS_STORAGE_SCAN_MODE:	 in STD_LOGIC;
		MS_ERROR_RESTART:	 in STD_LOGIC;
		PS_CONS_CLOCK_1_POS:	 in STD_LOGIC;
		MV_CONS_MODE_SW_I_E_CYCLE_MODE:	 in STD_LOGIC;
		MV_CONS_MODE_SW_RUN_MODE:	 in STD_LOGIC;
		PS_CONS_STOP_PRINT_COMPLETE:	 in STD_LOGIC;
		PS_STORAGE_SCAN_ROUTINE:	 in STD_LOGIC;
		MS_ADDRESS_SET_ROUTINE:	 in STD_LOGIC;
		MS_CONSOLE_CYCLE_START:	 in STD_LOGIC;
		MS_PROGRAM_RESET_3:	 in STD_LOGIC;
		MS_ONLY_PROGRAM_RESET:	 in STD_LOGIC;
		MS_COMP_OR_POWER_ON_RESET:	 in STD_LOGIC;
		MS_START_KEY_LATCH_1:	 in STD_LOGIC;
		MS_DISPLAY_END_OF_MEMORY:	 in STD_LOGIC;
		MS_CONS_RESET_START_CONDITION:	 in STD_LOGIC;
		PS_CONS_CLOCK_3_POS_1:	 in STD_LOGIC;
		MV_CONSOLE_MODE_SW_STOP_POS:	 in STD_LOGIC;
		PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR:	 in STD_LOGIC;
		MS_START_KEY_LATCH_2:	 in STD_LOGIC;
		MV_36_VOLTS:	 in STD_LOGIC;
		SWITCH_MOM_CONS_STOP:	 in STD_LOGIC;
		SWITCH_MOM_CE_STOP_SW:	 in STD_LOGIC;
		MS_CONSOLE_SET_START_CND:	 out STD_LOGIC;
		MS_START_KEY_PULSE:	 out STD_LOGIC;
		PS_RUN_OR_IE_MODE_STAR_AUTS_STAR:	 out STD_LOGIC;
		PS_PROCESS_ROUTINE:	 out STD_LOGIC;
		MS_PROCESS_ROUTINE:	 out STD_LOGIC;
		MS_STOP_KEY_LATCH:	 out STD_LOGIC;
		PS_STOP_KEY_LATCH:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC := '0';
	signal MS_START_KEY: STD_LOGIC := '1';
	signal PS_START_KEY_2: STD_LOGIC := '0';
	signal MS_STORAGE_SCAN_MODE: STD_LOGIC := '1';
	signal MS_ERROR_RESTART: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_1_POS: STD_LOGIC := '0';
	signal MV_CONS_MODE_SW_I_E_CYCLE_MODE: STD_LOGIC := '1';
	signal MV_CONS_MODE_SW_RUN_MODE: STD_LOGIC := '1';
	signal PS_CONS_STOP_PRINT_COMPLETE: STD_LOGIC := '0';
	signal PS_STORAGE_SCAN_ROUTINE: STD_LOGIC := '0';
	signal MS_ADDRESS_SET_ROUTINE: STD_LOGIC := '1';
	signal MS_CONSOLE_CYCLE_START: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_3: STD_LOGIC := '1';
	signal MS_ONLY_PROGRAM_RESET: STD_LOGIC := '1';
	signal MS_COMP_OR_POWER_ON_RESET: STD_LOGIC := '1';
	signal MS_START_KEY_LATCH_1: STD_LOGIC := '1';
	signal MS_DISPLAY_END_OF_MEMORY: STD_LOGIC := '1';
	signal MS_CONS_RESET_START_CONDITION: STD_LOGIC := '1';
	signal PS_CONS_CLOCK_3_POS_1: STD_LOGIC := '0';
	signal MV_CONSOLE_MODE_SW_STOP_POS: STD_LOGIC := '1';
	signal PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR: STD_LOGIC := '0';
	signal MS_START_KEY_LATCH_2: STD_LOGIC := '1';
	signal MV_36_VOLTS: STD_LOGIC := '1';
	signal SWITCH_MOM_CONS_STOP: STD_LOGIC := '0';
	signal SWITCH_MOM_CE_STOP_SW: STD_LOGIC := '0';

	-- Outputs

	signal MS_CONSOLE_SET_START_CND: STD_LOGIC;
	signal MS_START_KEY_PULSE: STD_LOGIC;
	signal PS_RUN_OR_IE_MODE_STAR_AUTS_STAR: STD_LOGIC;
	signal PS_PROCESS_ROUTINE: STD_LOGIC;
	signal MS_PROCESS_ROUTINE: STD_LOGIC;
	signal MS_STOP_KEY_LATCH: STD_LOGIC;
	signal PS_STOP_KEY_LATCH: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_12_15_03_1_1_SINGLE_CYCLE_CONTROL_ACC port map(
		FPGA_CLK => FPGA_CLK,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		MS_START_KEY => MS_START_KEY,
		PS_START_KEY_2 => PS_START_KEY_2,
		MS_STORAGE_SCAN_MODE => MS_STORAGE_SCAN_MODE,
		MS_ERROR_RESTART => MS_ERROR_RESTART,
		PS_CONS_CLOCK_1_POS => PS_CONS_CLOCK_1_POS,
		MV_CONS_MODE_SW_I_E_CYCLE_MODE => MV_CONS_MODE_SW_I_E_CYCLE_MODE,
		MV_CONS_MODE_SW_RUN_MODE => MV_CONS_MODE_SW_RUN_MODE,
		PS_CONS_STOP_PRINT_COMPLETE => PS_CONS_STOP_PRINT_COMPLETE,
		PS_STORAGE_SCAN_ROUTINE => PS_STORAGE_SCAN_ROUTINE,
		MS_ADDRESS_SET_ROUTINE => MS_ADDRESS_SET_ROUTINE,
		MS_CONSOLE_CYCLE_START => MS_CONSOLE_CYCLE_START,
		MS_PROGRAM_RESET_3 => MS_PROGRAM_RESET_3,
		MS_ONLY_PROGRAM_RESET => MS_ONLY_PROGRAM_RESET,
		MS_COMP_OR_POWER_ON_RESET => MS_COMP_OR_POWER_ON_RESET,
		MS_START_KEY_LATCH_1 => MS_START_KEY_LATCH_1,
		MS_DISPLAY_END_OF_MEMORY => MS_DISPLAY_END_OF_MEMORY,
		MS_CONS_RESET_START_CONDITION => MS_CONS_RESET_START_CONDITION,
		PS_CONS_CLOCK_3_POS_1 => PS_CONS_CLOCK_3_POS_1,
		MV_CONSOLE_MODE_SW_STOP_POS => MV_CONSOLE_MODE_SW_STOP_POS,
		PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR => PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR,
		MS_START_KEY_LATCH_2 => MS_START_KEY_LATCH_2,
		MV_36_VOLTS => MV_36_VOLTS,
		SWITCH_MOM_CONS_STOP => SWITCH_MOM_CONS_STOP,
		SWITCH_MOM_CE_STOP_SW => SWITCH_MOM_CE_STOP_SW,
		MS_CONSOLE_SET_START_CND => MS_CONSOLE_SET_START_CND,
		MS_START_KEY_PULSE => MS_START_KEY_PULSE,
		PS_RUN_OR_IE_MODE_STAR_AUTS_STAR => PS_RUN_OR_IE_MODE_STAR_AUTS_STAR,
		PS_PROCESS_ROUTINE => PS_PROCESS_ROUTINE,
		MS_PROCESS_ROUTINE => MS_PROCESS_ROUTINE,
		MS_STOP_KEY_LATCH => MS_STOP_KEY_LATCH,
		PS_STOP_KEY_LATCH => PS_STOP_KEY_LATCH);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 10);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "12.15.03.1";
   
   wait for 30ns;
   MS_PROGRAM_RESET_3 <= '0';
   MS_COMP_OR_POWER_ON_RESET <= '0';
   wait for 1 us;
   MS_PROGRAM_RESET_3 <= '1';
   MS_COMP_OR_POWER_ON_RESET <= '1';
   
   wait for 30 ns;
   check1(MS_CONSOLE_SET_START_CND,'1',testName,"SA");
   check1(MS_START_KEY_PULSE,'1',testName,"SB");
   check1(PS_RUN_OR_IE_MODE_STAR_AUTS_STAR,'0',testName,"SC");
   check1(PS_PROCESS_ROUTINE,'0',testName,"SD");
   check1(MS_PROCESS_ROUTINE,'1',testName,"SE");
   check1(PS_STOP_KEY_LATCH,'1',testName,"SF");
   check1(MS_STOP_KEY_LATCH,'0',testname,"SG");

   -- Set the Start Pulse Latch
   
   PS_START_KEY_2 <= '0';
   MS_START_KEY <= '1';
   PS_2ND_CLOCK_PULSE_2 <= '0';
   wait for 30 ns;
   PS_1ST_CLOCK_PULSE_1 <= '1';
   -- Verify visually that the Start Pulse Latch set (3A pin G)
   wait for 30 ns;
   PS_1ST_CLOCK_PULSE_1 <= '0';
   -- Verify visually that the latch remains set.
   
   -- Set the Set Start Condition Latch
   
   check1(PS_PROCESS_ROUTINE,'0',testName,"1A");
   MS_STORAGE_SCAN_MODE <= '1';
   PS_CONS_CLOCK_1_POS <= '1';
   MV_CONS_MODE_SW_RUN_MODE <= '1';
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '1';
   
   
   PS_START_KEY_2 <= '1';
      
   -- Not Process Routine set by the initial reset
   wait for 30 ns;
   check1(MS_CONSOLE_SET_START_CND,'1',testName,"1B");
   
   MV_CONS_MODE_SW_RUN_MODE <= '0';
   wait for 30 ns;
   check1(PS_RUN_OR_IE_MODE_STAR_AUTS_STAR,'1',testName,"1C");   
   check1(MS_CONSOLE_SET_START_CND,'0',testName,"1D");
   
   -- Reset the input signal - the latch should stay set
   MV_CONS_MODE_SW_RUN_MODE <= '1';
   wait for 30 ns;
   check1(MS_CONSOLE_SET_START_CND,'0',testName,"1D");
   
   -- Reset the latch
   MS_PROGRAM_RESET_3 <= '0';
   wait for 30 ns;
   MS_PROGRAM_RESET_3 <= '1';
   wait for 30 ns;
   check1(MS_CONSOLE_SET_START_CND,'1',testName,"1E");
   
   -- Now set it using I/E Cycle
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '0';
   wait for 30 ns;
   check1(PS_RUN_OR_IE_MODE_STAR_AUTS_STAR,'1',testName,"1F");   
   check1(MS_CONSOLE_SET_START_CND,'0',testName,"1G");
   
   -- Reset it using Process Routine
   
   check1(PS_PROCESS_ROUTINE,'0',testName,"1H");
   PS_CONS_CLOCK_1_POS <= '0';   
   PS_CONS_CLOCK_3_POS_1 <= '1';
   wait for 60 ns;  -- This looks to be a 3 gate latch, so it needed extra time
   check1(PS_PROCESS_ROUTINE,'1',testName,"1I");
   check1(MS_CONSOLE_SET_START_CND,'1',testName,"1J");
   
   -- Now reset process routine
   
   MS_CONS_RESET_START_CONDITION <= '0';
   wait for 30 ns;
   check1(PS_PROCESS_ROUTINE,'0',testName,"1K");
   MS_CONS_RESET_START_CONDITION <= '1';
   
   -- Test Start Key Pulse
   
   MV_CONS_MODE_SW_I_E_CYCLE_MODE <= '1';
   MV_CONS_MODE_SW_RUN_MODE <= '0';
   PS_STORAGE_SCAN_ROUTINE <= '1';
   MS_ADDRESS_SET_ROUTINE <= '1';
   MS_CONSOLE_CYCLE_START <= '1';
   PS_CONS_STOP_PRINT_COMPLETE <= '1';
   PS_START_KEY_2 <= '1';
   wait for 60 ns;
   check1(MS_START_KEY_PULSE,'1',testName,"2A");
   PS_1ST_CLOCK_PULSE_1 <= '1';
   wait for 30 ns;
   check1(MS_START_KEY_PULSE,'0',testName,"2B");
      
   -- Reset Start Pulse latch as well  (check visually)
   
   PS_1ST_CLOCK_PULSE_1 <= '0';
   PS_START_KEY_2 <= '1';
   MS_START_KEY <= '0';
   wait for 30 ns;
   -- Now the reset happens
   PS_2ND_CLOCK_PULSE_2 <= '1';
   wait for 30ns;
   PS_2ND_CLOCK_PULSE_2 <= '0';
   wait for 30 ns;
   check1(MS_START_KEY_PULSE,'1',testName,"2D");
   
   -- Test the Stop Key Latch
   
   MS_START_KEY_LATCH_2 <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3A");
   MS_START_KEY_LATCH_2 <= '1';
   
   MS_DISPLAY_END_OF_MEMORY <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'1',testName,"3B");
   MS_DISPLAY_END_OF_MEMORY <= '1';
   MS_START_KEY_LATCH_2 <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3C");
   MS_START_KEY_LATCH_2 <= '1';

   MS_ONLY_PROGRAM_RESET <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'1',testName,"3D");
   MS_ONLY_PROGRAM_RESET <= '1';
   PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR <= '1';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3E");
   PS_RESET_STOP_KEY_LATCH_STAR_AUTS_STAR <= '0';

   MS_COMP_OR_POWER_ON_RESET <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'1',testName,"3F");
   MS_COMP_OR_POWER_ON_RESET <= '1';
   MS_START_KEY_LATCH_1 <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3G");
   MS_START_KEY_LATCH_1 <= '1';
   
   MV_CONSOLE_MODE_SW_STOP_POS <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'1',testName,"3H");
   MV_CONSOLE_MODE_SW_STOP_POS <= '1';
   MS_START_KEY_LATCH_1 <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3I");
   MS_START_KEY_LATCH_1 <= '1';
      
   SWITCH_MOM_CONS_STOP <= '1';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'1',testName,"3J");
   SWITCH_MOM_CONS_STOP <= '0';
   MS_START_KEY_LATCH_1 <= '0';
   wait for 30 ns;
   check1(PS_STOP_KEY_LATCH,'0',testName,"3K");
   MS_START_KEY_LATCH_1 <= '1';
   
   
   

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
