-- Test Bench VHDL for IBM SMS ALD page 13.42.10.1
-- Title: CPU-CONSOLE CONTROLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 7/27/2020 7:09:19 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_13_42_10_1_CPU_CONSOLE_CONTROLS_tb is
end ALD_13_42_10_1_CPU_CONSOLE_CONTROLS_tb;

architecture behavioral of ALD_13_42_10_1_CPU_CONSOLE_CONTROLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_13_42_10_1_CPU_CONSOLE_CONTROLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_CLOCK_STOPPED:	 in STD_LOGIC;
		PS_LOGIC_GATE_Z:	 in STD_LOGIC;
		MS_NO_LAST_GATE:	 in STD_LOGIC;
		MS_LOGIC_GATE_W:	 in STD_LOGIC;
		MS_LAST_LOGIC_GATE_1:	 in STD_LOGIC;
		MS_LOGIC_GATE_R:	 in STD_LOGIC;
		MS_LOGIC_GATE_A_1:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_1:	 in STD_LOGIC;
		MS_STOP_KEY_LATCH:	 in STD_LOGIC;
		MS_1401_COND_TEST_OP_CODE:	 in STD_LOGIC;
		MS_STORAGE_SCAN_LOAD:	 in STD_LOGIC;
		PS_MASTER_ERROR:	 in STD_LOGIC;
		PS_CONS_STOP_PRINT_COMPLETE:	 in STD_LOGIC;
		M36_VOLTS:	 in STD_LOGIC;
		MS_PROGRAM_RESET_1:	 in STD_LOGIC;
		PS_LOGIC_GATE_B_1:	 in STD_LOGIC;
		PS_PROCESS_ROUTINE:	 in STD_LOGIC;
		MS_LAST_EX_DOT_NEXT_TO_LAST:	 in STD_LOGIC;
		MS_I_O_LAST_EX_DOT_Z:	 in STD_LOGIC;
		SWITCH_ROT_CHECK_CTRL:	 in STD_LOGIC_VECTOR(5 downTo 0);
		MC_CPU_READY_TO_TID:	 out STD_LOGIC;
		MS_STOPPED_AT_CYCLE_END:	 out STD_LOGIC;
		PS_STOPPED_AT_CYCLE_END:	 out STD_LOGIC;
		MS_ERROR_RESTART:	 out STD_LOGIC;
		PS_STOPPED_AT_LAST_EXEC_CYCLE:	 out STD_LOGIC;
		MS_AUTOMATIC_COMPUTER_RESET:	 out STD_LOGIC;
		MS_GATE_BIT_SENSE_SWITCH:	 out STD_LOGIC;
		MV_ERROR_CTRL_RESET_DOT_RESTART:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_CLOCK_STOPPED: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_Z: STD_LOGIC := '0';
	signal MS_NO_LAST_GATE: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_W: STD_LOGIC := '1';
	signal MS_LAST_LOGIC_GATE_1: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_R: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_A_1: STD_LOGIC := '1';
	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC := '0';
	signal MS_STOP_KEY_LATCH: STD_LOGIC := '1';
	signal MS_1401_COND_TEST_OP_CODE: STD_LOGIC := '1';
	signal MS_STORAGE_SCAN_LOAD: STD_LOGIC := '1';
	signal PS_MASTER_ERROR: STD_LOGIC := '0';
	signal PS_CONS_STOP_PRINT_COMPLETE: STD_LOGIC := '0';
	signal M36_VOLTS: STD_LOGIC := '1';
	signal MS_PROGRAM_RESET_1: STD_LOGIC := '1';
	signal PS_LOGIC_GATE_B_1: STD_LOGIC := '0';
	signal PS_PROCESS_ROUTINE: STD_LOGIC := '0';
	signal MS_LAST_EX_DOT_NEXT_TO_LAST: STD_LOGIC := '1';
	signal MS_I_O_LAST_EX_DOT_Z: STD_LOGIC := '1';
	signal SWITCH_ROT_CHECK_CTRL: STD_LOGIC_VECTOR(5 downTo 0) := "000000";

	-- Outputs

	signal MC_CPU_READY_TO_TID: STD_LOGIC;
	signal MS_STOPPED_AT_CYCLE_END: STD_LOGIC;
	signal PS_STOPPED_AT_CYCLE_END: STD_LOGIC;
	signal MS_ERROR_RESTART: STD_LOGIC;
	signal PS_STOPPED_AT_LAST_EXEC_CYCLE: STD_LOGIC;
	signal MS_AUTOMATIC_COMPUTER_RESET: STD_LOGIC;
	signal MS_GATE_BIT_SENSE_SWITCH: STD_LOGIC;
	signal MV_ERROR_CTRL_RESET_DOT_RESTART: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_13_42_10_1_CPU_CONSOLE_CONTROLS port map(
		FPGA_CLK => FPGA_CLK,
		PS_CLOCK_STOPPED => PS_CLOCK_STOPPED,
		PS_LOGIC_GATE_Z => PS_LOGIC_GATE_Z,
		MS_NO_LAST_GATE => MS_NO_LAST_GATE,
		MS_LOGIC_GATE_W => MS_LOGIC_GATE_W,
		MS_LAST_LOGIC_GATE_1 => MS_LAST_LOGIC_GATE_1,
		MS_LOGIC_GATE_R => MS_LOGIC_GATE_R,
		MS_LOGIC_GATE_A_1 => MS_LOGIC_GATE_A_1,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		MS_STOP_KEY_LATCH => MS_STOP_KEY_LATCH,
		MS_1401_COND_TEST_OP_CODE => MS_1401_COND_TEST_OP_CODE,
		MS_STORAGE_SCAN_LOAD => MS_STORAGE_SCAN_LOAD,
		PS_MASTER_ERROR => PS_MASTER_ERROR,
		PS_CONS_STOP_PRINT_COMPLETE => PS_CONS_STOP_PRINT_COMPLETE,
		M36_VOLTS => M36_VOLTS,
		MS_PROGRAM_RESET_1 => MS_PROGRAM_RESET_1,
		PS_LOGIC_GATE_B_1 => PS_LOGIC_GATE_B_1,
		PS_PROCESS_ROUTINE => PS_PROCESS_ROUTINE,
		MS_LAST_EX_DOT_NEXT_TO_LAST => MS_LAST_EX_DOT_NEXT_TO_LAST,
		MS_I_O_LAST_EX_DOT_Z => MS_I_O_LAST_EX_DOT_Z,
		SWITCH_ROT_CHECK_CTRL => SWITCH_ROT_CHECK_CTRL,
		MC_CPU_READY_TO_TID => MC_CPU_READY_TO_TID,
		MS_STOPPED_AT_CYCLE_END => MS_STOPPED_AT_CYCLE_END,
		PS_STOPPED_AT_CYCLE_END => PS_STOPPED_AT_CYCLE_END,
		MS_ERROR_RESTART => MS_ERROR_RESTART,
		PS_STOPPED_AT_LAST_EXEC_CYCLE => PS_STOPPED_AT_LAST_EXEC_CYCLE,
		MS_AUTOMATIC_COMPUTER_RESET => MS_AUTOMATIC_COMPUTER_RESET,
		MS_GATE_BIT_SENSE_SWITCH => MS_GATE_BIT_SENSE_SWITCH,
		MV_ERROR_CTRL_RESET_DOT_RESTART => MV_ERROR_CTRL_RESET_DOT_RESTART);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;

   begin

   -- Your test bench code
   
   testName := "13.42.10.1        ";

   -- There is NO ILD for signal -C CPU READY TO TID
   -- We do not have destination page 51.43.21.0
   -- Input to gate DED Symbol DL is +S CLOCK STOPPED
   -- This gate does NOT invert, so odds are that the 
   -- signal SHOULD be named +C CPU READY TO TID - or
   -- maybe the signal was just never used.
   
   wait for 30 ns;   
   check1(MC_CPU_READY_TO_TID,'0',testName,"1A");
   PS_CLOCK_STOPPED <= '1';
   wait for 30 ns;   
   check1(MC_CPU_READY_TO_TID,'1',testName,"1B");
   PS_CLOCK_STOPPED <= '0';
   
   MS_LOGIC_GATE_A_1 <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2A");
   check1(MS_STOPPED_AT_CYCLE_END,'1',testName,"2B");
   PS_CLOCK_STOPPED <= '1';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2C");
   PS_CONS_STOP_PRINT_COMPLETE <= '1';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'1',testName,"2D");
   check1(MS_STOPPED_AT_CYCLE_END,'0',testName,"2E");
   MS_LOGIC_GATE_A_1 <= '1';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2F");
   MS_LOGIC_GATE_R <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'1',testName,"2G");
   MS_LOGIC_GATE_R <= '1';
   wait for 30 ns;
   MS_NO_LAST_GATE <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'1',testName,"2H");
   MS_NO_LAST_GATE <= '1';
   wait for 30 ns;
   MS_LOGIC_GATE_W <= '0';
   MS_LAST_LOGIC_GATE_1 <= '0';
   PS_LOGIC_GATE_Z <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2I");
   MS_LOGIC_GATE_W <= '1';  -- NOT LGW
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2J");
   MS_LAST_LOGIC_GATE_1 <= '1';  -- AND NOT LLG
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2K");
   PS_LOGIC_GATE_Z <= '1';  -- AND LGZ
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'1',testName,"2L");
   MS_LOGIC_GATE_W <= '0';  -- LGW
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2M");
   MS_LOGIC_GATE_W <= '1';  -- NOT LGW
   wait for 30 ns;
   MS_LAST_LOGIC_GATE_1 <= '0';  -- LG Z
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"2N");
   MS_LAST_LOGIC_GATE_1 <= '1';  -- NOT LG Z
   PS_LOGIC_GATE_Z <= '0';
      
   
   -- Set +S Stopped at Cycle End again for the next test
   
   PS_CLOCK_STOPPED <= '1';
   PS_CONS_STOP_PRINT_COMPLETE <= '1';
   MS_LOGIC_GATE_A_1 <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'1',testName,"3A");
   
   -- Stopped at last exec cycle latch (Gates 4I, 3I)
   
   -- Reset Latch
   PS_LOGIC_GATE_B_1 <= '1';
   PS_PROCESS_ROUTINE <= '1';
   wait for 30 ns;   
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'0',testName,"3B");
   PS_LOGIC_GATE_B_1 <= '0';
   PS_PROCESS_ROUTINE <= '0';

   -- Set the latch
   MS_I_O_LAST_EX_DOT_Z <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3C");
   MS_I_O_LAST_EX_DOT_Z <= '1';
   wait for 30 ns;
   -- Latch should still be set
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3D");

   -- Reset Latch
   PS_LOGIC_GATE_B_1 <= '1';
   PS_PROCESS_ROUTINE <= '1';
   wait for 30 ns;   
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'0',testName,"3E");
   PS_LOGIC_GATE_B_1 <= '0';
   PS_PROCESS_ROUTINE <= '0';
   
   -- Set the latch again
   MS_LAST_EX_DOT_NEXT_TO_LAST <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3F");
   MS_LAST_EX_DOT_NEXT_TO_LAST <= '1';
   wait for 30 ns;
   -- Latch should still be set
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3G");

   -- Reset Latch
   PS_LOGIC_GATE_B_1 <= '1';
   PS_PROCESS_ROUTINE <= '1';
   wait for 30 ns;   
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'0',testName,"3H");
   PS_LOGIC_GATE_B_1 <= '0';
   PS_PROCESS_ROUTINE <= '0';

   -- Set the latch again
   MS_PROGRAM_RESET_1 <= '0';
   wait for 30 ns;
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3I");
   MS_PROGRAM_RESET_1 <= '1';
   wait for 30 ns;
   -- Latch should still be set
   check1(PS_STOPPED_AT_LAST_EXEC_CYCLE,'1',testName,"3J");

   PS_CLOCK_STOPPED <= '0';
   PS_CONS_STOP_PRINT_COMPLETE <= '0';
   MS_LOGIC_GATE_A_1 <= '1';
   wait for 30 ns;
   check1(PS_STOPPED_AT_CYCLE_END,'0',testName,"3K");
   
   -- Test the automatic computer restart process
   
   MS_STOP_KEY_LATCH <= '0';  -- Start test with this set
   PS_CONS_STOP_PRINT_COMPLETE <= '0';
   PS_MASTER_ERROR <= '0';
   SWITCH_ROT_CHECK_CTRL <= "000000";  -- Neutral position
   wait for 30 ns;
   check1(MV_ERROR_CTRL_RESET_DOT_RESTART,'1',testName,"4A");
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4B");
   
   -- Set switch to reset + restart
   
   SWITCH_ROT_CHECK_CTRL <= "010000";
   wait for 30 ns;
   check1(MV_ERROR_CTRL_RESET_DOT_RESTART,'0',testName,"4C");
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4D");
   check1(MS_ERROR_RESTART,'1',testName,"4E");
   MS_STOP_KEY_LATCH <= '1';  -- So, pretend we are running with switch at Reset+Restart
   wait for 30 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4F");
   check1(MS_ERROR_RESTART,'1',testName,"4G");
   PS_MASTER_ERROR <= '1'; -- Then an error occurs
   wait for 30 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4F");
   check1(MS_ERROR_RESTART,'1',testName,"4G");
   PS_CONS_STOP_PRINT_COMPLETE <= '1'; -- And the console finishes its error printout   
   wait for 90 ns;
   -- The one shot for doing a reset should be triggered now
   check1(MS_AUTOMATIC_COMPUTER_RESET,'0',testName,"4H");
   check1(MS_ERROR_RESTART,'1',testName,"4I");
   PS_MASTER_ERROR <= '0';  -- Reset resets master error
   wait for 900 ns;  -- Wait for the reset to not QUITE time out
   check1(MS_AUTOMATIC_COMPUTER_RESET,'0',testName,"4J");
   check1(MS_ERROR_RESTART,'1',testName,"4K");
   PS_1ST_CLOCK_PULSE_1 <= '1';  -- Condition for restart
   wait for 200 ns;  -- By now the reset should have timed out and a restart begun
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4L");
   check1(MS_ERROR_RESTART,'0',testName,"4M");
   -- Then reset the error restart latch
   wait for 30 ns;
   PS_1ST_CLOCK_PULSE_1 <= '0'; -- And we are off and running again
   wait for 30 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"4N");
   check1(MS_ERROR_RESTART,'1',testName,"4O");
   
   -- Test the error restart process (no reset)
   
   -- -S Stop Key Latch still at 1 (off)
   PS_1ST_CLOCK_PULSE_1 <= '1'; 
   SWITCH_ROT_CHECK_CTRL <= "000010"; -- Set to Error Restart (no reset)
   wait for 30 ns;
   check1(MV_ERROR_CTRL_RESET_DOT_RESTART,'1',testName,"5A");
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"5B");
   check1(MS_ERROR_RESTART,'1',testName,"5C");
   -- And an error occurss
   PS_CONS_STOP_PRINT_COMPLETE <= '0';
   PS_MASTER_ERROR <= '1';
   wait for 30 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"5D");
   check1(MS_ERROR_RESTART,'1',testName,"5E");
   -- The printout completes, which should set the error restart latch
   PS_CONS_STOP_PRINT_COMPLETE <= '1';
   wait for 60 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"5F");
   check1(MS_ERROR_RESTART,'0',testName,"5G");
   PS_MASTER_ERROR <= '0'; -- I suppose this process resets master error
   -- The latch should still be set
   wait for 60 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"5H");
   check1(MS_ERROR_RESTART,'0',testName,"5I");
   -- This time, use the stop key latch signal to stop the restart
   MS_STOP_KEY_LATCH <= '0';
   wait for 30 ns;
   check1(MS_AUTOMATIC_COMPUTER_RESET,'1',testName,"5I");
   check1(MS_ERROR_RESTART,'1',testName,"5J");
  
   -- Test the sense switch gating
   
   check1(MS_GATE_BIT_SENSE_SWITCH,'1',testName,"6A");
   MS_1401_COND_TEST_OP_CODE <= '0';
   wait for 30 ns;
   check1(MS_GATE_BIT_SENSE_SWITCH,'0',testName,"6B");
   MS_1401_COND_TEST_OP_CODE <= '0';
   wait for 30 ns;
   MS_STORAGE_SCAN_LOAD <= '0';
   wait for 30 ns;
   check1(MS_GATE_BIT_SENSE_SWITCH,'0',testName,"6C");
   MS_STORAGE_SCAN_LOAD <= '1';
   
   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 100 us;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
