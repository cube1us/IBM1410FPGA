-- Test BenchVHDL for IBM SMS ALD group MemInhibitDrivers
-- Title: MemInhibitDrivers
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 10/19/2020 4:59:19 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity MemInhibitDrivers_tb is
end MemInhibitDrivers_tb;

architecture behavioral of MemInhibitDrivers_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component MemInhibitDrivers
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_1: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_2: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_3: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_4: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_5: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_6: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_7: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_8: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_5: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_6: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_7: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_8: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_1: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_2: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_3: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_4: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_9: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_10: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_11: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_12: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_9: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_10: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_11: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_12: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_13: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_14: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_15: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_16: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_13: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_16: in STD_LOGIC;
		MY_Z_GATE_FOR_0_4TH_15: in STD_LOGIC;
		MY_Z_GATE_FOR_5_9TH_14: in STD_LOGIC;
		MY_INH_CHAR_0_D_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_1_D_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_2_D_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MY_INH_CHAR_3_D_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_0_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_0_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_1_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_1_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_2_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_2_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_3_D1_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MV_INH_CHAR_3_B1_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MY_Z_GATE_FOR_0_4TH_1: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_2: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_3: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_4: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_5: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_6: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_7: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_8: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_5: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_6: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_7: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_8: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_1: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_2: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_3: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_4: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_9: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_10: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_11: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_12: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_9: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_10: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_11: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_12: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_13: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_14: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_15: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_16: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_13: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_16: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_0_4TH_15: STD_LOGIC := '1';
	signal MY_Z_GATE_FOR_5_9TH_14: STD_LOGIC := '1';
	signal MY_INH_CHAR_0_D_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_1_D_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_2_D_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MY_INH_CHAR_3_D_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";

	-- Outputs

	signal MV_INH_CHAR_0_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_0_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_1_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_1_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_2_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_2_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_3_D1_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MV_INH_CHAR_3_B1_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      
procedure checkChar(
    checked: in STD_LOGIC_VECTOR(7 downto 0);
    val: in STD_LOGIC_VECTOR(7 downto 0);
    testname: in string;
    test: in string) is
    begin
       for thebit in 0 to 7 loop
         assert checked(thebit) = val(thebit) report
            testname & " (" & test & ") bit " & Integer'image(thebit) & " failed." severity failure; 
       end loop;
    end procedure;


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: MemInhibitDrivers port map(
		FPGA_CLK => FPGA_CLK,
		MY_Z_GATE_FOR_0_4TH_1 => MY_Z_GATE_FOR_0_4TH_1,
		MY_Z_GATE_FOR_0_4TH_2 => MY_Z_GATE_FOR_0_4TH_2,
		MY_Z_GATE_FOR_0_4TH_3 => MY_Z_GATE_FOR_0_4TH_3,
		MY_Z_GATE_FOR_0_4TH_4 => MY_Z_GATE_FOR_0_4TH_4,
		MY_Z_GATE_FOR_5_9TH_5 => MY_Z_GATE_FOR_5_9TH_5,
		MY_Z_GATE_FOR_5_9TH_6 => MY_Z_GATE_FOR_5_9TH_6,
		MY_Z_GATE_FOR_5_9TH_7 => MY_Z_GATE_FOR_5_9TH_7,
		MY_Z_GATE_FOR_5_9TH_8 => MY_Z_GATE_FOR_5_9TH_8,
		MY_Z_GATE_FOR_0_4TH_5 => MY_Z_GATE_FOR_0_4TH_5,
		MY_Z_GATE_FOR_0_4TH_6 => MY_Z_GATE_FOR_0_4TH_6,
		MY_Z_GATE_FOR_0_4TH_7 => MY_Z_GATE_FOR_0_4TH_7,
		MY_Z_GATE_FOR_0_4TH_8 => MY_Z_GATE_FOR_0_4TH_8,
		MY_Z_GATE_FOR_5_9TH_1 => MY_Z_GATE_FOR_5_9TH_1,
		MY_Z_GATE_FOR_5_9TH_2 => MY_Z_GATE_FOR_5_9TH_2,
		MY_Z_GATE_FOR_5_9TH_3 => MY_Z_GATE_FOR_5_9TH_3,
		MY_Z_GATE_FOR_5_9TH_4 => MY_Z_GATE_FOR_5_9TH_4,
		MY_Z_GATE_FOR_0_4TH_9 => MY_Z_GATE_FOR_0_4TH_9,
		MY_Z_GATE_FOR_0_4TH_10 => MY_Z_GATE_FOR_0_4TH_10,
		MY_Z_GATE_FOR_0_4TH_11 => MY_Z_GATE_FOR_0_4TH_11,
		MY_Z_GATE_FOR_0_4TH_12 => MY_Z_GATE_FOR_0_4TH_12,
		MY_Z_GATE_FOR_5_9TH_9 => MY_Z_GATE_FOR_5_9TH_9,
		MY_Z_GATE_FOR_5_9TH_10 => MY_Z_GATE_FOR_5_9TH_10,
		MY_Z_GATE_FOR_5_9TH_11 => MY_Z_GATE_FOR_5_9TH_11,
		MY_Z_GATE_FOR_5_9TH_12 => MY_Z_GATE_FOR_5_9TH_12,
		MY_Z_GATE_FOR_0_4TH_13 => MY_Z_GATE_FOR_0_4TH_13,
		MY_Z_GATE_FOR_0_4TH_14 => MY_Z_GATE_FOR_0_4TH_14,
		MY_Z_GATE_FOR_5_9TH_15 => MY_Z_GATE_FOR_5_9TH_15,
		MY_Z_GATE_FOR_5_9TH_16 => MY_Z_GATE_FOR_5_9TH_16,
		MY_Z_GATE_FOR_5_9TH_13 => MY_Z_GATE_FOR_5_9TH_13,
		MY_Z_GATE_FOR_0_4TH_16 => MY_Z_GATE_FOR_0_4TH_16,
		MY_Z_GATE_FOR_0_4TH_15 => MY_Z_GATE_FOR_0_4TH_15,
		MY_Z_GATE_FOR_5_9TH_14 => MY_Z_GATE_FOR_5_9TH_14,
		MY_INH_CHAR_0_D_BUS => MY_INH_CHAR_0_D_BUS,
		MY_INH_CHAR_1_D_BUS => MY_INH_CHAR_1_D_BUS,
		MY_INH_CHAR_2_D_BUS => MY_INH_CHAR_2_D_BUS,
		MY_INH_CHAR_3_D_BUS => MY_INH_CHAR_3_D_BUS,
		MV_INH_CHAR_0_D1_BUS => MV_INH_CHAR_0_D1_BUS,
		MV_INH_CHAR_0_B1_BUS => MV_INH_CHAR_0_B1_BUS,
		MV_INH_CHAR_1_D1_BUS => MV_INH_CHAR_1_D1_BUS,
		MV_INH_CHAR_1_B1_BUS => MV_INH_CHAR_1_B1_BUS,
		MV_INH_CHAR_2_D1_BUS => MV_INH_CHAR_2_D1_BUS,
		MV_INH_CHAR_2_B1_BUS => MV_INH_CHAR_2_B1_BUS,
		MV_INH_CHAR_3_D1_BUS => MV_INH_CHAR_3_D1_BUS,
		MV_INH_CHAR_3_B1_BUS => MV_INH_CHAR_3_B1_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   variable gb, gd, tv0, tv1, tv2, tv3: std_logic_vector(7 downto 0);
   
   begin

   -- Your test bench code

   testName := "37.11.0%.1        ";

   for charbits in 0 to 2**8 loop
        tv0 := std_logic_vector(to_unsigned(charbits,tv0'Length));
        tv1 := tv0(0) & tv0(7 downto 1);
        tv2 := tv1(0) & tv1(7 downto 1);
        tv3 := tv2(0) & tv2(7 downto 1);  
        
        MY_INH_CHAR_0_D_BUS <= not tv0;    
        MY_INH_CHAR_1_D_BUS <= not tv1;    
        MY_INH_CHAR_2_D_BUS <= not tv2;    
        MY_INH_CHAR_3_D_BUS <= not tv3;    
   
      for tt in 0 to 2 loop
         tv := std_logic_vector(to_unsigned(tt,tv'Length));
         a := tv(0);
         b := tv(1);
         
         -- The following signals are all derived from common input signals, in two
         -- groups, so I didn't bother to test them individually.

   		MY_Z_GATE_FOR_0_4TH_1 <= not a;
   	  	MY_Z_GATE_FOR_0_4TH_2 <= not a;
   		MY_Z_GATE_FOR_0_4TH_3 <= not a;
   		MY_Z_GATE_FOR_0_4TH_4 <= not a;
   		MY_Z_GATE_FOR_0_4TH_5 <= not a;
   		MY_Z_GATE_FOR_0_4TH_6 <= not a;
   		MY_Z_GATE_FOR_0_4TH_7 <= not a;
   		MY_Z_GATE_FOR_0_4TH_8 <= not a;
   		MY_Z_GATE_FOR_0_4TH_5 <= not a;
   		MY_Z_GATE_FOR_0_4TH_6 <= not a;
   		MY_Z_GATE_FOR_0_4TH_7 <= not a;
   		MY_Z_GATE_FOR_0_4TH_8 <= not a;
   		MY_Z_GATE_FOR_0_4TH_9 <= not a;   
         MY_Z_GATE_FOR_0_4TH_10 <= not a;
         MY_Z_GATE_FOR_0_4TH_11 <= not a;
         MY_Z_GATE_FOR_0_4TH_12 <= not a;
   		MY_Z_GATE_FOR_0_4TH_13 <= not a;
         MY_Z_GATE_FOR_0_4TH_14 <= not a;
         MY_Z_GATE_FOR_0_4TH_15 <= not a;
   		MY_Z_GATE_FOR_0_4TH_16 <= not a;

   		MY_Z_GATE_FOR_5_9TH_1 <= not b;
   		MY_Z_GATE_FOR_5_9TH_2 <= not b;
   		MY_Z_GATE_FOR_5_9TH_3 <= not b;
   		MY_Z_GATE_FOR_5_9TH_4 <= not b;
   		MY_Z_GATE_FOR_5_9TH_5 <= not b;
         MY_Z_GATE_FOR_5_9TH_6 <= not b;
         MY_Z_GATE_FOR_5_9TH_7 <= not b;
         MY_Z_GATE_FOR_5_9TH_8 <= not b;
   		MY_Z_GATE_FOR_5_9TH_9 <= not b;
         MY_Z_GATE_FOR_5_9TH_10 <= not b;
         MY_Z_GATE_FOR_5_9TH_11 <= not b;
         MY_Z_GATE_FOR_5_9TH_12 <= not b;
         MY_Z_GATE_FOR_5_9TH_13 <= not b;
   		MY_Z_GATE_FOR_5_9TH_14 <= not b;      
   		MY_Z_GATE_FOR_5_9TH_15 <= not b;
         MY_Z_GATE_FOR_5_9TH_16 <= not b;   
      
         wait for 30 ns;
         
         if(b = '1') then
            gb := "11111111";
         else
            gb := "00000000";
         end if; 

         if(a = '1') then
            gd := "11111111";
         else
            gd := "00000000";
         end if; 
         
         checkChar(MV_INH_CHAR_0_D1_BUS,not(tv0 and gd),testName,"Inh Char 0 D1");
         checkChar(MV_INH_CHAR_0_B1_BUS,not(tv0 and gb),testName,"Inh Char 0 B1");
         checkChar(MV_INH_CHAR_1_D1_BUS,not(tv1 and gd),testName,"Inh Char 1 D1");
         checkChar(MV_INH_CHAR_1_B1_BUS,not(tv1 and gb),testName,"Inh Char 1 B1");
         checkChar(MV_INH_CHAR_2_D1_BUS,not(tv2 and gd),testName,"Inh Char 2 D1");
         checkChar(MV_INH_CHAR_2_B1_BUS,not(tv2 and gb),testName,"Inh Char 2 B1");
         checkChar(MV_INH_CHAR_3_D1_BUS,not(tv3 and gd),testName,"Inh Char 3 D1");
         checkChar(MV_INH_CHAR_3_B1_BUS,not(tv3 and gb),testName,"Inh Char 3 B1");
            
      end loop;
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
