-- Test Bench VHDL for IBM SMS ALD page 18.14.08.1
-- Title: 1* MASTER ERROR CONTROL-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/13/2020 1:02:26 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_18_14_08_1_1_MASTER_ERROR_CONTROL_ACC_tb is
end ALD_18_14_08_1_1_MASTER_ERROR_CONTROL_ACC_tb;

architecture behavioral of ALD_18_14_08_1_1_MASTER_ERROR_CONTROL_ACC_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_18_14_08_1_1_MASTER_ERROR_CONTROL_ACC
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_ADDRESS_SET_ROUTINE:	 in STD_LOGIC;
		MS_LAST_LOGIC_GATE_1:	 in STD_LOGIC;
		MS_LOGIC_GATE_W:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_CLAMPED:	 in STD_LOGIC;
		MS_START_RESET:	 in STD_LOGIC;
		MS_LOGIC_GATE_K:	 in STD_LOGIC;
		MS_1401_CARD_PR_SAMPLE_B:	 in STD_LOGIC;
		MS_1401_CARD_PR_ERR_SAMPLE:	 in STD_LOGIC;
		MS_I_O_INTERLOCK_CHECK:	 in STD_LOGIC;
		MS_INSTRUCTION_CHECK:	 in STD_LOGIC;
		MS_RBC_INLK_CHECK:	 in STD_LOGIC;
		MS_A_CHANNEL_VC_ERROR:	 in STD_LOGIC;
		MS_B_CHANNEL_VC_ERROR:	 in STD_LOGIC;
		MS_ASSEMBLY_CH_ERROR:	 in STD_LOGIC;
		MS_A_REG_SET_ERROR:	 in STD_LOGIC;
		MS_B_REG_RESET_ERROR:	 in STD_LOGIC;
		MS_OP_REG_SET_ERROR:	 in STD_LOGIC;
		PS_1ST_CLOCK_PULSE_1:	 in STD_LOGIC;
		MS_B_CHAR_SEL_ERROR:	 in STD_LOGIC;
		MS_ADDRESS_EXIT_ERROR:	 in STD_LOGIC;
		MS_ADDRESS_CH_ERROR:	 in STD_LOGIC;
		MS_1401_PUNCH_PRINT_ERROR:	 in STD_LOGIC;
		MS_ADDRESS_CHECK:	 in STD_LOGIC;
		MS_1401_CARD_PRINT_ERROR:	 in STD_LOGIC;
		MS_A_CHARACTER_SELECT_ERROR:	 in STD_LOGIC;
		MS_OP_MOD_REG_SET_ERROR:	 in STD_LOGIC;
		PS_ERROR_SAMPLE:	 out STD_LOGIC;
		MS_MASTER_ERROR_STAR_AUTS_STAR:	 out STD_LOGIC;
		MS_MASTER_ERROR:	 out STD_LOGIC;
		PS_MASTER_ERROR:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_ADDRESS_SET_ROUTINE: STD_LOGIC := '1';
	signal MS_LAST_LOGIC_GATE_1: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_W: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_CLAMPED: STD_LOGIC := '0';
	signal MS_START_RESET: STD_LOGIC := '1';
	signal MS_LOGIC_GATE_K: STD_LOGIC := '1';
	signal MS_1401_CARD_PR_SAMPLE_B: STD_LOGIC := '1';
	signal MS_1401_CARD_PR_ERR_SAMPLE: STD_LOGIC := '1';
	signal MS_I_O_INTERLOCK_CHECK: STD_LOGIC := '1';
	signal MS_INSTRUCTION_CHECK: STD_LOGIC := '1';
	signal MS_RBC_INLK_CHECK: STD_LOGIC := '1';
	signal MS_A_CHANNEL_VC_ERROR: STD_LOGIC := '1';
	signal MS_B_CHANNEL_VC_ERROR: STD_LOGIC := '1';
	signal MS_ASSEMBLY_CH_ERROR: STD_LOGIC := '1';
	signal MS_A_REG_SET_ERROR: STD_LOGIC := '1';
	signal MS_B_REG_RESET_ERROR: STD_LOGIC := '1';
	signal MS_OP_REG_SET_ERROR: STD_LOGIC := '1';
	signal PS_1ST_CLOCK_PULSE_1: STD_LOGIC := '0';
	signal MS_B_CHAR_SEL_ERROR: STD_LOGIC := '1';
	signal MS_ADDRESS_EXIT_ERROR: STD_LOGIC := '1';
	signal MS_ADDRESS_CH_ERROR: STD_LOGIC := '1';
	signal MS_1401_PUNCH_PRINT_ERROR: STD_LOGIC := '1';
	signal MS_ADDRESS_CHECK: STD_LOGIC := '1';
	signal MS_1401_CARD_PRINT_ERROR: STD_LOGIC := '1';
	signal MS_A_CHARACTER_SELECT_ERROR: STD_LOGIC := '1';
	signal MS_OP_MOD_REG_SET_ERROR: STD_LOGIC := '1';

	-- Outputs

	signal PS_ERROR_SAMPLE: STD_LOGIC;
	signal MS_MASTER_ERROR_STAR_AUTS_STAR: STD_LOGIC;
	signal MS_MASTER_ERROR: STD_LOGIC;
	signal PS_MASTER_ERROR: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here
   
   signal lastErrorSampleSig: std_logic := '1';

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_18_14_08_1_1_MASTER_ERROR_CONTROL_ACC port map(
		FPGA_CLK => FPGA_CLK,
		MS_ADDRESS_SET_ROUTINE => MS_ADDRESS_SET_ROUTINE,
		MS_LAST_LOGIC_GATE_1 => MS_LAST_LOGIC_GATE_1,
		MS_LOGIC_GATE_W => MS_LOGIC_GATE_W,
		PS_2ND_CLOCK_PULSE_CLAMPED => PS_2ND_CLOCK_PULSE_CLAMPED,
		MS_START_RESET => MS_START_RESET,
		MS_LOGIC_GATE_K => MS_LOGIC_GATE_K,
		MS_1401_CARD_PR_SAMPLE_B => MS_1401_CARD_PR_SAMPLE_B,
		MS_1401_CARD_PR_ERR_SAMPLE => MS_1401_CARD_PR_ERR_SAMPLE,
		MS_I_O_INTERLOCK_CHECK => MS_I_O_INTERLOCK_CHECK,
		MS_INSTRUCTION_CHECK => MS_INSTRUCTION_CHECK,
		MS_RBC_INLK_CHECK => MS_RBC_INLK_CHECK,
		MS_A_CHANNEL_VC_ERROR => MS_A_CHANNEL_VC_ERROR,
		MS_B_CHANNEL_VC_ERROR => MS_B_CHANNEL_VC_ERROR,
		MS_ASSEMBLY_CH_ERROR => MS_ASSEMBLY_CH_ERROR,
		MS_A_REG_SET_ERROR => MS_A_REG_SET_ERROR,
		MS_B_REG_RESET_ERROR => MS_B_REG_RESET_ERROR,
		MS_OP_REG_SET_ERROR => MS_OP_REG_SET_ERROR,
		PS_1ST_CLOCK_PULSE_1 => PS_1ST_CLOCK_PULSE_1,
		MS_B_CHAR_SEL_ERROR => MS_B_CHAR_SEL_ERROR,
		MS_ADDRESS_EXIT_ERROR => MS_ADDRESS_EXIT_ERROR,
		MS_ADDRESS_CH_ERROR => MS_ADDRESS_CH_ERROR,
		MS_1401_PUNCH_PRINT_ERROR => MS_1401_PUNCH_PRINT_ERROR,
		MS_ADDRESS_CHECK => MS_ADDRESS_CHECK,
		MS_1401_CARD_PRINT_ERROR => MS_1401_CARD_PRINT_ERROR,
		MS_A_CHARACTER_SELECT_ERROR => MS_A_CHARACTER_SELECT_ERROR,
		MS_OP_MOD_REG_SET_ERROR => MS_OP_MOD_REG_SET_ERROR,
		PS_ERROR_SAMPLE => PS_ERROR_SAMPLE,
		MS_MASTER_ERROR_STAR_AUTS_STAR => MS_MASTER_ERROR_STAR_AUTS_STAR,
		MS_MASTER_ERROR => MS_MASTER_ERROR,
		PS_MASTER_ERROR => PS_MASTER_ERROR);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,z2: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   
   variable lastErrorSample: std_logic := '1';  -- In positive logic, trigger starts off "set"

   begin

   -- Your test bench code
   
   testName := "18.14.08.1        ";

   -- First, a set test of the trigger.  We have to make sure that the pull on 
   -- circuit is not active (the pull of is OK using the initial values.)
   
   MS_LAST_LOGIC_GATE_1 <= '0';  -- Disable pull on circuit.
   MS_START_RESET <= '0';
   wait for 30 ns;
   MS_START_RESET <= '1';
   wait for 30 ns;
   
   check1(PS_ERROR_SAMPLE,'0',testName,"+S Error Sample Initial Reset Test");
   
   for tt in 0 to 2**8 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      f := tv(3);
      g := tv(4);
      h := tv(5);
      j := tv(6);
      s := tv(7);
      
      g1 := g or h;  -- Pull OFF (sets error)
      g2 := (lastErrorSample and not b and not f and not c) or a; -- Pull ON (Resets error)
      
      -- If the trigger would be pulled both on and off in a tug of war, skip
      -- that iteratin
      
      wait for 30 ns;
      next when g1 = '1' and g2 = '1';
   
		MS_ADDRESS_SET_ROUTINE <= not a;
		MS_LAST_LOGIC_GATE_1 <= not b;
		MS_LOGIC_GATE_W <= not c;
		MS_LOGIC_GATE_K <= not f;
		MS_1401_CARD_PR_SAMPLE_B <= not g;
		MS_1401_CARD_PR_ERR_SAMPLE <= not h;
		MS_I_O_INTERLOCK_CHECK <= not j;
		PS_1ST_CLOCK_PULSE_1 <= s;
		wait for 30 ns; -- Input signal settling time
		
		-- Run the clock
		
		PS_2ND_CLOCK_PULSE_CLAMPED <= '1';
		wait for 90 ns;
		PS_2ND_CLOCK_PULSE_CLAMPED <= '0';
      wait for 30 ns;

      -- g2 := (PS_ERROR_SAMPLE and not b and not f and not c) or a; -- Pull ON (Resets error)

      if(g1 = '1' and g2 = '0') then
         check1(PS_ERROR_SAMPLE,'1',testName,"Error Sample Set");
      elsif(g2 = '1' and g1 = '0') then
         check1(PS_ERROR_SAMPLE,'0',testName,"Error Sample Reset");
      else -- Neither g1 nor g2 set causes a toggle (both g1 and g2 set skips the loop, above)
         check1(PS_ERROR_SAMPLE,not lastErrorSample,testName,"Error Sample Toggles?");
      end if;
      
      check1(PS_MASTER_ERROR,PS_ERROR_SAMPLE and j and s,testName,"+S Master Error w/Trigger");
      check1(MS_MASTER_ERROR,not PS_MASTER_ERROR,testName,"-S Master Error w/Trigger");
      check1(MS_MASTER_ERROR_STAR_AUTS_STAR,not PS_MASTER_ERROR,testName,
         "-S Master Error *AUTS* w/Trigger");

      lastErrorSample := PS_ERROR_SAMPLE;
      lastErrorSampleSig <= lastErrorSample;      

      -- Set the variables back
      
		MS_ADDRESS_SET_ROUTINE <= '1';
		MS_LAST_LOGIC_GATE_1 <= '1';
		MS_LOGIC_GATE_W <= '1';
		MS_LOGIC_GATE_K <= '1';
		MS_1401_CARD_PR_SAMPLE_B <= '1';
		MS_1401_CARD_PR_ERR_SAMPLE <= '1';
		wait for 30 ns;
            
   end loop;
   
   -- Now test the combinatorial stuff (having already tested the output and gate)
   
   -- First, set the trigger
   
	MS_1401_CARD_PR_SAMPLE_B <= '0';
   MS_1401_CARD_PR_ERR_SAMPLE <= '0';  
   wait for 30 ns;
   
   check1(PS_ERROR_SAMPLE,'1',testName,"Set Error Sample for Combinatorial Test");

   for tt in 0 to 2**18 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      j := tv(0);
      k := tv(1);
      l := tv(2);
      m := tv(3);
      n := tv(4);
      o := tv(5);
      p := tv(6);
      q := tv(7);
      r := tv(8);
      s := tv(9);
      t := tv(10);
      u := tv(11);
      v := tv(12);
      w := tv(13);
      x := tv(14);
      y := tv(15);
      z := tv(16);
      z2 := tv(17);
      
		MS_I_O_INTERLOCK_CHECK <= not j;
      MS_INSTRUCTION_CHECK <= not k;
      MS_RBC_INLK_CHECK <= not l;
      MS_A_CHANNEL_VC_ERROR <= not m;
      MS_B_CHANNEL_VC_ERROR <= not n;
      MS_ASSEMBLY_CH_ERROR <= not o;
      MS_A_REG_SET_ERROR <= not p;
      MS_B_REG_RESET_ERROR <= not q;
      MS_OP_REG_SET_ERROR <= not r;
      PS_1ST_CLOCK_PULSE_1 <= s;
      MS_B_CHAR_SEL_ERROR <= not t;
      MS_ADDRESS_EXIT_ERROR <= not u;
      MS_ADDRESS_CH_ERROR <= not v;
      MS_1401_PUNCH_PRINT_ERROR <= not w;
      MS_ADDRESS_CHECK <= not x;
      MS_1401_CARD_PRINT_ERROR <= not y;
      MS_A_CHARACTER_SELECT_ERROR <= not z;
      MS_OP_MOD_REG_SET_ERROR <= not z2;
      wait for 30 ns;
      
      check1(PS_MASTER_ERROR,s and (j or k or l or m or n or o or p or q or r or t or u or
         v or w or x or y or z or z2),testName,"Master Error Combinatorial Test");
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
