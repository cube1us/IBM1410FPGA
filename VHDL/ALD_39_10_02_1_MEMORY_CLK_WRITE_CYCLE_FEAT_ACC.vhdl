-- VHDL for IBM SMS ALD page 39.10.02.1
-- Title: MEMORY CLK WRITE CYCLE FEAT-ACC
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/21/2020 4:09:40 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_COMPUTER_RESET_2:	 in STD_LOGIC;
		MY_START_MEM_CLOCK:	 in STD_LOGIC;
		MY_WRITE_CALL_M:	 in STD_LOGIC;
		MY_MEM_AR_TTHP4B:	 in STD_LOGIC;
		MY_MEM_AR_NOT_TTHP4B:	 in STD_LOGIC;
		MY_Z_PULSE:	 out STD_LOGIC;
		MY_Y_WR_1:	 out STD_LOGIC;
		MY_Y_WR_2:	 out STD_LOGIC;
		MY_X_WR_1:	 out STD_LOGIC;
		PY_START_WRITE:	 out STD_LOGIC;
		MY_X_WR_2:	 out STD_LOGIC);
end ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC;

architecture behavioral of ALD_39_10_02_1_MEMORY_CLK_WRITE_CYCLE_FEAT_ACC is 

	signal OUT_5A_A: STD_LOGIC;
	signal OUT_4A_D: STD_LOGIC;
	signal OUT_3B_A: STD_LOGIC;
	signal OUT_4C_P: STD_LOGIC;
	signal OUT_3C_E: STD_LOGIC;
	signal OUT_5D_A: STD_LOGIC;
	signal OUT_5D_Q: STD_LOGIC;
	signal OUT_3D_A: STD_LOGIC;
	signal OUT_2D_A: STD_LOGIC;
	signal OUT_1D_P: STD_LOGIC;
	signal OUT_5E_C: STD_LOGIC;
	signal OUT_4E_A: STD_LOGIC;
	signal OUT_3E_A: STD_LOGIC;
	signal OUT_2E_A: STD_LOGIC;
	signal OUT_1E_P: STD_LOGIC;
	signal OUT_4F_C: STD_LOGIC;
	signal OUT_4G_P: STD_LOGIC;
	signal OUT_3G_P: STD_LOGIC;
	signal OUT_1G_L: STD_LOGIC;
	signal OUT_4H_F: STD_LOGIC;
	signal OUT_2H_P: STD_LOGIC;
	signal OUT_1H_Q: STD_LOGIC;
	signal OUT_5I_A: STD_LOGIC;
	signal OUT_5I_Q: STD_LOGIC;
	signal OUT_3I_D: STD_LOGIC;
	signal OUT_2I_A: STD_LOGIC;
	signal OUT_1I_D: STD_LOGIC;
	signal OUT_DOT_4E: STD_LOGIC;
	signal OUT_DOT_4G: STD_LOGIC;

begin


	SMS_DEM_5A: entity SMS_DEM
	    port map (
		FPGA_CLK => FPGA_CLK,
		ACSET => OUT_1E_P,	-- Pin G
		ACRESET => OUT_4C_P,	-- Pin B
		DCRESET => MS_COMPUTER_RESET_2,	-- Pin R
		GATEON => '1',	-- Pin P
		GATEOFF => '1',	-- Pin C
		OUTON => OUT_5A_A,
		DCSET => OPEN,
		OUTOFF => OPEN,
		GROUND => OPEN,
		DCSFORCE => OPEN,
		DCRFORCE => OPEN );

	OUT_4A_D <= NOT OUT_5A_A;
	OUT_3B_A <= OUT_4C_P;
	OUT_4C_P <= NOT OUT_5D_A;
	OUT_3C_E <= OUT_4C_P;

	SMS_DEM_5D: entity SMS_DEM
	    port map (
		FPGA_CLK => FPGA_CLK,
		ACSET => OUT_1E_P,	-- Pin G
		ACRESET => OUT_1I_D,	-- Pin B
		DCRESET => MS_COMPUTER_RESET_2,	-- Pin R
		GATEON => '1',	-- Pin P
		GATEOFF => '1',	-- Pin C
		OUTON => OUT_5D_A,
		OUTOFF => OUT_5D_Q,
		DCSET => OPEN,
		GROUND => OPEN,
		DCSFORCE => OPEN,
		DCRFORCE => OPEN );

	OUT_3D_A <= NOT OUT_5D_Q;

	InvShiftRegister_2D: entity InvShiftRegister
	    generic map( DELAY => 280, CLOCKPERIOD => 10)
	    port map (
		FPGA_CLK => FPGA_CLK,
		FIFO_IN => OUT_3D_A,	-- Pin L
		FIFO_OUT => OUT_2D_A );

	OUT_1D_P <= NOT OUT_2D_A;
	OUT_5E_C <= NOT(MY_START_MEM_CLOCK OR MY_WRITE_CALL_M );
	OUT_4E_A <= NOT OUT_5E_C;
	OUT_3E_A <= NOT OUT_DOT_4E;

	InvShiftRegister_2E: entity InvShiftRegister
	    generic map( DELAY => 150, CLOCKPERIOD => 10)
	    port map (
		FPGA_CLK => FPGA_CLK,
		FIFO_IN => OUT_3E_A,	-- Pin L
		FIFO_OUT => OUT_2E_A );

	OUT_1E_P <= NOT OUT_2E_A;
	OUT_4F_C <= NOT(MY_MEM_AR_TTHP4B );
	OUT_4G_P <= NOT OUT_5E_C;
	OUT_3G_P <= NOT OUT_DOT_4G;
	OUT_1G_L <= OUT_2H_P;
	OUT_4H_F <= NOT(MY_MEM_AR_NOT_TTHP4B );
	OUT_2H_P <= NOT OUT_5I_A;
	OUT_1H_Q <= OUT_2H_P;

	SMS_DEM_5I: entity SMS_DEM
	    port map (
		FPGA_CLK => FPGA_CLK,
		ACSET => OUT_1D_P,	-- Pin G
		ACRESET => OUT_1I_D,	-- Pin B
		DCRESET => MS_COMPUTER_RESET_2,	-- Pin R
		GATEON => '1',	-- Pin P
		GATEOFF => '1',	-- Pin C
		OUTON => OUT_5I_A,
		OUTOFF => OUT_5I_Q,
		DCSET => OPEN,
		GROUND => OPEN,
		DCSFORCE => OPEN,
		DCRFORCE => OPEN );

	OUT_3I_D <= NOT OUT_5I_Q;

	InvShiftRegister_2I: entity InvShiftRegister
	    generic map( DELAY => 1200, CLOCKPERIOD => 10)
	    port map (
		FPGA_CLK => FPGA_CLK,
		FIFO_IN => OUT_3I_D,	-- Pin L
		FIFO_OUT => OUT_2I_A );

	OUT_1I_D <= NOT OUT_2I_A;
	OUT_DOT_4E <= OUT_4E_A OR OUT_4F_C;
	OUT_DOT_4G <= OUT_4G_P OR OUT_4H_F;

	MY_Z_PULSE <= OUT_4A_D;
	MY_Y_WR_1 <= OUT_3B_A;
	MY_Y_WR_2 <= OUT_3C_E;
	PY_START_WRITE <= OUT_3G_P;
	MY_X_WR_1 <= OUT_1G_L;
	MY_X_WR_2 <= OUT_1H_Q;


end;
