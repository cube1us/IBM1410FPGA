-- Test Bench VHDL for IBM SMS ALD page 19.10.03.1
-- Title: INTERRUPT CONTROLS
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 10/14/2020 5:32:15 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_19_10_03_1_INTERRUPT_CONTROLS_tb is
end ALD_19_10_03_1_INTERRUPT_CONTROLS_tb;

architecture behavioral of ALD_19_10_03_1_INTERRUPT_CONTROLS_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_19_10_03_1_INTERRUPT_CONTROLS
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		PS_I_RING_6_TIME:	 in STD_LOGIC;
		PS_NOT_PERCENT_TYPE_OP_CODES:	 in STD_LOGIC;
		PS_I_CYCLE_1:	 in STD_LOGIC;
		PS_INTERRUPT_REQUEST:	 in STD_LOGIC;
		MS_INTERRUPT_TEST_OP_CODE:	 in STD_LOGIC;
		PS_PRIORITY_ALERT_MODE:	 in STD_LOGIC;
		PS_B_CH_NOT_WM_BIT:	 in STD_LOGIC;
		PS_LOGIC_GATE_Z:	 in STD_LOGIC;
		PS_INTERRUPT_BRANCH:	 in STD_LOGIC;
		PS_INT_OUTQUIRY_REQUEST:	 in STD_LOGIC;
		PS_I_OP_DOT_I_CYCLE_DOT_E:	 in STD_LOGIC;
		PS_B_CYCLE_1:	 in STD_LOGIC;
		MS_PROGRAM_RESET_6:	 in STD_LOGIC;
		MS_I_OP_DOT_I_CYCLE_DOT_C:	 in STD_LOGIC;
		MS_E_CH_IN_PROCESS:	 in STD_LOGIC;
		PS_NO_SCAN_1:	 in STD_LOGIC;
		PS_INTERRUPT_TEST_OP_CODE:	 in STD_LOGIC;
		MS_START_INTERRUPT:	 out STD_LOGIC;
		PS_START_INTERRUPT:	 out STD_LOGIC;
		MS_SET_I_RING_INTERRUPT:	 out STD_LOGIC;
		MS_OUTQUIRY_INTR_COND:	 out STD_LOGIC;
		PS_OUTQUIRY_INTR_COND:	 out STD_LOGIC;
		PS_Y_OP_DOT_TEST_RESET:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal PS_I_RING_6_TIME: STD_LOGIC := '0';
	signal PS_NOT_PERCENT_TYPE_OP_CODES: STD_LOGIC := '0';
	signal PS_I_CYCLE_1: STD_LOGIC := '0';
	signal PS_INTERRUPT_REQUEST: STD_LOGIC := '0';
	signal MS_INTERRUPT_TEST_OP_CODE: STD_LOGIC := '1';
	signal PS_PRIORITY_ALERT_MODE: STD_LOGIC := '0';
	signal PS_B_CH_NOT_WM_BIT: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_Z: STD_LOGIC := '0';
	signal PS_INTERRUPT_BRANCH: STD_LOGIC := '0';
	signal PS_INT_OUTQUIRY_REQUEST: STD_LOGIC := '0';
	signal PS_I_OP_DOT_I_CYCLE_DOT_E: STD_LOGIC := '0';
	signal PS_B_CYCLE_1: STD_LOGIC := '0';
	signal MS_PROGRAM_RESET_6: STD_LOGIC := '1';
	signal MS_I_OP_DOT_I_CYCLE_DOT_C: STD_LOGIC := '1';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal PS_NO_SCAN_1: STD_LOGIC := '0';
	signal PS_INTERRUPT_TEST_OP_CODE: STD_LOGIC := '0';

	-- Outputs

	signal MS_START_INTERRUPT: STD_LOGIC;
	signal PS_START_INTERRUPT: STD_LOGIC;
	signal MS_SET_I_RING_INTERRUPT: STD_LOGIC;
	signal MS_OUTQUIRY_INTR_COND: STD_LOGIC;
	signal PS_OUTQUIRY_INTR_COND: STD_LOGIC;
	signal PS_Y_OP_DOT_TEST_RESET: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_19_10_03_1_INTERRUPT_CONTROLS port map(
		FPGA_CLK => FPGA_CLK,
		PS_I_RING_6_TIME => PS_I_RING_6_TIME,
		PS_NOT_PERCENT_TYPE_OP_CODES => PS_NOT_PERCENT_TYPE_OP_CODES,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		PS_INTERRUPT_REQUEST => PS_INTERRUPT_REQUEST,
		MS_INTERRUPT_TEST_OP_CODE => MS_INTERRUPT_TEST_OP_CODE,
		PS_PRIORITY_ALERT_MODE => PS_PRIORITY_ALERT_MODE,
		PS_B_CH_NOT_WM_BIT => PS_B_CH_NOT_WM_BIT,
		PS_LOGIC_GATE_Z => PS_LOGIC_GATE_Z,
		PS_INTERRUPT_BRANCH => PS_INTERRUPT_BRANCH,
		PS_INT_OUTQUIRY_REQUEST => PS_INT_OUTQUIRY_REQUEST,
		PS_I_OP_DOT_I_CYCLE_DOT_E => PS_I_OP_DOT_I_CYCLE_DOT_E,
		PS_B_CYCLE_1 => PS_B_CYCLE_1,
		MS_PROGRAM_RESET_6 => MS_PROGRAM_RESET_6,
		MS_I_OP_DOT_I_CYCLE_DOT_C => MS_I_OP_DOT_I_CYCLE_DOT_C,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		PS_NO_SCAN_1 => PS_NO_SCAN_1,
		PS_INTERRUPT_TEST_OP_CODE => PS_INTERRUPT_TEST_OP_CODE,
		MS_START_INTERRUPT => MS_START_INTERRUPT,
		PS_START_INTERRUPT => PS_START_INTERRUPT,
		MS_SET_I_RING_INTERRUPT => MS_SET_I_RING_INTERRUPT,
		MS_OUTQUIRY_INTR_COND => MS_OUTQUIRY_INTR_COND,
		PS_OUTQUIRY_INTR_COND => PS_OUTQUIRY_INTR_COND,
		PS_Y_OP_DOT_TEST_RESET => PS_Y_OP_DOT_TEST_RESET);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "19.10.03.1        ";

   for tt in 0 to 2**16 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      p := tv(13);
      q := tv(14);
      r := tv(15);

      -- Use signal "n" to reset the Outquiry latch one of two ways
      
		MS_PROGRAM_RESET_6 <= n;
      MS_I_OP_DOT_I_CYCLE_DOT_C <= not n;
      wait for 30 ns;
		MS_PROGRAM_RESET_6 <= '1';
      MS_I_OP_DOT_I_CYCLE_DOT_C <= '1';
      MS_E_CH_IN_PROCESS <= '1';
      wait for 30 ns;
      check1(PS_OUTQUIRY_INTR_COND,'0',testName,"+S Outquiry Interrupt loop reset");
      check1(MS_OUTQUIRY_INTR_COND,'1',testName,"1S Outquiry Interrupt loop reset");
      
		PS_I_RING_6_TIME <= a;
		PS_NOT_PERCENT_TYPE_OP_CODES <= b;
		PS_I_CYCLE_1 <= c;
		PS_INTERRUPT_REQUEST <= d;
		MS_INTERRUPT_TEST_OP_CODE <= not e;
		PS_PRIORITY_ALERT_MODE <= f;
		PS_B_CH_NOT_WM_BIT <= g;
		PS_LOGIC_GATE_Z <= h;
		PS_INTERRUPT_BRANCH <= j;
		PS_INT_OUTQUIRY_REQUEST <= k;
		PS_I_OP_DOT_I_CYCLE_DOT_E <= l;
		PS_B_CYCLE_1 <= m;
		MS_E_CH_IN_PROCESS <= not p;
		PS_NO_SCAN_1 <= q;
		PS_INTERRUPT_TEST_OP_CODE <= r;      
      wait for 30 ns; -- Maybe set latch, too
      
      check1(PS_START_INTERRUPT,d and not e and f and b and g and a and c,testName,"+S Start Interrupt");
      check1(MS_START_INTERRUPT,NOT PS_START_INTERRUPT,testName,"-S Start Interrupt");
      check1(MS_SET_I_RING_INTERRUPT,not(h and j and m),testName,"Set I Ring Interrupt");
      check1(PS_Y_OP_DOT_TEST_RESET,m and q and r,testName,"Y OP . Test Reset");
      
      -- Reset latch related variable so it won't be forced on during next iteration
		PS_INT_OUTQUIRY_REQUEST <= '0';
		wait for 30 ns;
		
		check1(PS_OUTQUIRY_INTR_COND,not p and k and l,testName,"+S Outquiry Interrupt Cond");
		check1(MS_OUTQUIRY_INTR_COND,NOT PS_OUTQUIRY_INTR_COND,testName,"+S Outquiry Interrupt Cond");
		
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
