-- VHDL for IBM SMS ALD page 15.70.28.1
-- Title: F CH REGISTERS WM BIT
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/28/2020 7:40:36 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_70_28_1_F_CH_REGISTERS_WM_BIT is
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_F1_INPUT_WM_BIT:	 in STD_LOGIC;
		PS_SET_F1_REG:	 in STD_LOGIC;
		PS_F1_INPUT_WM_BIT:	 in STD_LOGIC;
		PS_COPY_F1_WM_DOT_C_BIT:	 in STD_LOGIC;
		PS_SET_F2_REG:	 in STD_LOGIC;
		PS_COPY_INV_F1_WM_DOT_C_BIT:	 in STD_LOGIC;
		MS_SET_F2_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_F1_REG_NOT_WM_BIT:	 out STD_LOGIC;
		PS_F1_REG_WM_BIT:	 out STD_LOGIC;
		PS_F2_REG_WM_BIT:	 out STD_LOGIC;
		MS_F2_REG_WM_BIT:	 out STD_LOGIC);
end ALD_15_70_28_1_F_CH_REGISTERS_WM_BIT;

architecture behavioral of ALD_15_70_28_1_F_CH_REGISTERS_WM_BIT is 

	signal OUT_4B_NoPin: STD_LOGIC;
	signal OUT_3B_C: STD_LOGIC;
	signal OUT_3B_C_Latch: STD_LOGIC;
	signal OUT_2B_D: STD_LOGIC;
	signal OUT_2B_D_Latch: STD_LOGIC;
	signal OUT_1B_D: STD_LOGIC;
	signal OUT_4C_K: STD_LOGIC;
	signal OUT_2D_C: STD_LOGIC;
	signal OUT_4E_F: STD_LOGIC;
	signal OUT_4F_E: STD_LOGIC;
	signal OUT_3F_P: STD_LOGIC;
	signal OUT_1F_C: STD_LOGIC;
	signal OUT_4G_D: STD_LOGIC;
	signal OUT_3G_P: STD_LOGIC;
	signal OUT_3G_P_Latch: STD_LOGIC;
	signal OUT_2G_NoPin: STD_LOGIC;
	signal OUT_2G_NoPin_Latch: STD_LOGIC;
	signal OUT_1G_B: STD_LOGIC;
	signal OUT_4H_C: STD_LOGIC;
	signal OUT_DOT_3F: STD_LOGIC;

begin

	OUT_4B_NoPin <= NOT(MS_F1_INPUT_WM_BIT AND PS_SET_F1_REG );
	OUT_3B_C_Latch <= NOT(OUT_4B_NoPin AND OUT_2B_D );
	OUT_2B_D_Latch <= NOT(OUT_3B_C AND OUT_4C_K );
	OUT_1B_D <= NOT OUT_2B_D;
	OUT_4C_K <= NOT(PS_SET_F1_REG AND PS_F1_INPUT_WM_BIT );
	OUT_2D_C <= NOT OUT_3B_C;
	OUT_4E_F <= NOT(OUT_1B_D AND PS_COPY_F1_WM_DOT_C_BIT AND PS_SET_F2_REG );
	OUT_4F_E <= NOT(OUT_2D_C AND PS_SET_F2_REG AND PS_COPY_INV_F1_WM_DOT_C_BIT );
	OUT_3F_P <= NOT(OUT_4E_F AND OUT_4F_E );
	OUT_1F_C <= NOT OUT_DOT_3F;
	OUT_4G_D <= NOT(OUT_2D_C AND PS_SET_F2_REG AND PS_COPY_F1_WM_DOT_C_BIT );
	OUT_3G_P_Latch <= NOT(MS_SET_F2_WORD_SEPARATOR AND OUT_2G_NoPin );
	OUT_2G_NoPin_Latch <= NOT(OUT_4G_D AND OUT_DOT_3F AND OUT_4H_C );
	OUT_1G_B <= NOT OUT_2G_NoPin;
	OUT_4H_C <= NOT(OUT_1B_D AND PS_SET_F2_REG AND PS_COPY_INV_F1_WM_DOT_C_BIT );
	OUT_DOT_3F <= OUT_3F_P OR OUT_3G_P;

	PS_F1_REG_NOT_WM_BIT <= OUT_1B_D;
	PS_F1_REG_WM_BIT <= OUT_2D_C;
	PS_F2_REG_WM_BIT <= OUT_1F_C;
	MS_F2_REG_WM_BIT <= OUT_1G_B;

	Latch_3B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3B_C_Latch,
		Q => OUT_3B_C,
		QBar => OPEN );

	Latch_2B: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2B_D_Latch,
		Q => OUT_2B_D,
		QBar => OPEN );

	Latch_3G: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_3G_P_Latch,
		Q => OUT_3G_P,
		QBar => OPEN );

	Latch_2G: entity DFlipFlop port map (
		C => FPGA_CLK,
		D => OUT_2G_NoPin_Latch,
		Q => OUT_2G_NoPin,
		QBar => OPEN );


end;
