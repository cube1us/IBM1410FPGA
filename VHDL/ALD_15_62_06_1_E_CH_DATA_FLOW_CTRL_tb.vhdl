-- Test Bench VHDL for IBM SMS ALD page 15.62.06.1
-- Title: E CH DATA FLOW CTRL
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/26/2020 7:52:45 AM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_62_06_1_E_CH_DATA_FLOW_CTRL_tb is
end ALD_15_62_06_1_E_CH_DATA_FLOW_CTRL_tb;

architecture behavioral of ALD_15_62_06_1_E_CH_DATA_FLOW_CTRL_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_62_06_1_E_CH_DATA_FLOW_CTRL
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_E2_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_SET_E2_REG:	 in STD_LOGIC;
		MS_GATE_CONSOLE_TO_ASSEMBLY:	 in STD_LOGIC;
		PS_E1_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_E2_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_E_CH_INPUT_MODE:	 in STD_LOGIC;
		PS_E1_REG_WM_BIT:	 in STD_LOGIC;
		MS_E1_REG_WORD_SEPARATOR:	 in STD_LOGIC;
		PS_E1_REG_NOT_WM_BIT:	 in STD_LOGIC;
		MS_E_CH_IN_PROCESS:	 in STD_LOGIC;
		PS_I_CYCLE_1:	 in STD_LOGIC;
		PS_E_CH_OUTPUT_MODE:	 in STD_LOGIC;
		PS_COPY_E1_BCD_TO_E2_REG:	 out STD_LOGIC;
		MS_SET_E2_WORD_SEPARATOR:	 out STD_LOGIC;
		PS_COPY_INV_E1_WM_DOT_C_BIT:	 out STD_LOGIC;
		PS_COPY_E1_WM_DOT_C_BIT:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_E2_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_SET_E2_REG: STD_LOGIC := '0';
	signal MS_GATE_CONSOLE_TO_ASSEMBLY: STD_LOGIC := '1';
	signal PS_E1_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_E2_REG_WORD_SEPARATOR: STD_LOGIC := '0';
	signal PS_E_CH_INPUT_MODE: STD_LOGIC := '0';
	signal PS_E1_REG_WM_BIT: STD_LOGIC := '0';
	signal MS_E1_REG_WORD_SEPARATOR: STD_LOGIC := '1';
	signal PS_E1_REG_NOT_WM_BIT: STD_LOGIC := '0';
	signal MS_E_CH_IN_PROCESS: STD_LOGIC := '1';
	signal PS_I_CYCLE_1: STD_LOGIC := '0';
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC := '0';

	-- Outputs

	signal PS_COPY_E1_BCD_TO_E2_REG: STD_LOGIC;
	signal MS_SET_E2_WORD_SEPARATOR: STD_LOGIC;
	signal PS_COPY_INV_E1_WM_DOT_C_BIT: STD_LOGIC;
	signal PS_COPY_E1_WM_DOT_C_BIT: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_62_06_1_E_CH_DATA_FLOW_CTRL port map(
		FPGA_CLK => FPGA_CLK,
		MS_E2_REG_WORD_SEPARATOR => MS_E2_REG_WORD_SEPARATOR,
		PS_SET_E2_REG => PS_SET_E2_REG,
		MS_GATE_CONSOLE_TO_ASSEMBLY => MS_GATE_CONSOLE_TO_ASSEMBLY,
		PS_E1_REG_WORD_SEPARATOR => PS_E1_REG_WORD_SEPARATOR,
		PS_E2_REG_WORD_SEPARATOR => PS_E2_REG_WORD_SEPARATOR,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		PS_E1_REG_WM_BIT => PS_E1_REG_WM_BIT,
		MS_E1_REG_WORD_SEPARATOR => MS_E1_REG_WORD_SEPARATOR,
		PS_E1_REG_NOT_WM_BIT => PS_E1_REG_NOT_WM_BIT,
		MS_E_CH_IN_PROCESS => MS_E_CH_IN_PROCESS,
		PS_I_CYCLE_1 => PS_I_CYCLE_1,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		PS_COPY_E1_BCD_TO_E2_REG => PS_COPY_E1_BCD_TO_E2_REG,
		MS_SET_E2_WORD_SEPARATOR => MS_SET_E2_WORD_SEPARATOR,
		PS_COPY_INV_E1_WM_DOT_C_BIT => PS_COPY_INV_E1_WM_DOT_C_BIT,
		PS_COPY_E1_WM_DOT_C_BIT => PS_COPY_E1_WM_DOT_C_BIT);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.62.06.1        ";

   for tt in 0 to 2**12 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      a := tv(0);
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      j := tv(8);
      k := tv(9);
      l := tv(10);
      m := tv(11);

      g1 := not c and e and not h and f;
      g2 := e and d and not c and m and g;
      g3 := j and d and e;
      g4 := f and not a;
      g5 := not k and l;
      g6 := not h and m;

	   MS_E2_REG_WORD_SEPARATOR <= not a;
	   PS_SET_E2_REG <= b;
	   MS_GATE_CONSOLE_TO_ASSEMBLY <= not c;
      PS_E1_REG_WORD_SEPARATOR <= d;
      PS_E2_REG_WORD_SEPARATOR <= e;
   	PS_E_CH_INPUT_MODE <= f;
   	PS_E1_REG_WM_BIT <= g;
   	MS_E1_REG_WORD_SEPARATOR <= not h;
      PS_E1_REG_NOT_WM_BIT <= j;
   	MS_E_CH_IN_PROCESS <= not k;
   	PS_I_CYCLE_1 <= l;
   	PS_E_CH_OUTPUT_MODE <= m;
      
      wait for 30 ns;
      
      check1(PS_COPY_E1_BCD_TO_E2_REG,not d or a or c,testName,"Copy E1 BCD to E2");
      check1(MS_SET_E2_WORD_SEPARATOR,not(b and not c and not a and d),testName,"-S Set E2 WS");
      check1(PS_COPY_INV_E1_WM_DOT_C_BIT,g1 or g2,testName,"Copy Inv E1 WM.C Bit");
      check1(PS_COPY_E1_WM_DOT_C_BIT,c or g3 or g4 or g5 or g6,testName,"Copy E1 WM.C Bit");      
      
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
