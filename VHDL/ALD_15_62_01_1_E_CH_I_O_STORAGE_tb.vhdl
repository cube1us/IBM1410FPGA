-- Test Bench VHDL for IBM SMS ALD page 15.62.01.1
-- Title: E CH I-O STORAGE
-- IBM Machine Name 1411
-- Generated by GenerateHDL at 9/19/2020 12:56:08 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity ALD_15_62_01_1_E_CH_I_O_STORAGE_tb is
end ALD_15_62_01_1_E_CH_I_O_STORAGE_tb;

architecture behavioral of ALD_15_62_01_1_E_CH_I_O_STORAGE_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component ALD_15_62_01_1_E_CH_I_O_STORAGE
	    Port (
		FPGA_CLK:		 in STD_LOGIC;
		MS_RECEIVER_LATCH_STAR_1311:	 in STD_LOGIC;
		PS_PERCENT_OR_COML_AT:	 in STD_LOGIC;
		PS_M_OR_L_OP_CODES:	 in STD_LOGIC;
		PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD:	 in STD_LOGIC;
		PS_I_RING_11_TIME:	 in STD_LOGIC;
		PS_LOGIC_GATE_F_1:	 in STD_LOGIC;
		MS_E_CH_FILE_ADDR_TRANSFER:	 in STD_LOGIC;
		MS_1401_PRINT:	 in STD_LOGIC;
		PS_2ND_CLOCK_PULSE_2:	 in STD_LOGIC;
		MS_1401_PUNCH:	 in STD_LOGIC;
		MS_E_CH_RESET:	 in STD_LOGIC;
		MS_TEST_PRINT_ERROR:	 in STD_LOGIC;
		MS_E_CH_FORMS_CTRL_OP_CODE_JRJ:	 in STD_LOGIC;
		MS_TEST_PUNCH_ERROR:	 in STD_LOGIC;
		PS_W_OR_X_SYMBOL_OP_MODIFIER:	 in STD_LOGIC;
		MS_E_CH_STACK_SEL_OP_CODE:	 in STD_LOGIC;
		MS_1401_READ:	 in STD_LOGIC;
		MS_TEST_READ_E_OR_F:	 in STD_LOGIC;
		PS_E_CH_INPUT_MODE:	 out STD_LOGIC;
		MS_E_CH_INPUT_MODE:	 out STD_LOGIC;
		PS_E_CH_OUTPUT_MODE:	 out STD_LOGIC;
		MC_OUTPUT_MODE_TO_BUFFER:	 out STD_LOGIC;
		MC_INPUT_MODE_TO_BUFFER:	 out STD_LOGIC;
		MC_OUTPUT_OP_TO_1301_STAR_E_CH:	 out STD_LOGIC;
		MC_OUTPUT_OP_TO_1405_STAR_E_CH:	 out STD_LOGIC;
		MC_INPUT_OP_TO_1405_STAR_E_CH:	 out STD_LOGIC;
		MC_INPUT_OP_TO_1301_STAR_E_CH:	 out STD_LOGIC;
		LAMP_15A1E14:	 out STD_LOGIC;
		LAMP_15A1F14:	 out STD_LOGIC);
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_RECEIVER_LATCH_STAR_1311: STD_LOGIC := '1';
	signal PS_PERCENT_OR_COML_AT: STD_LOGIC := '0';
	signal PS_M_OR_L_OP_CODES: STD_LOGIC := '0';
	signal PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD: STD_LOGIC := '0';
	signal PS_I_RING_11_TIME: STD_LOGIC := '0';
	signal PS_LOGIC_GATE_F_1: STD_LOGIC := '0';
	signal MS_E_CH_FILE_ADDR_TRANSFER: STD_LOGIC := '1';
	signal MS_1401_PRINT: STD_LOGIC := '1';
	signal PS_2ND_CLOCK_PULSE_2: STD_LOGIC := '0';
	signal MS_1401_PUNCH: STD_LOGIC := '1';
	signal MS_E_CH_RESET: STD_LOGIC := '1';
	signal MS_TEST_PRINT_ERROR: STD_LOGIC := '1';
	signal MS_E_CH_FORMS_CTRL_OP_CODE_JRJ: STD_LOGIC := '1';
	signal MS_TEST_PUNCH_ERROR: STD_LOGIC := '1';
	signal PS_W_OR_X_SYMBOL_OP_MODIFIER: STD_LOGIC := '0';
	signal MS_E_CH_STACK_SEL_OP_CODE: STD_LOGIC := '1';
	signal MS_1401_READ: STD_LOGIC := '1';
	signal MS_TEST_READ_E_OR_F: STD_LOGIC := '1';

	-- Outputs

	signal PS_E_CH_INPUT_MODE: STD_LOGIC;
	signal MS_E_CH_INPUT_MODE: STD_LOGIC;
	signal PS_E_CH_OUTPUT_MODE: STD_LOGIC;
	signal MC_OUTPUT_MODE_TO_BUFFER: STD_LOGIC;
	signal MC_INPUT_MODE_TO_BUFFER: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1301_STAR_E_CH: STD_LOGIC;
	signal MC_OUTPUT_OP_TO_1405_STAR_E_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1405_STAR_E_CH: STD_LOGIC;
	signal MC_INPUT_OP_TO_1301_STAR_E_CH: STD_LOGIC;
	signal LAMP_15A1E14: STD_LOGIC;
	signal LAMP_15A1F14: STD_LOGIC;

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: ALD_15_62_01_1_E_CH_I_O_STORAGE port map(
		FPGA_CLK => FPGA_CLK,
		MS_RECEIVER_LATCH_STAR_1311 => MS_RECEIVER_LATCH_STAR_1311,
		PS_PERCENT_OR_COML_AT => PS_PERCENT_OR_COML_AT,
		PS_M_OR_L_OP_CODES => PS_M_OR_L_OP_CODES,
		PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD => PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD,
		PS_I_RING_11_TIME => PS_I_RING_11_TIME,
		PS_LOGIC_GATE_F_1 => PS_LOGIC_GATE_F_1,
		MS_E_CH_FILE_ADDR_TRANSFER => MS_E_CH_FILE_ADDR_TRANSFER,
		MS_1401_PRINT => MS_1401_PRINT,
		PS_2ND_CLOCK_PULSE_2 => PS_2ND_CLOCK_PULSE_2,
		MS_1401_PUNCH => MS_1401_PUNCH,
		MS_E_CH_RESET => MS_E_CH_RESET,
		MS_TEST_PRINT_ERROR => MS_TEST_PRINT_ERROR,
		MS_E_CH_FORMS_CTRL_OP_CODE_JRJ => MS_E_CH_FORMS_CTRL_OP_CODE_JRJ,
		MS_TEST_PUNCH_ERROR => MS_TEST_PUNCH_ERROR,
		PS_W_OR_X_SYMBOL_OP_MODIFIER => PS_W_OR_X_SYMBOL_OP_MODIFIER,
		MS_E_CH_STACK_SEL_OP_CODE => MS_E_CH_STACK_SEL_OP_CODE,
		MS_1401_READ => MS_1401_READ,
		MS_TEST_READ_E_OR_F => MS_TEST_READ_E_OR_F,
		PS_E_CH_INPUT_MODE => PS_E_CH_INPUT_MODE,
		MS_E_CH_INPUT_MODE => MS_E_CH_INPUT_MODE,
		PS_E_CH_OUTPUT_MODE => PS_E_CH_OUTPUT_MODE,
		MC_OUTPUT_MODE_TO_BUFFER => MC_OUTPUT_MODE_TO_BUFFER,
		MC_INPUT_MODE_TO_BUFFER => MC_INPUT_MODE_TO_BUFFER,
		MC_OUTPUT_OP_TO_1301_STAR_E_CH => MC_OUTPUT_OP_TO_1301_STAR_E_CH,
		MC_OUTPUT_OP_TO_1405_STAR_E_CH => MC_OUTPUT_OP_TO_1405_STAR_E_CH,
		MC_INPUT_OP_TO_1405_STAR_E_CH => MC_INPUT_OP_TO_1405_STAR_E_CH,
		MC_INPUT_OP_TO_1301_STAR_E_CH => MC_INPUT_OP_TO_1301_STAR_E_CH,
		LAMP_15A1E14 => LAMP_15A1E14,
		LAMP_15A1F14 => LAMP_15A1F14);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g7, g8, g9, g10: std_logic;
   variable lin, lout: std_logic;

   begin

   -- Your test bench code

   testName := "15.62.01.1        ";

   for tt in 0 to 2**17 loop
      tv := std_logic_vector(to_unsigned(tt,tv'Length));
      -- a := tv(0); -- Handle below - special case to avoid conflicts
      b := tv(1);
      c := tv(2);
      d := tv(3);
      e := tv(4);
      f := tv(5);
      g := tv(6);
      h := tv(7);
      i := tv(8);
      j := tv(9);
      -- k := tv(9);
      l := tv(10);
      m := tv(11);
      n := tv(12);
      o := tv(13);
      p := tv(14);
      q := tv(15);
      r := tv(16);

      -- Can't have 1311 recover mode if special case writes?
      
      a := tv(0) and not h and not j and not l and not m and not n and not g3;      
      
      g1 := b and c and e and f;
      g2 := g1 and d and i;
      lin := g2 or p or a or q or r;
      g3 := g1 and o and i;
      g4 := g3 or h or j or l or m or n;
      lout := not a and g4;
      
      -- First, reset the latches each time
      
      MS_E_CH_RESET <= '0';
      wait for 30 ns;
      MS_E_CH_RESET <= '1';
      wait for 30 ns;

    	MS_RECEIVER_LATCH_STAR_1311 <= not a;
    	PS_PERCENT_OR_COML_AT <= b;
    	PS_M_OR_L_OP_CODES <= c;
    	PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD <= d;
    	PS_I_RING_11_TIME <= e;
    	PS_LOGIC_GATE_F_1 <= f;
    	MS_E_CH_FILE_ADDR_TRANSFER <= not g;
    	MS_1401_PRINT <= not h;
    	PS_2ND_CLOCK_PULSE_2 <= i;
    	MS_1401_PUNCH <= not j;
    	MS_TEST_PRINT_ERROR <= not l;
    	MS_E_CH_FORMS_CTRL_OP_CODE_JRJ <= not m;
    	MS_TEST_PUNCH_ERROR <= not n;
    	PS_W_OR_X_SYMBOL_OP_MODIFIER <= o;
    	MS_E_CH_STACK_SEL_OP_CODE <= not p;
    	MS_1401_READ <= not q;
    	MS_TEST_READ_E_OR_F <= not r;
      
      wait for 30 ns;
     
      check1(MC_INPUT_MODE_TO_BUFFER,not lin,testName,"-C Input Mode To Buffer");
      check1(MC_INPUT_OP_TO_1405_STAR_E_CH,not lin,testName,"-C Input Op To 1405");          
      check1(MC_INPUT_OP_TO_1301_STAR_E_CH,not lin,testName,"-C Input Op To 1301");
      check1(LAMP_15A1E14,lin,testName,"LAMP CH 1 READ");
      check1(PS_E_CH_INPUT_MODE,lin and not g,testname,"+S Input Mode");          
      check1(MS_E_CH_INPUT_MODE,not PS_E_CH_INPUT_MODE,testname,"-S Input Mode"); 
      
      check1(MC_OUTPUT_MODE_TO_BUFFER,not lout,testName,"-C Output Mode To Buffer");         
      check1(MC_OUTPUT_OP_TO_1301_STAR_E_CH,not lout,testName,"-C Output Op To 1301");         
      check1(MC_OUTPUT_OP_TO_1405_STAR_E_CH,not lout,testName,"-C Output Op To 1405");         
      check1(LAMP_15A1F14,lout,testName,"LAMP CH 1 WRITE");

      -- Have to reset variables so reset for next round works...
      
    	MS_RECEIVER_LATCH_STAR_1311 <= '1';
      PS_PERCENT_OR_COML_AT <= '0';
      PS_M_OR_L_OP_CODES <= '0';
      PS_DOLLAR_SIGN_OR_R_SYMBOL_OP_MOD <= '0';
      PS_I_RING_11_TIME <= '0';
      PS_LOGIC_GATE_F_1 <= '0';
      MS_E_CH_FILE_ADDR_TRANSFER <= '1';
      MS_1401_PRINT <= '1';
      PS_2ND_CLOCK_PULSE_2 <= '0';
      MS_1401_PUNCH <= '1';
      MS_TEST_PRINT_ERROR <= '1';
      MS_E_CH_FORMS_CTRL_OP_CODE_JRJ <= '1';
      MS_TEST_PUNCH_ERROR <= '1';
      PS_W_OR_X_SYMBOL_OP_MODIFIER <= '0';
      MS_E_CH_STACK_SEL_OP_CODE <= '1';
      MS_1401_READ <= '1';
      MS_TEST_READ_E_OR_F <= '1';
      wait for 30 ns;    
        
   end loop;

   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 20 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

end;
