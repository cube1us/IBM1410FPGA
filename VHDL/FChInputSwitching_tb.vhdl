-- Test BenchVHDL for IBM SMS ALD group FChInputSwitching
-- Title: FChInputSwitching
-- IBM Machine Name 1411
-- Generated by GenerateHDL on 9/27/2020 5:17:08 PM

-- Included from HDLTemplate.vhdl

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- For use in test benches only
use WORK.ALL;

-- End of include from HDLTemplate.vhdl

entity FChInputSwitching_tb is
end FChInputSwitching_tb;

architecture behavioral of FChInputSwitching_tb is

	-- Component Declaration for the Unit Under Test (UUT)

	component FChInputSwitching
	    Port (
		FPGA_CLK: in STD_LOGIC;
		MS_FILE_TO_F_CH: in STD_LOGIC;
		PS_ASSEMBLY_TO_F_CH: in STD_LOGIC;
		MS_TAPE_TO_F_CH: in STD_LOGIC;
		PS_F_CH_SELECT_UNIT_U: in STD_LOGIC;
		PS_F_CH_SELECT_UNIT_B: in STD_LOGIC;
		PS_ASSEMBLY_CH_C_CHAR_BIT: in STD_LOGIC;
		PS_ASSEMBLY_CH_BUS: in STD_LOGIC_VECTOR (6 downTo 0);
		PS_F1_INPUT_STAR_SIF_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F1_INPUT_STAR_1414_STAR_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F1_INPUT_STAR_1412_19_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_1301_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_1405_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		MC_F_CH_TAU_TO_CPU_BUS: in STD_LOGIC_VECTOR (7 downTo 0);
		PS_F1_INPUT_BUS: out STD_LOGIC_VECTOR (7 downTo 0);
		MS_F1_INPUT_BUS: out STD_LOGIC_VECTOR (7 downTo 0));
	end component;

	-- Inputs

	signal FPGA_CLK: STD_LOGIC := '0';
	signal MS_FILE_TO_F_CH: STD_LOGIC := '1';
	signal PS_ASSEMBLY_TO_F_CH: STD_LOGIC := '0';
	signal MS_TAPE_TO_F_CH: STD_LOGIC := '1';
	signal PS_F_CH_SELECT_UNIT_U: STD_LOGIC := '0';
	signal PS_F_CH_SELECT_UNIT_B: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_C_CHAR_BIT: STD_LOGIC := '0';
	signal PS_ASSEMBLY_CH_BUS: STD_LOGIC_VECTOR (6 downTo 0) := "0000000";
	signal PS_F1_INPUT_STAR_SIF_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_F1_INPUT_STAR_1414_STAR_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal PS_F1_INPUT_STAR_1412_19_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "00000000";
	signal MC_F_CH_1301_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_F_CH_1405_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";
	signal MC_F_CH_TAU_TO_CPU_BUS: STD_LOGIC_VECTOR (7 downTo 0) := "11111111";

	-- Outputs

	signal PS_F1_INPUT_BUS: STD_LOGIC_VECTOR (7 downTo 0);
	signal MS_F1_INPUT_BUS: STD_LOGIC_VECTOR (7 downTo 0);

-- START USER TEST BENCH DECLARATIONS

-- The user test bench declarations, if any, must be
-- placed AFTER the line starts with the first line of text 
-- with -- START USER TEST BENCH DECLARATIONS and ends
-- with the line containing -- END (and the rest of the line) below.
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

   constant HDL_C_BIT: integer := 7;
   constant HDL_WM_BIT: integer := 6;
   constant HDL_B_BIT: integer := 5;
   constant HDL_A_BIT: integer := 4;
   constant HDL_8_BIT: integer := 3;
   constant HDL_4_BIT: integer := 2;
   constant HDL_2_BIT: integer := 1;
   constant HDL_1_BIT: integer := 0;

   constant MX_X1A_POS: integer := 7;
   constant MX_X6A_POS: integer := 8;

procedure check1(
    checked: in STD_LOGIC;
    val: in STD_LOGIC;
    testname: in string;
    test: in string) is
    begin    
    assert checked = val report testname & " (" & test & ") failed." severity failure;
    end procedure;
      


   -- Your test bench declarations go here

-- END USER TEST BENCH DECLARATIONS
   

	begin

	-- Instantiate the Unit Under Test (UUT)

	UUT: FChInputSwitching port map(
		FPGA_CLK => FPGA_CLK,
		MS_FILE_TO_F_CH => MS_FILE_TO_F_CH,
		PS_ASSEMBLY_TO_F_CH => PS_ASSEMBLY_TO_F_CH,
		MS_TAPE_TO_F_CH => MS_TAPE_TO_F_CH,
		PS_F_CH_SELECT_UNIT_U => PS_F_CH_SELECT_UNIT_U,
		PS_F_CH_SELECT_UNIT_B => PS_F_CH_SELECT_UNIT_B,
		PS_ASSEMBLY_CH_C_CHAR_BIT => PS_ASSEMBLY_CH_C_CHAR_BIT,
		PS_ASSEMBLY_CH_BUS => PS_ASSEMBLY_CH_BUS,
		PS_F1_INPUT_STAR_SIF_BUS => PS_F1_INPUT_STAR_SIF_BUS,
		PS_F1_INPUT_STAR_1414_STAR_BUS => PS_F1_INPUT_STAR_1414_STAR_BUS,
		PS_F1_INPUT_STAR_1412_19_BUS => PS_F1_INPUT_STAR_1412_19_BUS,
		MC_F_CH_1301_TO_CPU_BUS => MC_F_CH_1301_TO_CPU_BUS,
		MC_F_CH_1405_TO_CPU_BUS => MC_F_CH_1405_TO_CPU_BUS,
		MC_F_CH_TAU_TO_CPU_BUS => MC_F_CH_TAU_TO_CPU_BUS,
		PS_F1_INPUT_BUS => PS_F1_INPUT_BUS,
		MS_F1_INPUT_BUS => MS_F1_INPUT_BUS);

-- START USER TEST BENCH PROCESS

-- The user test bench code MUST be placed between the
-- line that starts with the first line of text that
-- begins with "-- START USERS TEST BENCH PROCESS" 
-- and ends with "-- END"
-- This text is preserved when the IBM1410SMS applciation
-- regenerates a test bench

-- 
-- TestBenchFPGAClock.vhdl
--
-- Process to simulate the FPGA clock for a VHDL test bench
--

fpga_clk_process: process

   constant clk_period : time := 10 ns;

   begin
      fpga_clk <= '0';
      wait for clk_period / 2;
      fpga_clk <= '1';
      wait for clk_period / 2;
   end process;

--
-- End of TestBenchFPGAClock.vhdl
--   

-- Place your test bench code in the uut_process

uut_process: process

   variable testName: string(1 to 18);
   variable subtest: integer;
   variable tv: std_logic_vector(25 downto 0);
   variable a,b,c,d,e,f,g,i,j,k,p,q,t,u,v,w,x,y,z: std_logic;
   variable g1, g2, g3, g4, g5, g6, g8, g9, g10: std_logic;

   begin

   -- Your test bench code

   testName := "15.60.0*.1        ";
   
   for bitNum in 0 to 7 loop
      for tt in 0 to 2**13 loop
         tv := std_logic_vector(to_unsigned(tt,tv'Length));
         a := tv(0);
         b := tv(1);
         c := tv(2);
         d := tv(3);
         e := tv(4);
         f := tv(5);
         g := tv(6);
         -- h := tv(7);
         i := tv(7);
         j := tv(8);
         k := tv(9);
         -- l := tv(11);
         -- m := tv(12);
         -- n := tv(13);
         -- o := tv(14);
         p := tv(10);
         q := tv(11);
         -- r := tv(17);
         -- s := tv(18);
         t := tv(12);
         
         g1 := a and b; -- Assembly Ch
         
         case bitNum is
            when HDL_WM_BIT => g2 := c or d;
            when others => g2 := c or d or g;
         end case;
         
         case bitNum is  -- TAU
            when HDL_WM_BIT => g3 := '0';
            when HDL_C_BIT =>  g3 := (f and p and not e) or (q and e and f); 
            when others =>     g3 := e and f;             
         end case;
                 
         case bitNum is -- 1414 I/O Synchronizer
            when HDL_WM_BIT => g4 := '0';
            when others =>     g4 := g;
         end case;
         
         g5 := k and (i or j); -- 1301 or 1405
                  
         if(bitNum < 7) then
            PS_ASSEMBLY_CH_BUS(bitNum) <= a;
         else
            PS_ASSEMBLY_CH_C_CHAR_BIT <= a;
         end if;
                  
         PS_ASSEMBLY_TO_F_CH <= b;
         
         PS_F1_INPUT_STAR_SIF_BUS(bitNum) <= c;
         PS_F1_INPUT_STAR_1412_19_BUS(bitNum) <= d;
         
         MC_F_CH_TAU_TO_CPU_BUS(bitNum) <= not e;
         MS_TAPE_TO_F_CH <= not f;
         PS_F1_INPUT_STAR_1414_STAR_BUS(bitNum) <= g;
         MC_F_CH_1301_TO_CPU_BUS(bitNum) <= not i;
         MC_F_CH_1405_TO_CPU_BUS(bitNum) <= not j;
         MS_FILE_TO_F_CH <= not k;         
         
         PS_F_CH_SELECT_UNIT_U <= p;
         PS_F_CH_SELECT_UNIT_B <= q;
         wait for 30 ns;
         
         check1(PS_F1_INPUT_BUS(bitNum),g1 or g2 or g3 or g4 or g5,testName,
            "+S F1 Input BitNum " & Integer'Image(bitNum));
         check1(MS_F1_INPUT_BUS(bitNum),NOT PS_F1_INPUT_BUS(bitNum),testName,
               "-S F1 Input BitNum " & Integer'Image(bitNum));
         
      end loop;

   end loop;


   assert false report "Simulation Ended NORMALLY" severity failure;

   wait;
   end process;

-- The following is needed for older VHDL simulations to
-- terminate the simulation process.  If your environment
-- does not need it, it may be deleted.

stop_simulation: process
   begin
   wait for 2 ms;  -- Determines how long your simulation runs
   assert false report "Simulation Ended NORMALLY (TIMEOUT)" severity failure;
   end process;

-- END USER TEST BENCH PROCESS
   

END;
